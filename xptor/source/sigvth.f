      real*8 function sigvth(TkeV)
c
c Calculate cross-section <sigma v> averaged over a Maxwellian
c of a given temperature TkeV.  Uses the TRANSP cross-section tables, 
c which are fairly accurate. 
c
c At present works only for reaction='D->T'
c
      implicit none
c
c arguments:
      real*8 Tkev
c local vars:
      character chars*5,directory*80
      logical first_time
      real*8 sigv_table(300),logT,finteq1d
      integer n_table,getenv,status,ldir
      real*8 E1,E2,delta_E
      save sigv_table,e1,delta_E,n_table
      data first_time /.true./
c
c  Table of <sigma v> for DT fusion, averaged over a Maxwellian
c  300 points, logarithmically equally spaced from 0.2 to 200 kev.
c  <sigma v> in units of m**3/sec.
c
      data sigv_table 
     ./0.00000000D+00, 0.00000000D+00, 0.00000000D+00, 0.00000000D+00,
     . 0.00000000D+00, 0.00000000D+00, 0.00000000D+00, 4.78733916D-32,
     . 5.98646770D-32, 7.55710683D-32, 1.19214523D-31, 1.49225223D-31,
     . 2.05170290D-31, 2.44748362D-31, 3.15580596D-31, 4.02007313D-31,
     . 5.01097725D-31, 6.23417175D-31, 7.74121005D-31, 9.59446671D-31,
     . 1.20350017D-30, 1.50475211D-30, 1.85448678D-30, 2.28162682D-30,
     . 2.80241671D-30, 3.43631831D-30, 4.20662747D-30, 5.14114285D-30,
     . 6.27299495D-30, 7.64165969D-30, 9.29399775D-30, 1.12775634D-29,
     . 1.36383375D-29, 1.65621128D-29, 1.99930050D-29, 2.41701695D-29,
     . 2.90836306D-29, 3.50406162D-29, 4.20930557D-29, 5.04896859D-29,
     . 6.04718049D-29, 7.23221361D-29, 8.63689182D-29, 1.02995616D-28,
     . 1.22652656D-28, 1.45859221D-28, 1.73201600D-28, 2.05383240D-28,
     . 2.43209394D-28, 2.87607496D-28, 3.39649855D-28, 4.00569402D-28,
     . 4.71781529D-28, 5.54928354D-28, 6.51868401D-28, 7.64746144D-28,
     . 8.96013581D-28, 1.04847087D-27, 1.22531486D-27, 1.43018470D-27,
     . 1.66723345D-27, 1.94116829D-27, 2.25735610D-27, 2.62184759D-27,
     . 3.04152679D-27, 3.52417446D-27, 4.07858652D-27, 4.71467650D-27,
     . 5.44363675D-27, 6.27807594D-27, 7.23214967D-27, 8.32179230D-27,
     . 9.56486144D-27, 1.09814060D-26, 1.25938316D-26, 1.44272814D-26,
     . 1.65097417D-26, 1.88725434D-26, 2.15505906D-26, 2.45827624D-26,
     . 2.80123336D-26, 3.18874156D-26, 3.62613196D-26, 4.11931116D-26,
     . 4.67493856D-26, 5.30018817D-26, 6.00314028D-26, 6.79268835D-26,
     . 7.67863708D-26, 8.67182406D-26, 9.78419435D-26, 1.10288671D-25,
     . 1.24203253D-25, 1.39744343D-25, 1.57086513D-25, 1.76421518D-25,
     . 1.97959024D-25, 2.21928759D-25, 2.48582570D-25, 2.78195964D-25,
     . 3.11068809D-25, 3.47530182D-25, 3.87937117D-25, 4.32680494D-25,
     . 4.82185953D-25, 5.36914756D-25, 5.97370344D-25, 6.64099595D-25,
     . 7.37695042D-25, 8.18799508D-25, 9.08110938D-25, 1.00638437D-24,
     . 1.11443701D-24, 1.23315368D-24, 1.36348661D-24, 1.50646686D-24,
     . 1.66320791D-24, 1.83490703D-24, 2.02284880D-24, 2.22850109D-24,
     . 2.45321286D-24, 2.69856142D-24, 2.96643353D-24, 3.25859468D-24,
     . 3.57700616D-24, 3.92378823D-24, 4.30117810D-24, 4.71159048D-24,
     . 5.15759390D-24, 5.64190085D-24, 6.16742815D-24, 6.73724447D-24,
     . 7.35464094D-24, 8.02305935D-24, 8.74617580D-24, 9.52787385D-24,
     . 1.03722240D-23, 1.12835390D-23, 1.22663224D-23, 1.33253359D-23,
     . 1.44655775D-23, 1.56922436D-23, 1.70107173D-23, 1.84267100D-23,
     . 1.99461145D-23, 2.15750097D-23, 2.33197523D-23, 2.51868378D-23,
     . 2.71830329D-23, 2.93152640D-23, 3.15906481D-23, 3.40163259D-23,
     . 3.65998139D-23, 3.93486849D-23, 4.22703985D-23, 4.53727328D-23,
     . 4.86634756D-23, 5.21503512D-23, 5.58411032D-23, 5.97435666D-23,
     . 6.38652070D-23, 6.82136544D-23, 7.27963999D-23, 7.76203222D-23,
     . 8.26926221D-23, 8.80200648D-23, 9.36087531D-23, 9.94647831D-23,
     . 1.05593879D-22, 1.12001096D-22, 1.18691078D-22, 1.25668130D-22,
     . 1.32935684D-22, 1.40496683D-22, 1.48353687D-22, 1.56508009D-22,
     . 1.64960345D-22, 1.73711374D-22, 1.82761073D-22, 1.92106816D-22,
     . 2.01746973D-22, 2.11678164D-22, 2.21896904D-22, 2.32398271D-22,
     . 2.43176358D-22, 2.54224954D-22, 2.65536538D-22, 2.77107247D-22,
     . 2.88914841D-22, 3.00962830D-22, 3.13235713D-22, 3.25722182D-22,
     . 3.38410145D-22, 3.51285996D-22, 3.64336179D-22, 3.77546583D-22,
     . 3.90902086D-22, 4.04387013D-22, 4.17985789D-22, 4.31681045D-22,
     . 4.45456399D-22, 4.59294610D-22, 4.73177653D-22, 4.87087253D-22,
     . 5.01006242D-22, 5.14915640D-22, 5.28797118D-22, 5.42632855D-22,
     . 5.56403514D-22, 5.70091374D-22, 5.83678461D-22, 5.97144027D-22,
     . 6.10477669D-22, 6.23655054D-22, 6.36661389D-22, 6.49479558D-22,
     . 6.62094063D-22, 6.74488342D-22, 6.86647150D-22, 6.98556299D-22,
     . 7.10201502D-22, 7.21568924D-22, 7.32665130D-22, 7.43420296D-22,
     . 7.53880516D-22, 7.64015548D-22, 7.73815296D-22, 7.83269914D-22,
     . 7.92371425D-22, 8.01111398D-22, 8.09483118D-22, 8.17479769D-22,
     . 8.25096000D-22, 8.32327015D-22, 8.39168471D-22, 8.45616885D-22,
     . 8.51668572D-22, 8.57323228D-22, 8.62577622D-22, 8.67432764D-22,
     . 8.71887645D-22, 8.75943273D-22, 8.79600861D-22, 8.82858996D-22,
     . 8.85724644D-22, 8.88206185D-22, 8.90295240D-22, 8.92000897D-22,
     . 8.93328000D-22, 8.94280894D-22, 8.94865434D-22, 8.95086870D-22,
     . 8.94952069D-22, 8.94467090D-22, 8.93653945D-22, 8.92473860D-22,
     . 8.90980754D-22, 8.89165541D-22, 8.87038217D-22, 8.84605345D-22,
     . 8.81875911D-22, 8.78856884D-22, 8.75559268D-22, 8.71990133D-22,
     . 8.68159273D-22, 8.64074362D-22, 8.59745498D-22, 8.55180252D-22,
     . 8.50388421D-22, 8.45378637D-22, 8.40161249D-22, 8.34742318D-22,
     . 8.29136937D-22, 8.23346016D-22, 8.17377987D-22, 8.11253145D-22,
     . 8.04975932D-22, 7.98541453D-22, 7.91974495D-22, 7.85277482D-22,
     . 7.78459200D-22, 7.71519799D-22, 7.64482806D-22, 7.57348121D-22,
     . 7.50111704D-22, 7.42807029D-22, 7.35423038D-22, 7.27958067D-22,
     . 7.20447101D-22, 7.12881054D-22, 7.05265883D-22, 6.97596691D-22,
     . 6.89906395D-22, 6.82186363D-22, 6.74441692D-22, 6.66680008D-22,
     . 6.58905146D-22, 6.51161435D-22, 6.43343155D-22, 6.35568545D-22/
c
      if(first_time) then
         n_table=300
         E1=dlog(0.2D0)
         E2=dlog(200.D0)
         delta_E=(E2-E1)/(n_table-1)
         first_time=.false.
      endif
c
      logT=dlog(TkeV)
      sigvth=finteq1d(logT,sigv_table,E1,delta_E,n_table)
c
      return
      end
c
	real*8 function finteq1d(x,fa,x1,deltax,nmax)
C
C FUNCTIONAL DESCRIPTION:	
C
C    Linear interpolation of f(x) on an equally spaced 1d x grid.
C    This is a pretty fast routine, but it could be made slightly
C    faster by precomputing an array of deltaf's.
C
C    Linear extrapolation is used for values of x less than x1 or
C    greater than xN=x1+(nmax-1)*deltax.  If no extrapolation is
C    desired, you should add points to either end to force the
C    extrapolation to be zero.
C
C    Written by Greg Hammett, 2-Sep-1988, for use in FPP.
C
C SUBROUTINE ARGUMENTS:
C
C    x	  find the value of f(x) at this value of x (input).
C    fa	  array of values of f(i) at x(i) (input).
C	    x(i) = x1 + (i-1) * deltax
C
C    x1	  (input) first value of x.
C    deltax (input) spacing between x values.
C    nmax length of f and delta f arrays.
C
C IMPLICIT INPUTS:
C
C    none
C
C IMPLICIT OUTPUTS:
C
C    none
C
C FUNCTION VALUE:
C
C    Interpolated value of f at x
C
C SIDE EFFECTS:
C
C    none
C
C
        implicit none
c
        integer n, nmax
	real*8 x,x1,deltax,zn,wgt,fa(nmax)
c
	zn=1.D0+(x-x1)/deltax
	n=zn
c
	if(n .lt. 1) n=1
	if(n .ge. nmax) n=nmax-1
c
	wgt=zn-n
	finteq1d=fa(n)+(fa(n+1)-fa(n))*wgt
c
	return
	end
