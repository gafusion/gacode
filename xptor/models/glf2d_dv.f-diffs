16,17d15
<       real*8 gb_unit
< c
24,60d21
<       nefluxm = neflux_neo + neflux_glf
<       nifluxm = niflux_neo + niflux_glf
<       nzfluxm = nzflux_neo + nzflux_glf
<       tefluxm = teflux_neo + teflux_glf
<       tifluxm = tiflux_neo + tiflux_glf
<       tzfluxm = tzflux_neo + tzflux_glf
<       vphifluxm = vphiflux_neo + vphiflux_glf
<       vphizfluxm = vphizflux_neo + vphizflux_glf
<       vparfluxm = vparflux_neo + vparflux_glf
<       vparzfluxm = vparzflux_neo + vparzflux_glf
< c
< c save glf flows
< c
<       if(ipert_gf.eq.0)then
< c save fluxes in MKS units
<         flow_glf(jm) = vprime(jm,2)*neflux_glf            !KA
<         powe_glf(jm) = vprime(jm,2)*teflux_glf            !MW
<         powi_glf(jm) = vprime(jm,2)*tiflux_glf            !MW
<         stress_tor_glf(jm) = vprime(jm,2)*vphiflux_glf    !NT-M
<         stress_par_glf(jm) = vprime(jm,2)*vparflux_glf    !NT-M
<       endif
< c
<       if(imodel.eq.81.or.imodel.eq.82)then
<         call adhoc_dv
< c
<         nefluxm = nefluxm + neflux_adhoc
<         nifluxm = nifluxm + niflux_adhoc
<         nzfluxm = nzfluxm + nzflux_adhoc
<         tefluxm = tefluxm + teflux_adhoc
<         tifluxm = tifluxm + tiflux_adhoc
<         tzfluxm = tzfluxm + tzflux_adhoc
<         vphifluxm = vphifluxm + vphiflux_adhoc
<         vphizfluxm = vphizfluxm + vphizflux_adhoc
<         vparfluxm = vparfluxm + vparflux_adhoc
<         vparzfluxm = vparzfluxm + vparzflux_adhoc
<       endif
< c
67,68d27
<       if(imodel.eq.-1) call test_dv
< c
85c44
<       real*8 gfac
---
>       real*8 gfac, csdam
149c108
<      &       dbohm_ms, gyro_ms, rlte_ms, rlti_ms, gfac
---
>      &       dbohm_ms, gyro_ms, rlte_ms, rlti_ms, gfac, csdam
234,235c193,195
<       real*8 rmajm,rminm,rhom
<       real*8 fac_imp_flow
---
>       real*8 csdam,rmajm,rminm,rhom
>       real*8 cv,fac_imp_flow
>       real*8 art_diff
237,239c197
<       real*8 vneom(nspecies),vdiam(nspecies)
<       real*8 gradvneom(nspecies),gradvdiam(nspecies)
<       real*8 gradvphim
---
>       real*8 vpolm,vdiam,gradvphim,gradvpolm,gradvdiam
241d198
<       real*8 apolm,atorm,grad_a_pol,grad_a_tor
242a200
>       cv=1000.D0
244a203
>       vdiam = (vdia_m(jm+1)+vdia_m(jm))/2.0
250a210
>       zpne_m(jm)=zpmne
252a213
>       zpni_m(jm)=zpmni
254a216
>       zpte_m(jm)=zpmte
256a219
>       zpti_m(jm)=zpmti
260,261c223,227
<       vdiam(2) = (vdia_m(2,jm+1)+vdia_m(2,jm))/2.0
<       vneom(2) = (vneo_m(2,jm+1)+vneo_m(2,jm))/2.0
---
> cgms      gamma_p_gf = cv*drhodr(jm)*gradvparm/csdam
> cgms      gamma_e_gf = cv*(rminm/rhom)*drhodr(jm)*(gradvexbm
> cgms     >   + vexbm*zptheta_exp(jm))/csdam
>       vdiam = (vdia_m(jm+1)+vdia_m(jm))/2.0
>       vpolm = (vpol_m(jm+1)+vpol_m(jm))/2.0
265,268c231,232
<       apolm = (a_pol(jm+1)+a_pol(jm))/2.0
<       atorm = (a_tor(jm+1)+a_tor(jm))/2.0
<       gradvdiam(2) =(vdia_m(2,jm+1)-vdia_m(2,jm))/dr(jm,2)
<       gradvneom(2) =(vneo_m(2,jm+1)-vneo_m(2,jm))/dr(jm,2)
---
>       gradvdiam =(vdia_m(jm+1)-vdia_m(jm))/dr(jm,2)
>       gradvpolm =(vpol_m(jm+1)-vpol_m(jm))/dr(jm,2)
272,278c236,239
<       grad_a_pol=(a_pol(jm+1)-a_pol(jm))/dr(jm,2)
<       grad_a_tor=(a_tor(jm+1)-a_tor(jm))/dr(jm,2)
< c
<       gamma_p_m(jm) = -(cv/csdam)*drhodr(jm)*
<      >  (apolm*(gradvpolm+gradvneom(2))+atorm*(gradvexbm+gradvdiam(2))
<      >  +(vpolm+vneom(2))*grad_a_pol+(vexbm+vdiam(2))*grad_a_tor)
<       egamma_m(jm) = -cv/csdam*(rminm/rhom)*drhodr(jm)
---
>       gamma_p_m(jm) = -cv/csdam*drhodr(jm)*
>      >  (cparm*gradvparm-cperm*gradvexbm
>      >  +vparm*grad_c_par-vexbm*grad_c_per)
>       egamma_m(jm) = cv/csdam*(rminm/rhom)*drhodr(jm)
280,289c241,249
< c      if(jm.eq.ngrid-1.and.itport_pt(5).eq.0)egamma_m(jm)=0.0
< c       gradvphim = -gamma_p_m(jm)*csdam/cv
<        gradvphim =
<      >  cperm*(gradvpolm+gradvneom(3))+ctorm*(gradvexbm+gradvdiam(3))
<      > +grad_c_per*(vpolm+vneom(3))+grad_c_tor*(vexbm+vdiam(3))
< c      if(iexb.eq.2) then
< c        egamma_m(jm)=egamma_exp(jm)
< c      else
< c        egamma_m(jm)=gamma_e_gf
< c      endif
---
>       if(jm.eq.ngrid-1.and.itport_pt(5).eq.0)gamma_e_gf=0.0
> c      gradvphim = cperm*gradvpolm-ctorm*(gradvexbm+gradvdiam) 
> c     > +grad_c_per*vpolm -grad_c_tor*(vexbm+vdiam)
>        gradvphim = -gamma_p_m(jm)*csdam/cv
>       if(iexb.eq.2) then
>         egamma_m(jm)=egamma_exp(jm)
>       else
>         egamma_m(jm)=gamma_e_gf
>       endif
316a277,280
>        betat_m(jm) = 4.03D-3*(nem*tem + nim*tim +
>      >       (nfst_exp(jm+1)+nfst_exp(jm)/2)*tim/(bt_exp**2))
>        betaf_m(jm) = 4.03D-3*(
>      >       (nfst_exp(jm+1)+nfst_exp(jm)/2)*tim/(bt_exp**2))
561a526,568
>       if(use_xneo_m.eq.2) then
>         diffnem = diffnem + xparam_pt(3)*deneo_m(jm)
>         diffnem = diffnem + xparam_pt(8)*DABS(chietem)
>       else
>         diffnem = diffnem + xparam_pt(3)*chieneo_m(jm)
>         diffnem = diffnem + xparam_pt(8)*DABS(chietem)
>       endif
> c      if(q_exp(jm).lt.1.) then
> c        chietem = chietem + xparam_pt(4)*chiineo_m(jm)
> c        diffnem = diffnem + xparam_pt(3)*chiineo_m(jm)
> c      else
> c        chietem = chietem + xparam_pt(4)*chieneo_m(jm)
> c      endif
>       chiitim = chiitim + xparam_pt(5)*chiineo_m(jm)
>       fac_imp_flow=1.D0
>       if(iexp_imp.eq.1) fac_imp_flow=1.D0+nz_exp(jm)/ni_exp(jm)
>       chiitim = fac_imp_flow*chiitim
>       etaparm = etaparm + xparam_pt(6)*chiineo_m(jm)
>      >          *rmajor_exp**2/(f_exp(jm)*xr2_exp(jm))
> c      etaphim = etaphim + xparam_pt(6)*chiineo_m(jm)
>       vphifluxm = -nim*gradvphim*xparam_pt(6)*chiineo_m(jm)
>       etaexbm = etaexbm + xparam_pt(6)*chiineo_m(jm)
>       etaparm = etaparm + xparam_pt(6)*chiineo_m(jm)
> c
>       if(xparam_pt(11).gt.0) then
>         etaphim = etaphim + xparam_pt(11)*DABS(chietem) +
>      >            xparam_pt(6)*chieneo_m(jm)
>       endif
> c
> c add in artificial diffusion terms
> c
>        art_diff=adiff_dv*cgyrobohm_m(jm)*gfac
>        diffnem = diffnem 
>      > + art_diff*(dr(jm,2)*DABS(zpmne)/arho_exp)**2
>        chietem = chietem
>      > + art_diff*DABS(dr(jm,2)*zpmte/arho_exp)**2
>        chiitim = chiitim
>      > + art_diff*DABS(dr(jm,2)*zpmti/arho_exp)**2
>        etaparm = etaparm  
>      > + 1.D-2*art_diff*DABS(dr(jm,2)*gamma_p_gf/arho_exp)**2
>        etaexbm = etaexbm
>      > + 1.D-2*art_diff*DABS(dr(jm,2)*gamma_e_gf/arho_exp)**2
> c
565,567c572,577
<        neflux_glf = 1.6022D-3*nem*zpmne*diffnem/arho_exp
<        teflux_glf = 1.6022D-3*tem*nem*zpmte*chietem/arho_exp
<        tiflux_glf = 1.6022D-3*tim*nim*zpmti*chiitim/arho_exp
---
>        nefluxm = nem*zpmne*diffnem/arho_exp
>        tefluxm = tem*nem*zpmte*chietem/arho_exp
>        tifluxm = tim*nim*zpmti*chiitim/arho_exp
> c       vparfluxm = -nim*etaparm*gamma_p_gf*csdam/cv
> c       vexbfluxm = -nim*etaexbm*gamma_e_gf*csdam/cv
> c       vphifluxm = c_par(jm)*vparfluxm+c_per(jm)*vexbfluxm
569,580c579,586
<        vphiflux_glf =(1.6726D-5) 
<      >   *rmajor_exp*amassgas_exp*nim*etaphim*gamma_p_gf*csdam
<        vparflux_glf = vphiflux_glf*c_per(jm)/c_tor(jm)
< c
<        mass_factor = 1.0 +amassimp_exp*fz_m(jm)/(amassgas_exp*fi_m(jm))
<        vphiflux_glf = vphiflux_glf*mass_factor
<        vparflux_glf = vparflux_glf*mass_factor
<        niflux_glf = neflux_glf
<        nzflux_glf = 0.0
<        tzflux_glf = 0.0
<        vphizflux_glf = 0.0
<        vparzflux_glf = 0.0
---
>        vphifluxm = vphifluxm +nim*etaphim*gamma_p_gf*csdam/cv
> c       vphifluxm = nim*etaphim*gradvexbm*drhodr(jm)
>        vparfluxm = vphifluxm*c_per(jm)/c_tor(jm)
> c
>        mass_factor = amassgas_exp+amassimp_exp*nzm/nim
>        vphifluxm = vphifluxm*mass_factor
>        vparfluxm = vparfluxm*mass_factor
> 
597d602
<       use tglf_tg
608a614
>       include '../inc/tglfin.m'
610c616
<       real*8 ztau_nco, zrho_nco, rhosdam, rhom, rminm,
---
>       real*8 ztau_nco, zrho_nco, csdam, rhosdam, rhom, rminm,
613,617d618
<       real*8 fcm,r_eps,tauim,nu_plateau
<       real*8 nu_braginski,vthi,x13
<       real*8 kpol1,kpol2,cnc
<       real*8 thetam,qm
<       real*8 ctorm, grad_c_tor
751,799c752
<       chiineogb_m(jm)=chiineo_m(jm)/cgyrobohm_m(jm)
< c
< c  model for neoclassical diffusivities
< c
<       diffnem = xparam_pt(3)*deneo_m(jm)
<       chietem = xparam_pt(4)*chieneo_m(jm)
<       chiitim = xparam_pt(5)*chiineo_m(jm)
<       etaphim = xparam_pt(6)*etaphineo_m(jm)
< c
< c     compute neoclassical flows
< c
<       if(ncl_flag.eq.0)then
<         cnc = -1.0*alpha_dia/bt_exp
<         thetam=theta_exp(jm)
<         rmajm = rmaj_exp(jm)
<         rhom=arho_exp*rho(jm)
<         rminm=rmin_exp(jm)
<         qm=q_exp(jm)
<         r_eps = rminm/rmajm
<         fcm = 1.001D0+(0.46D0*r_eps-1.46D0)*DSQRT(r_eps)
<         kpol1=0.8839D0*fcm/(0.3477D0+0.4058D0*fcm)
<         kpol2=(1.0 -fcm)/(1.0 + 1.167*fcm)
<         kpol_m(jm)=0.8839D0*fcm/(0.3477D0+0.4058D0*fcm)
< c calculate coefficient of poloidal collisional damping rate /taui added below
<         nu_pol_m(jm)=0.7538D0*(1.D0-xparam_pt(10))*(bt_exp**2)*
<      >    *(1-fcm)/(fcm*f_exp(jm)*xb2_exp(jm)*thetam)
<         lnlamda=24.D0-DLOG(DSQRT(1.D13*nem)/(1000.D0*tem))
<         lnlamda=DMAX1(lnlamda,1.D0)
<         tauim=2.09D7*DSQRT(amassgas_exp)*
<      >   DSQRT(tim*1000.D0)**3/(1.0D13*nim*lnlamda)
< c   calculate the collisional flow damping (bannana regime) on the half grid
<         nu_pol_m(jm)=nu_pol_m(jm)/tauim
<         nu_plateau = (qm/rmajor_exp)*
<      >  1.2533D0*9.79D3*DSQRT(1000.D0*tim/amassgas_exp)
<      >  *(bt_exp**2)/(xb2_exp(jm)*f_exp(jm))
<         vthi=9.79D5*SQRT(tim/amassgas_exp)
<         nu_braginski = 0.96*tauim*0.5*
<      >  (vthi*thetam/(rmajor_exp*100.0))**2
< c       write(*,*)jm,"nu_pol_m=",nu_pol_m(jm),nu_plateau,nu_braginski
<         nu_pol_m(jm)= DMIN1(nu_pol_m(jm),DMIN1(nu_plateau,nu_braginski))
< c calculate vneo and vdia on the half grid
< c neoclassical poloidal velocity (km/sec)
<         vneo(1) = -alpha_dia*curden_exp(jm)/(1.6022*nem*1000.0)
<         vneo(2) = (cnc/thetam)*kpol1*gradtim
<         vneo(3) = (cnc/thetam)*((kpol1+1.5*kpol2
<      >     -1.0+1.0/zimp_exp)*gradtim - gradnim+ gradnzm/zimp_exp)
<       endif
< c
< c diamagnetic velocity (km/sec)
---
> c ad-hoc model for transport in sawtooth region 
801,809c754,757
<       vdia(1) = (-cnc/thetam)*(gradtem+tem*gradnem/nem)
<       vdia(2) = (cnc/thetam)
<      >   *(gradtim +tim*gradfim/fim+tim*gradnem/nem)
<       vdia(3) = (cnc/thetam)*(gradtim+tim*gradfzm/fzm
<      >   +tim*gradnem/nem)/zimp_exp
< c
<       if(jm.eq.1)then
<         nu_pol_m(0)=nu_pol_m(1)
<         kpol_m(0)=kpol_m(1)
---
>       if(ineo.lt.-1.and.q_exp(jm).lt.1.D0)then
>         chieneo_m(jm)=chiineo_m(jm)
>         deneo_m(jm)=chiineo_m(jm)
>         etaphineo_m(jm)=chiineo_m(jm)
812,835c760
< c compute neoclassical fluxes
< c
<        neflux_neo = -1.6022D-3*diffnem*gradnem
<        teflux_neo = -1.6022D-3*nem*chietem*gradtem
<        tiflux_neo = -1.6022D-3*nim*chiitim*gradtim
< c use large ExB rotation form
<       ctorm = (c_tor(jm+1)+c_tor(jm))/2.0
<       grad_c_tor=(c_tor(jm+1)-c_tor(jm))/dr(jm,2)
<       vphiflux_neo=-1.6726D-5*amassgas_exp*nim*etaphim
<      >     *(ctorm*gradvexbm+grad_c_tor*vexbm)
<       vparflux_neo = vphiflux_neo*c_per(jm)/c_tor(jm)
<       niflux_neo = neflux_neo
<       nzflux_neo = 0.0
<       tzflux_neo = 0.0
<       vparzflux_neo = 0.0
<       vphizflux_neo = 0.0
< c
<       if(ipert_gf.eq.0)then
<         flow_neo(jm) = vprime(jm,2)*neflux_neo
<         powe_neo(jm) = vprime(jm,2)*teflux_neo
<         powi_neo(jm) = vprime(jm,2)*tiflux_neo
<         stress_tor_neo(jm) = vprime(jm,2)*vphiflux_neo
<         stress_par_neo(jm) = vprime(jm,2)*vparflux_neo
<       endif
---
>       chiineogb_m(jm)=chiineo_m(jm)/cgyrobohm_m(jm)
842d766
<       USE tglf_tg
854a779
>       include '../inc/tglfin.m'
858c783
<       real*8 exchgb_local,gfac,diffgb_local
---
>       real*8 exchgb_local,gfac,diffgb_local,art_diff
861,862c786,787
<       real*8 rhosdam,rmajm,rminm,rhom
<       real*8 fac_imp_flow
---
>       real*8 csdam,rhosdam,rmajm,rminm,rhom
>       real*8 cv,fac_imp_flow
867,869c792
<       real*8 vneom(nspecies),vdiam(nspecies)
<       real*8 gradvneom(nspecies),gradvdiam(nspecies)
<       real*8 gradvphim
---
>       real*8 vpolm,vdiam,gradvphim,gradvpolm,gradvdiam
871d793
<       real*8 apolm,atorm,grad_a_pol,grad_a_tor
873d794
<       real*8 chi_DR
883a805
>       cv=1000.D0
885,886d806
<       mass_factor = (1.0 + 
<      >   +amassimp_exp*fz_m(jm)/(amassgas_exp*fi_m(jm)))
896,906c816,825
<       zpmne = -a_unit_exp*gradnem/nem
<       zpmni = -a_unit_exp*gradnim/nim
<       zpmnz = -a_unit_exp*gradnzm/nzm
<       zpmte = -a_unit_exp*gradtem/tem
<       zpmti = -a_unit_exp*gradtim/tim
<       zpmne = drhodr(jm)*zpmne
<       zpmni = drhodr(jm)*zpmni
<       zpmnz = drhodr(jm)*zpmnz
<       zpmte = drhodr(jm)*zpmte
<       zpmti = drhodr(jm)*zpmti
< c
---
>       zpmne = -a_unit_exp*drhodr(jm)*gradnem/nem
>       zpne_m(jm)=zpmne
>       zpmni = -a_unit_exp*drhodr(jm)*gradnim/nim
>       zpni_m(jm)=zpmni
>       zpmnz = -a_unit_exp*drhodr(jm)*gradnzm/nzm
>       zpnz_m(jm) = zpmnz
>       zpmte = -a_unit_exp*drhodr(jm)*gradtem/tem
>       zpte_m(jm)=zpmte
>       zpmti = -a_unit_exp*drhodr(jm)*gradtim/tim
>       zpti_m(jm)=zpmti
910,933c829,830
<       vdiam(1) = (vdia(1)+vdia_m(1,jm))/2.0
<       vdiam(2) = (vdia(2)+vdia_m(2,jm))/2.0
<       vdiam(3) = (vdia(3)+vdia_m(3,jm))/2.0
<       vneom(1) = (vneo(1)+vneo_m(1,jm))/2.0
<       vneom(2) = (vneo(2)+vneo_m(2,jm))/2.0
<       vneom(3) = (vneo(3)+vneo_m(3,jm))/2.0
<       gradvdiam(1) =(vdia(1)-vdia_m(1,jm))/dr(jm,2)
<       gradvdiam(2) =(vdia(2)-vdia_m(2,jm))/dr(jm,2)
<       gradvdiam(3) =(vdia(3)-vdia_m(3,jm))/dr(jm,2)
<       gradvneom(1) =(vneo(1)-vneo_m(1,jm))/dr(jm,2)
<       gradvneom(2) =(vneo(2)-vneo_m(2,jm))/dr(jm,2)
<       gradvneom(3) =(vneo(3)-vneo_m(3,jm))/dr(jm,2)
<       vdiam(1) = (vdia_m(1,jm+1)+vdia_m(1,jm))/2.0
<       vdiam(2) = (vdia_m(2,jm+1)+vdia_m(2,jm))/2.0
<       vdiam(3) = (vdia_m(3,jm+1)+vdia_m(3,jm))/2.0
<       vneom(1) = (vneo_m(1,jm+1)+vneo_m(1,jm))/2.0
<       vneom(2) = (vneo_m(2,jm+1)+vneo_m(2,jm))/2.0
<       vneom(3) = (vneo_m(3,jm+1)+vneo_m(3,jm))/2.0
<       gradvdiam(1) =(vdia_m(1,jm+1)-vdia_m(1,jm))/dr(jm,2)
<       gradvdiam(2) =(vdia_m(2,jm+1)-vdia_m(2,jm))/dr(jm,2)
<       gradvdiam(3) =(vdia_m(3,jm+1)-vdia_m(3,jm))/dr(jm,2)
<       gradvneom(1) =(vneo_m(1,jm+1)-vneo_m(1,jm))/dr(jm,2)
<       gradvneom(2) =(vneo_m(2,jm+1)-vneo_m(2,jm))/dr(jm,2)
<       gradvneom(3) =(vneo_m(3,jm+1)-vneo_m(3,jm))/dr(jm,2)
---
>       vdiam = (vdia_m(jm+1)+vdia_m(jm))/2.0
>       vpolm = (vpol_m(jm+1)+vpol_m(jm))/2.0
937,938c834,835
<       apolm = (a_pol(jm+1)+a_pol(jm))/2.0
<       atorm = (a_tor(jm+1)+a_tor(jm))/2.0
---
>       gradvdiam =(vdia_m(jm+1)-vdia_m(jm))/dr(jm,2)
>       gradvpolm =(vpol_m(jm+1)-vpol_m(jm))/dr(jm,2)
942,944c839,842
<       grad_a_pol=(a_pol(jm+1)-a_pol(jm))/dr(jm,2)
<       grad_a_tor=(a_tor(jm+1)-a_tor(jm))/dr(jm,2)
< c
---
> c      gamma_p_m(jm) = -(cv/(csdam*sqrt(cparm)))*drhodr(jm)*
> c     >  (cparm*gradvparm-cperm*gradvexbm
> c     >  +vparm*grad_c_par-vexbm*grad_c_per)
> c     >  -0.5*(cparm*vparm-cparm*vexbm)*grad_c_par/cparm
946,953c844,847
<      >  (apolm*(gradvpolm+gradvneom(2))
<      >  +atorm*(gradvexbm+gradvdiam(2))
<      >  +grad_a_pol*(vpolm+vneom(2))
<      >  +grad_a_tor*(vexbm+vdiam(2)))
< c      egamma_m(jm) = -cv/csdam*(rminm/rhom)*drhodr(jm)
< c     >  *theta_exp(jm)*gradvexbm
<       egamma_m(jm) = -cv/csdam*(rminm/rhom)*drhodr(jm)
<      >  *theta_exp(jm)*(vexb_m(jm+1)-vexb_m(jm))/dr(jm,2)
---
>      >  (cparm*gradvparm-cperm*gradvexbm 
>      >  +vparm*grad_c_par-vexbm*grad_c_per)
>       egamma_m(jm) = cv/csdam*(rminm/rhom)*drhodr(jm)
>      >  *theta_exp(jm)*gradvexbm
955a850,851
> c        gamma_p_m(jm) = cv/csdam*drhodr(jm)*
> c     >  (-cparm*gradvexbm -vexbm*grad_c_per)
957,962c853,860
< c       gradvphim = -gamma_p_m(jm)*csdam/cv
< c       gradvphim = (cv/csdam)*drhodr(jm)*gradvexbm
<        gradvphim =
<      >  cperm*(gradvpolm+gradvneom(3))+ctorm*(gradvexbm+gradvdiam(3))
<      > +grad_c_per*(vpolm+vneom(3))+grad_c_tor*(vexbm+vdiam(3))
< c
---
> c      gradvphim = cperm*gradvpolm-ctorm*(gradvexbm+gradvdiam) 
> c     > +grad_c_per*vpolm -grad_c_tor*(vexbm+vdiam)
>        gradvphim = -gamma_p_m(jm)*csdam/cv
> c      egamma_m(jm)= cv*drhodr(jm)*(rminm/rhom)*(gradvexbm
> c     >   + vexbm*zptheta_exp(jm))/csdam
> c      if(jm.eq.ngrid-1.and.itport_pt(5).eq.0)egamma_m(jm)=0.0
> c      gamma_p_m(jm)= -cv*drhodr(jm)*gradvparm/csdam
> c      vdiam = (vdia_m(jm+1)+vdia_m(jm))/2.0
978a877,880
>       betat_m(jm) = 4.03D-3*(nem*tem + nim*tim +
>      >       (nfst_exp(jm+1)+nfst_exp(jm)/2)*tim/(bt_exp**2))
>       betaf_m(jm) = 4.03D-3*(
>      >       (nfst_exp(jm+1)+nfst_exp(jm)/2)*tim/(bt_exp**2))
1021c923
<         vexb_shear_tg = egamma_exp(jm)
---
>         gamma_e_tg = egamma_exp(jm)
1023,1037c925
<         vexb_shear_tg = egamma_m(jm)
<       endif
<       vpar_shear_tg(1) = -sign_Bt_exp*(cv/(csdam))*drhodr(jm)*
<      >  (apolm*(gradvpolm+gradvneom(1))+atorm*(gradvexbm+gradvdiam(1)) 
<      >  +(vpolm+vneom(1))*grad_a_pol+(vexbm+vdiam(1))*grad_a_tor)
<       vpar_shear_tg(2) = -sign_Bt_exp*(cv/(csdam))*drhodr(jm)*
<      >  (apolm*(gradvpolm+gradvneom(2))+atorm*(gradvexbm+gradvdiam(2)) 
<      >  +(vpolm+vneom(2))*grad_a_pol+(vexbm+vdiam(2))*grad_a_tor)
<       vpar_shear_tg(3) = -sign_Bt_exp*(cv/(csdam))*drhodr(jm)*
<      >  (apolm*(gradvpolm+gradvneom(3))+atorm*(gradvexbm+gradvdiam(3)) 
<      >  +(vpolm+vneom(3))*grad_a_pol+(vexbm+vdiam(3))*grad_a_tor)
<       if(alpha_p_tg.eq.0.0)then
<         vpar_shear_tg(1)=0.0
<         vpar_shear_tg(2)=0.0
<         vpar_shear_tg(3)=0.0
---
>         gamma_e_tg = egamma_m(jm)
1039,1040c927,966
<       if(ineo.eq.-2.and.q_exp(jm).lt.1.0)go to 86 !skip TGLF
<       if(ineo.eq.-3.and.interchange_DR_m(jm).lt.0.0)go to 86 ! skip TGLF
---
>       gamma_p_tg = gamma_p_m(jm)
> c
> c  model for neoclassical diffusivities
> c
>       diffnem = xparam_pt(3)*deneo_m(jm)
>       chietem = xparam_pt(4)*chieneo_m(jm)
>       chiitim = xparam_pt(5)*chiineo_m(jm)
>       etaphim = xparam_pt(6)*etaphineo_m(jm)
> c      etaexbm = xparam_pt(6)*chiineo_m(jm)
> c      etaparm = xparam_pt(6)*chiineo_m(jm)
> c
> c add in artificial diffusion terms
> c
>        art_diff=adiff_dv*cgyrobohm_m(jm)
>        diffnem = diffnem 
>      > + art_diff*(dr(jm,2)*DABS(zpmne)/arho_exp)**2
>        chietem = chietem
>      > + art_diff*DABS(dr(jm,2)*zpmte/arho_exp)**2
>        chiitim = chiitim
>      > + art_diff*DABS(dr(jm,2)*zpmti/arho_exp)**2
> c
> c compute neoclassical fluxes
> c
>        nefluxm = nem*zpmne*diffnem/a_unit_exp
>        tefluxm = tem*nem*zpmte*chietem/a_unit_exp
>        tifluxm = tim*nim*zpmti*chiitim/a_unit_exp
> c       vparfluxm = nim*etaparm*gamma_p_tg*csdam/cv
> c       vexbfluxm = nim*etaexbm*gamma_e_tg*csdam/cv
> c       vphifluxm = c_par(jm)*vparfluxm+c_per(jm)*vexbfluxm
> c use diagonal form for agreement with previous versions
> c       vphifluxm = nim*etaphim*gamma_p_tg*csdam/cv
>       vphifluxm = -nim*etaphim*gradvphim
>       vparfluxm = vphifluxm*c_per(jm)/c_tor(jm)
>       nifluxm = nefluxm
>       nzfluxm = 0.0
>       tzfluxm = 0.0
>       vparzfluxm = 0.0
>       vphizfluxm = 0.0
> c
>       if(ineo.eq.-2.and.q_exp(jm).lt.1.0)go to 86 !skip TGLF fluxes
1050d975
< c
1055,1056c980,984
< c     > use_mhd_rule_tg,use_bisection_tg, 
< c     > ibranch_tg,nmodes_tg,nb_max_tg,nb_min_tg,nx_tg,nky_tg)
---
> c     > use_bisection_tg,ibranch_tg,nmodes_tg,nb_max_tg,
> c     > nb_min_tg,nx_tg,nky_tg)
>       CALL put_switches(iflux_tg,use_bper_tg,use_bpar_tg,
>      > use_bisection_tg,ibranch_tg,nmodes_tg,nb_max_tg,
>      > nb_min_tg,nx_tg,nky_tg)
1058c986
<       CALL put_gradients(rlns_tg,rlts_tg,vpar_shear_tg,vexb_shear_tg)
---
>       CALL put_gradients(rlns_tg,rlts_tg,gamma_e_tg,gamma_p_tg)
1067c995
<       xnue_tg =xnu_m(jm)
---
>       xnuei_tg =xnu_m(jm)
1069,1090c997,1000
<       vpar_tg(1) = sign_Bt_exp*cv*(a_pol(jm)*(vpolm+vneom(1))
<      >     +a_tor(jm)*(vexbm+vdiam(1)))/(a_unit_exp*csdam)
<       vpar_tg(2) = sign_Bt_exp*cv*(a_pol(jm)*(vpolm+vneom(2))
<      >     +a_tor(jm)*(vexbm+vdiam(2)))/(a_unit_exp*csdam)
<       vpar_tg(3) = sign_Bt_exp*cv*(a_pol(jm)*(vpolm+vneom(3))
<      >     +a_tor(jm)*(vexbm+vdiam(3)))/(a_unit_exp*csdam)
<       vpar_tg(1) = sign_Bt_exp*cv*(a_pol(jm)*(vpol_m(jm)+vneo_m(1,jm))
<      >     +a_tor(jm)*(vexb_m(jm)+vdia_m(1,jm)))/(a_unit_exp*csdam)
<       vpar_tg(2) = sign_Bt_exp*cv*(a_pol(jm)*(vpol_m(jm)+vneo_m(2,jm))
<      >     +a_tor(jm)*(vexb_m(jm)+vdia_m(2,jm)))/(a_unit_exp*csdam)
<       vpar_tg(3) = sign_Bt_exp*cv*(a_pol(jm)*(vpol_m(jm)+vneo_m(3,jm))
<      >     +a_tor(jm)*(vexb_m(jm)+vdia_m(3,jm)))/(a_unit_exp*csdam)
<       if(alpha_p_tg.eq.0.0)then
<         vpar_tg(1)=0.0
<         vpar_tg(2)=0.0
<         vpar_tg(3)=0.0
<       endif
<       if(ipert_gf.eq.0)then
<        write(*,*)jm
<        write(*,*)vpar_shear_tg(1),vpar_shear_tg(2),vexb_shear_tg
<        write(*,*)vpar_tg(1),vpar_tg(2)
<       endif
---
>       vexb_tg= 0.0
>       vpar_tg = cv*(cparm*vparm-cperm*vexbm)
>      >         /(a_unit_exp*csdam*sqrt(cparm))
>       vpar_tg=0.0
1098,1099c1008,1009
<       CALL put_averages(taus_tg,as_tg,vpar_tg,betae_tg,xnue_tg,
<      > zeff_tg,debye_tg)
---
>       CALL put_averages(taus_tg,as_tg,betae_tg,xnuei_tg,zeff_tg,
>      >  debye_tg,vexb_tg,vpar_tg)
1120d1029
<          zmaj_tg = 0.0
1131d1039
<          dzmajdx_tg=0.0
1135,1136c1043
< c         s_kappa_tg = dmax1(s_kappa_tg,1.e-2)
< c why prevent negative s_kappa? 
---
>          s_kappa_tg = dmax1(s_kappa_tg,1.e-2)
1138,1143c1045,1050
<          s_delta_tg = rmin_tg*(delta_exp(jm+1)-delta_exp(jm))/dr_loc
<          zeta_tg=0.0
<          s_zeta_tg=0.0
<         CALL put_Miller_geometry(rmin_tg,rmaj_tg,zmaj_tg,drmindx_tg,
<      >  drmajdx_tg,dzmajdx_tg,kappa_tg,s_kappa_tg,delta_tg,s_delta_tg,
<      >  zeta_tg,s_zeta_tg,q_tg,q_prime_tg,p_prime_tg)
---
>          s_delta_tg = (rmin_tg/SQRT(1.0-delta_tg**2))*
>      >                (delta_exp(jm+1)-delta_exp(jm))/dr_loc
>         CALL put_Miller_geometry(rmin_tg,rmaj_tg,q_tg,q_prime_tg,
>      >   p_prime_tg,drmindx_tg,drmajdx_tg,kappa_tg,s_kappa_tg,
>      >   delta_tg,s_delta_tg)
> c
1149a1057,1092
>       if(ipert_gf.eq.0.and.jm.eq.-1)then
>       write(*,*)"debug jm=",jm
>       write(*,*)"nem=",nem
>       write(*,*)"nzm=",nzm
>       write(*,*)"nim=",nim
>       write(*,*)"a_unit_exp=",a_unit_exp,"b_unit=",b_unit
>       write(*,*)arho_exp,bt_exp
>       write(*,*)"averages"
>       write(*,*)as_tg(1),as_tg(2),as_tg(3)
>       write(*,*)taus_tg(1),taus_tg(2),taus_tg(3)
>       write(*,*)betae_tg,xnuei_tg
>       write(*,*)zeff_tg,debye_tg
>       write(*,*)"gradients"
>       write(*,*)rlns_tg(1),rlns_tg(2),rlns_tg(3)
>       write(*,*)rlts_tg(1),rlts_tg(2),rlts_tg(3)
> c      write(*,*)gamma_e_tg,gamma_p_tg
>       write(*,*)"igeo=",igeo_tg
> c      write(*,*)"s-a geometry",rmin_tg,rmaj_tg,q_tg,shat_tg,alpha_tg
> c      write(*,*)xwell_tg,theta0_tg,b_model_tg,ft_model_tg
>       write(*,*)"miller geometry",rmin_tg,rmaj_tg,q_tg
>       write(*,*)q_prime_tg,p_prime_tg,drmindx_tg,drmajdx_tg
>       write(*,*)kappa_tg,s_kappa_tg,delta_tg,s_delta_tg
>       write(*,*)"gaussian"
>       write(*,*)width_max_tg,width_min_tg,nwidth_tg,find_width_tg
>       write(*,*)"switches"
>       write(*,*)iflux_tg,use_bper_tg,use_bpar_tg,use_bisection_tg
>       write(*,*)ibranch_tg,nmodes_tg,nb_max_tg,nb_min_tg,nx_tg,nky_tg
>       write(*,*)"parameters"
>       write(*,*)adi_elec_tg,alpha_p_tg,alpha_e_tg,theta_trap_tg
>       write(*,*)xnuei_fac_tg,debye_fac_tg
>       write(*,*)"species",nspecies_tg
>       do i=1,nspecies_tg
>        write(*,*)zs_tg(i),mass_tg(i)
>       enddo
> c       
>       endif
1153c1096
< c      if(ipert_gf.ne.0)new_eikonal_tg=.FALSE.
---
>       if(ipert_gf.ne.0)new_eikonal_tg=.FALSE.
1159,1161c1102
<       if(ipert_gf.eq.0.and.jm.eq.20)then
<         call write_tglf_input      
<       endif
---
> c      write(*,'i3,0p6f11.6')jm,get_energy_flux(1,1),get_energy_flux(2,1)
1171d1111
< c
1175,1193c1115,1133
<       neflux_glf = 1.6022D-3*nem*gb_unit*get_particle_flux(1,1)
<       niflux_glf = 1.6022D-3*nem*gb_unit*get_particle_flux(2,1)
<       teflux_glf = 1.6022D-3*nem*tem*gb_unit*get_energy_flux(1,1)
<       tiflux_glf = 1.6022D-3*nem*tem*gb_unit*get_energy_flux(2,1)
<       vparflux_glf = (1.6726D-5)  
<      >   *nem*gb_unit*csdam*a_unit_exp*get_stress_par(2,1)
<      >   *amassgas_exp/(ABS(bt_exp/B_unit))
<       vphiflux_glf = (1.6726D-5) 
<      >  *nem*gb_unit*csdam*a_unit_exp*get_stress_tor(2,1)
<      >  *amassgas_exp*a_unit_exp
<       if(ns_tg.eq.3)then
<         nzflux_glf = nem*gb_unit*get_particle_flux(3,1)
<         tzflux_glf = nem*tem*gb_unit*get_energy_flux(3,1)
<         vphizflux_glf = (1.6726D-5)
<      >  *nem*gb_unit*csdam*a_unit_exp*get_stress_tor(3,1)
<      >  *amassgas_exp*a_unit_exp
<         vparzflux_glf = (1.6726D-5) 
<      >   *nem*gb_unit*csdam*a_unit_exp*get_stress_par(3,1)
<      >   *amassgas_exp/(ABS(bt_exp/B_unit))
---
>       nefluxm = nefluxm + nem*gb_unit*get_particle_flux(1,1)
>       nifluxm = nifluxm + nem*gb_unit*get_particle_flux(2,1)
>       tefluxm = tefluxm + nem*tem*gb_unit*get_energy_flux(1,1)
>       tifluxm = tifluxm + nem*tem*gb_unit*get_energy_flux(2,1)
>       vparfluxm = vparfluxm + 
>      >   nem*gb_unit*csdam*a_unit_exp*get_stress_par(2,1)
>      >   *amassgas_exp/(cv*ABS(bt_exp/B_unit))
>       vphifluxm = vphifluxm + 
>      >  nem*gb_unit*csdam*a_unit_exp*get_stress_tor(2,1)
>      >  *amassgas_exp*a_unit_exp/(rmajor_exp*cv)
>       if(nspecies_tg.eq.3)then
>         nzfluxm = nzfluxm + nem*gb_unit*get_particle_flux(3,1)
>         tzfluxm = tzfluxm + nem*tem*gb_unit*get_energy_flux(3,1)
>         vphizfluxm = vphizfluxm + 
>      >  nem*gb_unit*csdam*a_unit_exp*get_stress_tor(3,1)
>      >  *amassgas_exp*a_unit_exp/(rmajor_exp*cv)
>         vparzfluxm = vparzfluxm + 
>      >   nem*gb_unit*csdam*a_unit_exp*get_stress_par(3,1)
>      >   *amassgas_exp/(cv*ABS(bt_exp/B_unit))
1199c1139
< c        if(ns_tg.eq.3)then
---
> c        if(nspecies_tg.eq.3)then
1207c1147
< c        if(ns_tg.eq.3)then
---
> c        if(nspecies_tg.eq.3)then
1211,1216c1151,1165
<        tefluxm_etg = nem*tem*gb_unit*(get_energy_flux(1,1)-get_q_low(1))
<        if(ipert_gf.eq.0)then
<         chie_e_gb_m(jm) = -gradtem*tefluxm_etg
<      >   /(cgyrobohm_m(jm)*nem*MAX(1.0D-10,gradtem*gradtem))
<        endif
<        if(ns_tg.eq.3)then
---
>       tefluxm_etg = tefluxm -nem*tem*gb_unit*get_q_low(1)
> c add in convection
> c       vphim = cv*(cperm*vpolm-ctorm*(vexbm+vdiam))
>        vpartotm = cv*(cparm*vparm-cperm*vexbm)
>         vpartotm=0.0
>        vphim = (ctorm/cperm)*vpartotm
>        tifluxm = tifluxm + (vpartotm*cv*vparfluxm)
>      >     *(1.6726D-27)/(cparm*1.6022D-16)
>        vphifluxm = vphifluxm + amassgas_exp*vphim*nifluxm/cv
>        vparfluxm = vparfluxm + amassgas_exp*vpartotm*nifluxm/cv
>        if(nspecies_tg.eq.3)then
>          tzfluxm = tzfluxm + (vpartotm*cv*vparzfluxm)
>      >     *(1.6726D-27)/(cparm*1.6022D-16)
>          vphizfluxm = vphizfluxm + amassimp_exp*vphim*nzfluxm
>          vparzfluxm = vparzfluxm + amassimp_exp*vpartotm*nzfluxm
1218,1220c1167,1169
<          tiflux_glf = tiflux_glf + tzflux_glf
<          vphiflux_glf = vphiflux_glf + vphizflux_glf
<          vparflux_glf = vparflux_glf + vparzflux_glf
---
>          tifluxm = tifluxm + tzfluxm
>          vphifluxm = vphifluxm + vphizfluxm
>          vparfluxm = vparfluxm + vparzfluxm
1222c1171
<        if(ns_tg.eq.2)then
---
>        if(nspecies_tg.eq.2)then
1224,1225c1173,1176
<          vphiflux_glf = mass_factor*vphiflux_glf
<          vparflux_glf = mass_factor*vparflux_glf
---
>          mass_factor = 1.0 
>      >   +amassimp_exp*fz_m(jm)/(amassgas_exp*fi_m(jm))
>          vphifluxm = mass_factor*vphifluxm
>          vparfluxm = mass_factor*vparfluxm
1227d1177
<        if(ipert_gf.eq.0)write(*,*)get_stress_tor(2,1)
1231c1181
< c      write(*,*)"debug teflux_glf=",teflux_glf
---
> c      write(*,*)"debug tefluxm=",tefluxm
1234a1185,1203
> c diffusivities in m**2/sec
>       diff_m(jm)=nefluxm*zpmne*a_unit_exp/
>      >             (nem*max(zpmne**2,1.d-12))
>       chie_m(jm)=tefluxm*zpmte*a_unit_exp/
>      >             (tem*nem*max(zpmte**2,1.d-12))
>       chie_e_m(jm)=tefluxm_etg*zpmte*a_unit_exp/
>      >             (tem*nem*max(zpmte**2,1.d-12))
>       chii_m(jm)=tifluxm*zpmti*a_unit_exp/
>      >             (tim*nim*max(zpmti**2,1.d-12))
>       etaphi_m(jm) = cv*vphifluxm*gamma_p_tg/
>      >           (nim*csdam*max(gamma_p_tg**2,1.d-12))
> c diffusivities for comparison with GYRO in gyro-bohm units
> c note that drhodr facotor is removed
>       gb_unit = cgyrobohm_m(jm)
>       diffgb_m(jm)=diff_m(jm)/gb_unit
>       chiegb_m(jm)=chie_m(jm)/gb_unit
>       chie_e_gb_m(jm)=chie_e_m(jm)/gb_unit
>       chiigb_m(jm)=chii_m(jm)/gb_unit
>       etagb_phi_m(jm)=etaphi_m(jm)/gb_unit
1239,1243c1208,1212
<       neflux_glf = neflux_glf*drhodr(jm)
<       teflux_glf = teflux_glf*drhodr(jm)
<       tiflux_glf = tiflux_glf*drhodr(jm)
<       vphiflux_glf = vphiflux_glf*drhodr(jm)
<       vparflux_glf = vparflux_glf*drhodr(jm)
---
>       nefluxm = nefluxm*drhodr(jm)
>       tefluxm = tefluxm*drhodr(jm)
>       tifluxm = tifluxm*drhodr(jm)
>       vphifluxm = vphifluxm*drhodr(jm)
>       vparfluxm = vparfluxm*drhodr(jm)
1245c1214
<       if(ipert_gf.eq.0.and.jm.eq.20)then
---
>       if(jm.eq.25)then
1261,1267c1230,1232
<        write(11,*)"MACH = ",vpar_tg(2)
<        write(11,*)"vpar_tg(1)=",vpar_tg(1)
<        write(11,*)"vpar_tg(3)=",vpar_tg(3)
<        write(11,*)"PGAMMA = ",vpar_shear_tg(2)
<        write(11,*)"vpar_shear_tg(1)=",vpar_shear_tg(1)
<        write(11,*)"vpar_shear_tg(3)=",vpar_shear_tg(3)
<        write(11,*)"GAMMA_E = ",vexb_shear_tg
---
>        write(11,*)"MACH = ",0.0
>        write(11,*)"PGAMMA = ",gamma_p_tg
>        write(11,*)"GAMMA_E = ",gamma_e_tg
1269c1234
<        write(11,*)"NU_EI = ",xnue_tg
---
>        write(11,*)"NU_EI = ",xnuei_tg
1294,1298d1258
<        write(11,*)"TGLF OUTPUT"
<        write(11,*)"particle_flux = ",get_particle_flux(1,1)
<        write(11,*)"electron energy flux = ",get_energy_flux(1,1)
<        write(11,*)"ion energy flux = ",get_energy_flux(2,1)
<        write(11,*)"toroidal stress = ",get_stress_tor(2,1)
1302,1382d1261
< c
< c      write(*,*)"debug tglf",jm
< c
< c      write(*,*) 'particle_flux(1) = ',get_particle_flux(1)
< c      write(*,*) 'particle_flux(2) = ',get_particle_flux(2)
< c      write(*,*) 'energy_flux(1) = ',get_energy_flux(1)
< c      write(*,*) 'energy_flux(2) = ',get_energy_flux(2)
< c      write(*,*) 'n_bar_sum(1) = ',get_n_bar_sum(1)
< c      write(*,*) 'n_bar_sum(2) = ',get_n_bar_sum(2)
< c      write(*,*) 't_bar_sum(1) = ',get_t_bar_sum(1)
< c      write(*,*) 't_bar_sum(2) = ',get_t_bar_sum(2)
< c      write(*,*) 'phi_bar_sum = ',get_phi_bar_sum()
< c
< c  
<       END   !SUBROUTINE tglf_dv
< c
<       SUBROUTINE ADHOC_DV
< c
<       IMPLICIT NONE
< c
<       include 'mpif.h'
<       include '../inc/input.m'
<       include '../inc/tport.m'
<       include '../inc/model.m'
<       include '../inc/data.m'
<       include '../inc/share.m'
<       include '../inc/sharegk.m'
<       include '../inc/ptor.m'
<       include '../inc/glf.m'
< c
<       real*8 art_diff
<       real*8 ctorm,grad_c_tor,gradvphim
< c
< c add in artificial diffusion terms
< c
<        art_diff=adiff_dv*cgyrobohm_m(jm)
<        diffnem =  
<      > + art_diff*(dr(jm,2)*DABS(zpmne)/arho_exp)**2
<        chietem =
<      > + art_diff*DABS(dr(jm,2)*zpmte/arho_exp)**2
<        chiitim =
<      > + art_diff*DABS(dr(jm,2)*zpmti/arho_exp)**2
<        etaphim =
<      > + 1.D-2*art_diff*DABS(gamma_p_m(jm)/30.0)**2
< c
< c sawtooth region enhanced neoclassical model
<       if(ineo.eq.-1.or.ineo.eq.-2.and.q_exp(jm).lt.1.0)then
<         diffnem=chiineo_m(jm)
<         chietem=chiineo_m(jm)
<         chiitim=chiineo_m(jm)
<         etaphim=chiineo_m(jm)
<       endif
< c
<       if(ineo.eq.-3.and.interchange_DR_m(jm).lt.0.0)then
< c use simple model for interchange mode fluxes
<         diffnem = diff_exp(jm)*drhodr(jm)*drhodr(jm)
<         chietem = chie_exp(jm)*drhodr(jm)*drhodr(jm)
<         chiitim = chii_exp(jm)*drhodr(jm)*drhodr(jm)
<         etaphim = eta_tor_exp(jm)*drhodr(jm)*drhodr(jm)
<       endif
< c
<         neflux_adhoc = -1.6022D-3*diffnem*gradnem
<         teflux_adhoc = -1.6022D-3*nem*chietem*gradtem
<         tiflux_adhoc = -1.6022D-3*nim*chiitim*gradtim
<         ctorm = (c_tor(jm+1)+c_tor(jm))/2.0
<         grad_c_tor=(c_tor(jm+1)-c_tor(jm))/dr(jm,2)
<         gradvphim =ctorm*gradvexbm+grad_c_tor*vexbm
<         vphiflux_adhoc = -1.6726D-5*amassgas_exp*nim*
<      >                    rmajor_exp*etaphim*gradvphim
<         vparflux_adhoc = vphiflux_adhoc*c_per(jm)/c_tor(jm)
<         niflux_adhoc = neflux_adhoc
<         nzflux_adhoc = 0.0
<         tzflux_adhoc = 0.0
<         vparzflux_adhoc = 0.0
<         vphizflux_adhoc = 0.0
< c
<       RETURN
<       END  !ADHOC_DV
< c
<       SUBROUTINE test_dv
< c
1384,1399c1263
< c
<       IMPLICIT NONE
< c
<       include 'mpif.h'
<       include '../inc/input.m'
<       include '../inc/tport.m'
<       include '../inc/model.m'
<       include '../inc/data.m'
<       include '../inc/share.m'
<       include '../inc/sharegk.m'
<       include '../inc/ptor.m'
<       include '../inc/glf.m'
< c
<       integer i,j,k
<       REAL*8 dtest(5,5),vtest(5,5)
< c
---
>       if(imodel.eq.-1)then
1429,1430c1293,1294
<           nefluxm = nefluxm -dtest(i,j)*(nim*gradvexbm+gradnim*vexbm) 
<      >     + vtest(i,j)*nim*vexbm
---
>           nefluxm = nefluxm -dtest(i,j)*(nim*gradvparm+gradnim*vparm) 
>      >     + vtest(i,j)*nim*vparm
1434,1435c1298,1299
<           nefluxm = nefluxm -dtest(i,j)*(nim*gradvpolm+gradnim*vpolm)
<      >     + vtest(i,j)*nim*vpolm
---
>           nefluxm = nefluxm -dtest(i,j)*(nim*gradvexbm+gradnim*vexbm)
>      >     + vtest(i,j)*nim*vexbm
1455,1456c1319,1320
<           tefluxm = tefluxm -dtest(i,j)*(nim*gradvexbm+gradnim*vexbm) 
<      >    + vtest(i,j)*nim*vexbm
---
>           tefluxm = tefluxm -dtest(i,j)*(nim*gradvparm+gradnim*vparm) 
>      >    + vtest(i,j)*nim*vparm
1460,1461c1324,1325
<           tefluxm = tefluxm -dtest(i,j)*(nim*gradvpolm+gradnim*vpolm)
<      >    + vtest(i,j)*nim*vpolm
---
>           tefluxm = tefluxm -dtest(i,j)*(nim*gradvexbm+gradnim*vexbm)
>      >    + vtest(i,j)*nim*vexbm
1481,1482c1345,1346
<           tifluxm = tifluxm -dtest(i,j)*(nim*gradvexbm+gradnim*vexbm)
<      >     + vtest(i,j)*nim*vexbm
---
>           tifluxm = tifluxm -dtest(i,j)*(nim*gradvparm+gradnim*vparm)
>      >     + vtest(i,j)*nim*vparm
1486,1487c1350,1351
<           tifluxm = tifluxm -dtest(i,j)*(nim*gradvpolm+gradnim*vpolm) 
<      >     + vtest(i,j)*nim*vpolm
---
>           tifluxm = tifluxm -dtest(i,j)*(nim*gradvexbm+gradnim*vexbm) 
>      >     + vtest(i,j)*nim*vexbm
1507,1508c1371,1372
<           vphifluxm = vphifluxm-dtest(i,j)*(nim*gradvexbm+gradnim*vexbm) 
<      >    + vtest(i,j)*nim*vexbm
---
>           vphifluxm = vphifluxm-dtest(i,j)*(nim*gradvparm+gradnim*vparm) 
>      >    + vtest(i,j)*nim*vparm
1512,1513c1376,1377
<           vphifluxm = vphifluxm-dtest(i,j)*(nim*gradvpolm+gradnim*vpolm)
<      >    + vtest(i,j)*nim*vpolm
---
>           vphifluxm = vphifluxm-dtest(i,j)*(nim*gradvexbm+gradnim*vexbm)
>      >    + vtest(i,j)*nim*vexbm
1533,1534c1397,1398
<           vparfluxm = vparfluxm-dtest(i,j)*(nim*gradvexbm+gradnim*vexbm) 
<      >    + vtest(i,j)*nim*vexbm
---
>           vparfluxm = vparfluxm-dtest(i,j)*(nim*gradvparm+gradnim*vparm) 
>      >    + vtest(i,j)*nim*vparm
1538,1539c1402,1403
<           vparfluxm = vparfluxm-dtest(i,j)*(nim*gradvpolm+gradnim*vpolm)
<      >    + vtest(i,j)*nim*vpolm
---
>           vparfluxm = vparfluxm-dtest(i,j)*(nim*gradvexbm+gradnim*vexbm)
>      >    + vtest(i,j)*nim*vexbm
1540a1405
>       endif 
1543,1544c1408,1423
<       RETURN
<       END  ! test_dv
---
> c
> c      write(*,*)"debug tglf",jm
> c
> c      write(*,*) 'particle_flux(1) = ',get_particle_flux(1)
> c      write(*,*) 'particle_flux(2) = ',get_particle_flux(2)
> c      write(*,*) 'energy_flux(1) = ',get_energy_flux(1)
> c      write(*,*) 'energy_flux(2) = ',get_energy_flux(2)
> c      write(*,*) 'n_bar_sum(1) = ',get_n_bar_sum(1)
> c      write(*,*) 'n_bar_sum(2) = ',get_n_bar_sum(2)
> c      write(*,*) 't_bar_sum(1) = ',get_t_bar_sum(1)
> c      write(*,*) 't_bar_sum(2) = ',get_t_bar_sum(2)
> c      write(*,*) 'phi_bar_sum = ',get_phi_bar_sum()
> c
> c  
>       END   !SUBROUTINE tglf_dv
> c
