dnl ######################################################################
dnl
dnl File:	rsiidl.m4
dnl
dnl Purpose:	Check for RSI's IDL
dnl
dnl Version:	$Id$
dnl
dnl Tech-X configuration files, all rights reserved.
dnl
dnl ######################################################################

dnl Get the executable

dnl AC_ARG_ENABLE(rsiidl,[  --disable-rsiidl       turn off rsiidl features],,enable_rsiidl=yes)
dnl echo "ITTIDL enable flag is..." $enable_rsiidl
dnl if test "$enable_rsiidl" = "yes"; then

builtin(include, config/txsearch.m4)

# Determine whether ITTIDL_NOT_REQUIRED
if test "$ITTIDL_NOT_REQUIRED" = no; then
  ITTIDL_NOT_REQUIRED=""
fi
# echo ITTIDL_NOT_REQUIRED = \'$ITTIDL_NOT_REQUIRED\'

AC_ARG_WITH(rsiidl-bindir,
[  --with-rsiidl-bindir=<rsiidl-bindir>  set location of the RSI-IDL idl binary],
ITTIDL_BINDIR="$withval")

if test -z "$ITTIDL_BINDIR"; then
  if test -z "$IDL_DIR"; then
    IDL_PATH=/usr/local/itt/idl/bin:/usr/local/rsi/idl/bin:/usr/local/pkg/graphics/rsi/idl/bin:/Applications/rsi/idl/bin:/Applications/itt/idl/bin
  else
    IDL_PATH=${IDL_DIR}/bin
  fi
  echo IDL path set
  echo $IDL_PATH
  AC_PATH_PROGS(ITTIDL_BIN, idl, "", $IDL_PATH)
  if test -z "$ITTIDL_BIN"; then
    if test -n "$ITTIDL_NOT_REQUIRED"; then
      AC_MSG_WARN(RSI-IDL not found in $IDL_PATH.  Use --with-rsiidl-dir to set the location of the rsi-idl binary)
    else
      AC_MSG_ERROR(RSI-IDL not found in $IDL_PATH.  Use --with-rsiidl-dir to set the location of the rsi-idl binary)
    fi
  else
    ITTIDL_BINDIR=`dirname $ITTIDL_BIN`
  fi
fi
# echo ITTIDL_BINDIR = $ITTIDL_BINDIR

dnl Get the location of the external header, if executable found
if test -n "$ITTIDL_BINDIR"; then
  ITTIDL_DIR=`dirname $ITTIDL_BINDIR`

# if this test succeeds then using version 5.6 or greater
  ITTIDL_INCDIR="$ITTIDL_DIR/external/include"
  OSMESA_LIB="-lOSMesa4_0 -lMesaGLU4_0 -lMesaGL4_0"
  TX_PATH_FILE(ITTIDL_HASINC, idl_export.h, "", $ITTIDL_INCDIR)
  
# This is for version 5.5 or earlier
  if test -z "$ITTIDL_HASINC"; then
    ITTIDL_INCDIR=$ITTIDL_DIR/external
    OSMESA_LIB="-lMesaGLU -lMesaGL"
    TX_PATH_FILE(ITTIDL_HASINC, export.h, "", $ITTIDL_INCDIR)
    if test -z "$ITTIDL_HASINC"; then
      AC_MSG_ERROR(RSI-IDL header file not found in $ITTIDL_INCDIR.  Use --with-ITTIDL to set the location of the rsi-idl binary)
    fi
  fi

  # Keeping these two lines for backwards compatability
  IDLEXT_DIR=$ITTIDL_INCDIR

  # Check for path to libidl.so
  case "$host" in

    x86_64-*-linux*)
      IDL_LIBBIN=$ITTIDL_BINDIR/bin.linux.x86_64
      ;;

    *-linux*)
      IDL_LIBBIN=$ITTIDL_BINDIR/bin.linux.x86
      ;;

    *-sgi*)
      IDL_LIBBIN=$ITTIDL_BINDIR/bin.sgi
      ;;

    i686-*-darwin*)
      IDL_LIBBIN=$ITTIDL_BINDIR/bin.darwin.i386
      ;;

    i386-*-darwin*)
      IDL_LIBBIN=$ITTIDL_BINDIR/bin.darwin.i386
      ;;

    ppc*-darwin*)
      IDL_LIBBIN=$ITTIDL_BINDIR/bin.darwin.ppc
      ;;

   *) 
      AC_MSG_ERROR(Could not detect platform for IDL.)
      ;;

  esac

AC_ARG_WITH(rsiidl-libdir,
[  --with-rsiidl-libdir=<rsiidl-libdir>  set location of the RSI-IDL idl libraries],
ITTIDL_LIBBIN="$withval", ITTIDL_LIBBIN="$IDL_LIBBIN")


  if test -z "$ITTIDL_LIBBIN"; then
     AC_MSG_ERROR(Can't find RSI-IDL libidl.so on this platform; searched $ITTIDL_LIBBIN)
  fi
  # end check for libidl.so

fi	# end check assuming ITTIDL_DIR found

dnl fi

echo "" >> $config_summary_file
echo "IDL:" >> $config_summary_file

TX_PRINT_VAR(ITTIDL_BINDIR)
TX_PRINT_VAR(ITTIDL_DIR)
TX_PRINT_VAR(ITTIDL_INCDIR)
TX_PRINT_VAR(ITTIDL_LIBBIN)
TX_PRINT_VAR(IDLEXT_DIR)
TX_PRINT_VAR(OSMESA_LIB)

# end check for disable-rsiidl
AC_SUBST(ITTIDL_BINDIR)
AC_SUBST(ITTIDL_DIR)
AC_SUBST(OSMESA_LIB)
AC_SUBST(ITTIDL_INCDIR)
AC_SUBST(ITTIDL_LIBBIN)
AC_SUBST(IDLEXT_DIR)
