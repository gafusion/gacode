#!/bin/bash
#=============================================================
# tglf
#
# PURPOSE:
#  Top-level script controlling execution of TGLF.
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
  echo
  echo "Usage:   tglf [options]"
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         [The default path is the current directory]" 
  echo
  echo "EXECUTE MODE (single core)"
  echo
  echo "         -e <simdir>" 
  echo "         Run NEO using input.tglf data in <simdir>."
  echo
  echo "REGRESSION TESTING"
  echo
  echo "         -r"
  echo "         Run full regression suite."
  echo 
  echo "TEMPLATE GENERATION"
  echo
  echo "         -g"
  echo "         List available simulation templates."
  echo
  echo "         -g <template>"
  echo "         Copy <template> into simulation path."
  echo
  echo "UTILITIES"
  echo
  echo "         -h" 
  echo "         Version and platform information."

  exit 1
fi
#=============================================================
 
#=============================================================
# Define variables for flag capture
#
SIMROOT=$PWD
TGLF_DIR=$GACODE_ROOT/tglf
# Default number of cores
NPROC=1
# Execute/test mode flags
EXEC_FLAG=0
GENERATE_FLAG=0
REGRESS_FLAG=0
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -e) shift ; LOCDIR=$1 ; EXEC_FLAG=1 ;;

  -g) shift ; LOCDIR=$1 ; GENERATE_FLAG=1 ;;

  -r) shift ; REGRESS_FLAG=1 ;;

  -h) tglf_version_message ; exit 0 ;;

  *) echo "ERROR: incorrect tglf syntax." ; exit 1 ;;
 
  esac
  shift
done
#=============================================================

if [ "$LOCDIR" == "." ]
then
   SIMDIR=$PWD
   cd .. ; LOCDIR=$PWD
else
   SIMDIR=$SIMROOT/$LOCDIR
fi

RUN_FILE=$SIMDIR/run.out

#============================================================
# Check for inconsistent flags:
FLAG_SUM=$[ $EXEC_FLAG + $GENERATE_FLAG + $REGRESS_FLAG]
if [ "$FLAG_SUM" -gt 1 ]
then
   echo "ERROR: Can only specify one of -e, -t, -g, -r"
   exit 1
fi
#============================================================

#============================================================
# Generate simdir if -g set, then exit.
#
if [ $GENERATE_FLAG -eq 1 ]
then
   if [ ! -f "${TGLF_DIR}/tools/input/$LOCDIR/input.tglf" ]
   then
      cat ${TGLF_DIR}/tools/input/simdir_list
   else
      cp -ai ${TGLF_DIR}/tools/input/$LOCDIR $SIMDIR
   fi
   exit 0
fi
#============================================================

#============================================================
# Do the regression test if -r set, then exit.
#
if [ $REGRESS_FLAG -eq 1 ] 
then 
   tglf_reg_do
   exit 0
fi
#============================================================

#============================================================
# Everything else must be done in $SIMDIR; so ensure existence 
# of $SIMDIR (needed at this point) and go there: 
#
if ! tglf_sim_warn $SIMDIR
then
   exit 1 
fi 

cd $SIMDIR
#============================================================

#==========================================================
# Initialize halt file:
#
echo 0 > halt
#==========================================================

#==========================================================
# echo number of tasks, then parse INPUT
#
echo "[TGLF MPI tasks: $NPROC]" > $RUN_FILE
echo "[Parsing data in input.tglf]" >> $RUN_FILE

python $TGLF_DIR/bin/tglf_parse.py >> $RUN_FILE
if [ $? -eq 1 ] 
then
   cat $RUN_FILE
   exit 1
fi
#==========================================================

#==========================================================
# Halt here if neo_parse returned a halt.
#
if [ `cat halt` = "1" ] 
then
   cat $RUN_FILE
   exit 1
fi
#===========================================================

#===========================================================
# RUN TGLF
#

# Version stamp:
echo `gacode_getversion` > VERSION_tag 
echo $GACODE_PLATFORM >> VERSION_tag
date >> VERSION_tag

$TGLF_DIR/src/tglf
#===========================================================
