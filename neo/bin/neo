#!/bin/bash
#=============================================================
# neo
#
# PURPOSE:
#  Top-level script controlling execution of NEO.
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
  echo
  echo "Usage:   neo [options]"
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         The default path is \$NEO_DIR/sim."
  echo
  echo "TEST MODE"
  echo
  echo "         -t <simdir>"  
  echo "         Sanity test for INPUT data in <simdir>."
  echo
  echo "EXECUTE MODE (single core)"
  echo
  echo "         -e <simdir>" 
  echo "         Run NEO using INPUT data in <simdir>."
  echo
  echo "REGRESSION TESTING"
  echo
  echo "         -r"
  echo "         Run full regression suite."
  echo 
  echo "TEMPLATE GENERATION"
  echo
  echo "         -g"
  echo "         List available simulation templates."
  echo
  echo "         -g <template>"
  echo "         Copy <template> into simulation path."
  echo
  echo "UTILITIES"
  echo
  echo "         -h" 
  echo "         Version and platform information."

  exit 1
fi
#=============================================================
 
#=============================================================
# Define variables for flag capture
#
SIMROOT=$PWD
NEO_DIR=$GACODE_ROOT/neo
# Default number of cores
NPROC=1
# Execute/test mode flags
EXEC_FLAG=0
TEST_FLAG=0
GENERATE_FLAG=0
REGRESS_FLAG=0
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -e) shift ; LOCDIR=$1 ; EXEC_FLAG=1 ;;

  -t) shift ; LOCDIR=$1 ; TEST_FLAG=1 ;;

  -g) shift ; LOCDIR=$1 ; GENERATE_FLAG=1 ;;

  -r) shift ; REGRESS_FLAG=1 ;;

  -h) neo_version_message ; exit 0 ;;

  *) echo "ERROR: incorrect neo syntax." ; exit 1 ;;
 
  esac
  shift
done
#=============================================================

if [ "$LOCDIR" == "." ]
then
   SIMDIR=$PWD
   cd .. ; LODCIR=$PWD
else
   SIMDIR=$SIMROOT/$LOCDIR
fi

RUN_FILE=$SIMDIR/run.out

#============================================================
# Check for inconsistent flags:
FLAG_SUM=$[ $EXEC_FLAG + $TEST_FLAG + $GENERATE_FLAG 
                       + $REGRESS_FLAG]
if [ "$FLAG_SUM" -gt 1 ]
then
   echo "ERROR: Can only specify one of -e, -t, -g, -r"
   exit 1
fi
#============================================================

#============================================================
# Generate simdir if -g set, then exit.
#
if [ $GENERATE_FLAG -eq 1 ]
then
   if [ ! -f "${NEO_DIR}/tools/input/$LOCDIR/input.neo" ]
   then
      cat ${NEO_DIR}/tools/input/simdir_list
   else
      cp -ir ${NEO_DIR}/tools/input/$LOCDIR $SIMDIR ;
   fi
   exit 0
fi
#============================================================

#============================================================
# Do the regression test if -r set, then exit.
#
if [ $REGRESS_FLAG -eq 1 ] 
then 
   neo_reg_do
   exit 0
fi
#============================================================

#============================================================
# Everything else must be done in $SIMDIR; so ensure existence 
# of $SIMDIR (needed at this point) and go there: 
#
if ! neo_sim_warn $SIMDIR
then
   exit 1 
fi 

cd $SIMDIR
#============================================================

#==========================================================
# Version stamp on top of any pre-existing stamp(s):
#
touch VERSION_tag
mv VERSION_tag VERSION_temp
cat $NEO_DIR/VERSION > VERSION_tag 
echo $GACODE_PLATFORM >> VERSION_tag
date >> VERSION_tag
cat VERSION_temp >> VERSION_tag
rm VERSION_temp
#==========================================================

#==========================================================
# Initialize halt file:
#
echo 0 > halt
#==========================================================

#==========================================================
# echo number of tasks, then parse INPUT
#
echo "[NEO MPI tasks: $NPROC]" > $RUN_FILE
echo "[Parsing data in input.neo]" >> $RUN_FILE

python $NEO_DIR/bin/neo_parse.py >> $RUN_FILE
if [ $? -eq 1 ] 
then
   cat $RUN_FILE
   exit 1
fi
#==========================================================

#==========================================================
# See if we are using experimental profiles

if [ -f input.profiles ]
then 
   python $GACODE_ROOT/shared/bin/profile_parse.py input.profiles >> $RUN_FILE
fi
#==========================================================

#==========================================================
# Halt here if neo_parse or gyro_proparse returned a halt.
#
if [ `cat halt` = "1" ] 
then
   cat $RUN_FILE
   exit 1
fi
#===========================================================

#===========================================================
# Set flags for execute or test:

# Execute:
if [ $EXEC_FLAG -eq 1 ] 
then
   neo_version_message 
   echo "0" > "$SIMDIR/neotest_flag"
fi

# Test:
if [ $TEST_FLAG -eq 1 ]
then
   echo "1" > "$SIMDIR/neotest_flag"
fi
#===========================================================

#===========================================================
# RUN NEO
#

# Standalone mode
if [ $EXEC_FLAG -eq 1 ] 
then
  $NEO_DIR/src/neo
fi

# Test mode
if [ $TEST_FLAG -eq 1 ] 
then
   cat $RUN_FILE
fi
#===========================================================
