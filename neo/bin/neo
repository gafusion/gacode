#!/bin/bash
#=============================================================
# neo
#
# PURPOSE:
#  Top-level script controlling execution of NEO.
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
  echo
  echo "Usage:   neo [options]"
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         The default path is \$PWD"
  echo
  echo "TEST MODE"
  echo
  echo "         -t <simdir>"  
  echo "         Sanity test for input.neo in <simdir>."
  echo
  echo "EXECUTE MODE (single core)"
  echo
  echo "         -e <simdir>" 
  echo "         Run NEO using input.neo in <simdir>."
  echo
  echo "         -n <MPI tasks>" 
  echo "         Number of MPI tasks."
  echo
  echo "REGRESSION TESTING"
  echo
  echo "         -rc <simdir>"
  echo "         Check <simdir> for regression pass/fail."
  echo
  echo "         -r"
  echo "         Run full regression suite."
  echo 
  echo "         -reset"
  echo "         Reset regression data."
  echo 
  echo "TEMPLATE GENERATION"
  echo
  echo "         -g"
  echo "         List available simulation templates."
  echo
  echo "         -g <template>"
  echo "         Copy <template> into simulation path."
  echo
  echo "UTILITIES"
  echo 
  echo "         -h" 
  echo "         Version and platform information."
  echo 
  echo "         -pneo" 
  echo "         Run parallel neo"
  echo 
  echo "         -rbf" 
  echo "         Generate RBF weights and scale factors based on pneo output."

  exit 1
fi
#=============================================================
 
#=============================================================
# Define variables for flag capture
#
SIMROOT=$PWD
NEO_DIR=$GACODE_ROOT/neo
# Default number of cores
NPROC=1
NOMP=1
NUMA=0
MPINUMA=0
# Execute/test mode flags
EXEC_FLAG=0
GENERATE_FLAG=0
REGRESS=0
REGRESS_RESET=0
PNEO_FLAG=0
RBF_FLAG=0
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -e) shift ; LOCDIR=$1 ; EXEC_FLAG=1 ;;

  -n) shift ; NPROC=$1 ;;

  -g) shift ; LOCDIR=$1 ; GENERATE_FLAG=1 ;;

  -nomp) shift ; NOMP=$1 ;;

  -numa) shift ; NUMA=$1 ;;

  -mpinuma) shift ; MPINUMA=$1 ;;

  -h) gacode_printversion NEO ; exit 0 ;;

  -r) shift ; REGRESS=1 ;;

  -rc) shift ; LOCDIR=$1 ; REGRESS=2 ;;

  -reset) REGRESS_RESET=1 ;;

  -pneo) PNEO_FLAG=1 ;;

  -rbf) RBF_FLAG=1 ;;

  *) echo "ERROR: incorrect neo syntax." ; exit 1 ;;
 
  esac
  shift
done
#=============================================================

if [ "$LOCDIR" == "." ]
then
   SIMDIR=$PWD
   cd .. ; LOCDIR=$PWD
else
   SIMDIR=$SIMROOT/$LOCDIR
fi

#============================================================
# Check for inconsistent flags:
if [ $REGRESS -eq 0 ] ; then
   REGRESS_FLAG=0
else
   REGRESS_FLAG=1
fi
FLAG_SUM=$[$EXEC_FLAG+$TEST_FLAG+$GENERATE_FLAG 
                     +$REGRESS_FLAG]
if [ $FLAG_SUM -gt 1 ]
then
   echo "ERROR: Can only specify one of -e, -t, -g, -r"
   exit 1
fi
#============================================================

#============================================================
# Control parallel execution of pneo 
#
if [ $PNEO_FLAG -eq 1 ]
then
  $GACODE_ROOT/platform/exec/exec.$GACODE_PLATFORM \
      $SIMDIR $NPROC $NEO_DIR/tools/pneo/src/pneo $NOMP $NUMA $MPINUMA $NIDLE
  
    exit 0
fi
#============================================================

#============================================================
# Generate RBF weights
#
if [ $RBF_FLAG -eq 1 ]
then
  $NEO_DIR/tools/pneo/src/pneo_rbf 
  exit 0
fi
#============================================================

#============================================================
# Generate simdir if -g set, then exit.
#
if [ $GENERATE_FLAG -eq 1 ]
then
   if [ ! -f "${NEO_DIR}/tools/input/$LOCDIR/input.neo" ]
   then
      cat ${NEO_DIR}/tools/input/simdir_list
   else
      cp -ai ${NEO_DIR}/tools/input/$LOCDIR $SIMDIR
   fi
   exit 0
fi
#============================================================

#============================================================
# Do the regression test if -r set, then exit.
#
if [ $REGRESS -eq 1 ] 
then 
   gacode_reg_do 1 1 $REGRESS_RESET neo 1e-5
   exit 0
fi
if [ $REGRESS -eq 2 ] 
then 
   gacode_reg $LOCDIR $GACODE_ROOT/neo/tools/input out.neo.prec 1e-5 
   exit 0
fi
#============================================================

#============================================================
# Everything else must be done in $SIMDIR; so ensure existence 
# of $SIMDIR (needed at this point) and go there: 
#
if ! gacode_sim_warn $SIMDIR
then
   exit 1 
fi 

cd $SIMDIR
#============================================================

#==========================================================
# echo number of tasks, then parse INPUT
#
python $NEO_DIR/bin/neo_parse.py 
#==========================================================

#===========================================================
# RUN NEO
#

# Standalone mode
if [ $EXEC_FLAG -eq 1 ] 
then

   # Empty old runfile
   > out.neo.run 

   gacode_printversion NEO

  #==========================================================
  # Version stamp:
  cat $GACODE_ROOT/neo/.VERSION > out.neo.version 
  echo $GACODE_PLATFORM >> out.neo.version
  date >> out.neo.version
  #==========================================================

  $GACODE_ROOT/platform/exec/exec.$GACODE_PLATFORM \
    $SIMDIR $NPROC $NEO_DIR/src/neo $NOMP $NUMA $MPINUMA

fi
#===========================================================
