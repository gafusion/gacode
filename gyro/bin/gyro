#!/bin/bash
#=============================================================
# gyro
#
# PURPOSE:
#  Top-level script controlling execution of GYRO.
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
  echo
  echo "Usage:   gyro [options]"
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         [The default path is the current directory]"
  echo
  echo "EXECUTE MODE"
  echo
  echo "         -e <simdir>" 
  echo "         Run GYRO using input data in <simdir>."
  echo
  echo "         -n <nproc>" 
  echo "         Number of cores."
  echo
  echo "TEST MODE"
  echo
  echo "         -t <simdir>"  
  echo "         Sanity test for INPUT data in <simdir>."
  echo
  echo "INITIALIZE ONLY"
  echo
  echo "         -i <simdir>" 
  echo "         Process INPUT only."
  echo
  echo "HALT"
  echo
  echo "         -K <simdir>" 
  echo "         Set non-persistent halt signal in <simdir>."
  echo 
  echo "         -k <simdir>" 
  echo "         Set persistent halt signal in <simdir>."
  echo 
  echo "         -c <simdir>" 
  echo "         Clear persistent halt signal from <simdir>."
  echo 
  echo "REGRESSION TESTING"
  echo
  echo "         -r <nproc>"
  echo "         Run full regression suite on <nproc> cores."
  echo 
  echo "TEMPLATE GENERATION"
  echo
  echo "         -g"
  echo "         List available simulation templates."
  echo
  echo "         -g <template>"
  echo "         Copy <template> into simulation path."
  echo
  echo "UTILITIES"
  echo 
  echo "         -s <simdir>" 
  echo "         Create small portable copy of <simdir>."
  echo 
  echo "         -pk <simdir> -pw <window>"
  echo "         Summarize transport coefficients, with optional" 
  echo "         averaging window: 0 < <window> <= 1"
  echo
  echo "         -h" 
  echo "         Version and platform information."

  exit 1
fi
#=============================================================

#=============================================================
# Define variables for flag capture
#
RUNBASE='out.gyro.run'
VERBASE='out.gyro.version'
#
# Default simulation root and gyro directory
SIMROOT=$PWD
GYRO_DIR=$GACODE_ROOT/gyro
# Default number of cores
NPROC=1
# Execute/test mode flags
EXEC_FLAG=0
TEST_FLAG=0
INIT_FLAG=0
GENERATE_FLAG=0
REGRESS_FLAG=0
SCOPY_FLAG=0
KILL_STATUS=2
PEEK_FLAG=0
PEEK_WINDOW=0.5
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -e) shift ; LOCDIR=$1 ; EXEC_FLAG=1 ;;

  -t) shift ; LOCDIR=$1 ; TEST_FLAG=1 ;;

  -i) shift ; LOCDIR=$1 ; INIT_FLAG=1 ;;

  -g) shift ; LOCDIR=$1 ; GENERATE_FLAG=1 ;;

  -r) shift ; NPROC=$1 ; REGRESS_FLAG=1 ;;

  -s) shift ; LOCDIR=$1 ; SCOPY_FLAG=1 ;;

  -n) shift ; NPROC=$1 ;;

  -h) gacode_printversion GYRO ; exit 0 ;;

  -K) shift ; KILL_STATUS=1 ; LOCDIR=$1 ;;

  -k) shift ; KILL_STATUS=-1 ; LOCDIR=$1 ;;

  -c) shift ; KILL_STATUS=0 ; LOCDIR=$1 ;;

  -pk) shift ; PEEK_FLAG=1 ; LOCDIR=$1 ;;

  -pw) shift ; PEEK_WINDOW=$1 ;;

  *) echo "ERROR: incorrect gyro syntax." ; exit 1 ;;
 
  esac
  shift
done
#=============================================================

if [ "$LOCDIR" == "." ]
then
   LOCDIR=`basename $PWD`
   cd .. ; SIMROOT=$PWD
fi
SIMDIR=$SIMROOT/$LOCDIR

#=============================================================
case "$KILL_STATUS" in
  -1) gyro_sim_kill $SIMDIR -1 ; exit 0 ;;
   0) gyro_sim_kill $SIMDIR 0  ; exit 0 ;;
   1) gyro_sim_kill $SIMDIR 1  ; exit 0 ;;  
esac
#=============================================================
 
#============================================================
# Check for inconsistent flags:
FLAG_SUM=$[ $EXEC_FLAG + $TEST_FLAG + $GENERATE_FLAG 
                       + $REGRESS_FLAG + $INIT_FLAG]
if [ "$FLAG_SUM" -gt 1 ]
then
   echo "ERROR: Can only specify one of -e, -t, -g, -r, -i"
   exit 1
fi
#============================================================

#============================================================
# Generate simdir if -g set, then exit.
#
if [ $GENERATE_FLAG -eq 1 ]
then
   if [ ! -f "${GYRO_DIR}/tools/input/$LOCDIR/input.gyro" ]
   then
      cat ${GYRO_DIR}/tools/input/simdir_list
   else
      cp -ai ${GYRO_DIR}/tools/input/$LOCDIR $SIMDIR
   fi
   exit 0
fi
#============================================================

#============================================================
# Do the regression test if -r set, then exit.
#
if [ $REGRESS_FLAG -eq 1 ] 
then 
   N2=$[ NPROC / 2 ]
   if [ $[ NPROC - 2 * N2 ] -eq 1 ]
   then
      echo "GYRO regression tool"
      echo 
      echo "Usage:  gyro -r <n_proc>" 
      echo 
      echo "        <n_proc>  Number of processors (must be multiple of 2)" 
      exit 1
   fi   
   gyro_reg_do $NPROC 
   exit 0
fi
#============================================================

#============================================================
# Everything else must be done in $SIMDIR; so ensure existence 
# of $SIMDIR (needed at this point) and go there: 
#
if ! gyro_sim_warn $SIMDIR
then
   exit 1 
fi 

cd $SIMDIR
#============================================================

#=============================================================
# Do a small-copy (copy small files into new directory)
if [ $SCOPY_FLAG -eq 1 ]
then
   list="
    $RUNBASE
    $VERBASE
    t.out
    diff.out
    diff_i.out
    diff_n.out
    error.out
    gbflux.out
    gbflux_i.out
    gbflux_n.out
    geometry_arrays.out
    input.gyro
    input.gyro.gen
    input.profiles
    input.profiles.gen
    input.profiles.geo
    kxkyspec.out
    phase_space.out
    profile_vugyro.out
    timing.out
    zerobar.out"

   # Funny syntax below removes trailing /
   target=${SIMDIR%/}"-s"
   mkdir $target
   for i in $list
   do
      cp -av $i $target
   done
   exit 0
fi
#=============================================================

#=============================================================
# Summarize transport coefficients
#
if [ $PEEK_FLAG -eq 1 ]
then
   echo "$PEEK_WINDOW" > /tmp/peekcfg
   cd $SIMDIR ; $GYRO_DIR/peek/peek 
   rm /tmp/peekcfg
   exit 0
fi
#=============================================================

#==========================================================
# Check for "hard halt", otherwise initialize halt file:
#
if [ -f halt ] 
then
   if [ `cat halt` = "-1" ] 
   then
      exit 1
   fi   
fi
echo 0 > halt
#==========================================================

#==========================================================
# echo number of tasks, then parse INPUT
#
echo "[GYRO MPI tasks: $NPROC]" > $RUNBASE
echo "[Parsing data in input.gyro]" >> $RUNBASE

python $GYRO_DIR/bin/gyro_parse.py >> $RUNBASE
if [ $? -eq 1 ] 
then
   cat $RUNBASE
   exit 1
fi
#==========================================================

#==========================================================
# See if we are using experimental profiles

if [ -f input.profiles ]
then 
   # See if this is a restart
   LINE=`cat restart.dat`
   if [ ${LINE:0:1} = "1" ] && [ -f input.profiles.gen ]
   then
      # We are restarting; do not parse
      echo "NOTE: not parsing input.profiles on restart."
   else
      # We are not restarting; parse input.profiles
      python $GACODE_ROOT/shared/bin/profile_parse.py input.profiles >> $RUNBASE
      if [ $? -eq 1 ]
      then
         cat $RUNBASE
         exit 1
      fi
   fi
fi
#==========================================================

#===========================================================
# Set flags for execute or test:

# Execute:
if [ $EXEC_FLAG -eq 1 ]
then

   #==========================================================
   # Version stamp:  
   echo `gacode_getversion` > $VERBASE
   echo $GACODE_PLATFORM >> $VERBASE
   date >> $VERBASE
   #==========================================================

   gacode_printversion GYRO 
   echo "0" > "$SIMDIR/gyrotest_flag"
fi

# Test:
if [ $TEST_FLAG -eq 1 ]
then
   echo "1" > "$SIMDIR/gyrotest_flag"
fi
#===========================================================

#===========================================================
# RUN GYRO
#
if [ $INIT_FLAG -ne 1 ] 
then
  $GACODE_ROOT/shared/exec/gyro.$GACODE_PLATFORM $SIMDIR $NPROC $GYRO_DIR/src/gyro
fi

if [ $TEST_FLAG -eq 1 ] 
then
   cat $RUNBASE
fi
#===========================================================


exit 0
