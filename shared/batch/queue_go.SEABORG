#!/bin/sh
#
# SCRIPT:
#  queue_go.SP
#
# FUNCTION:
#  Batch generator for NERSC SP LoadLeveler queue.
#
# AUTHOR:
#  Jeff Candy <jeff.candy@gat.com>
#
# REVISIONS:
# 26 July 00
#  Created
# 19 Sept 01
#  Revisions for Phase-3 SP
# 08 Mar 07: mrf
#  Modified to receive 5 arguments, rather than 4.  
#  The new argument is a path to sim.

repository="gc3"

nproc=${1}
queue_num=${2}
sim=${3}
simpath=${4}
multi=${5}

echo "** Will charge to repository $repository **"

# For new SP, we need nodes = nproc/16

nodes=`expr $nproc / 16`

case "$queue_num" in

   1 )
    
      queue="debug" ;

      if [ $nproc -gt 384 ] ; then
         echo "You cannot use the debug queue with n > 384"
         exit 1 
      fi ;;
        
   2 )
 
      queue="interactive" ;

      if [ $nproc -gt 128 ] ; then
         echo "You cannot use the interactive queue with n > 128"
         exit 1 
      fi ;;

   3 )

      queue="premium" ;;

   4 )
 
      queue="regular" ;;
 
   5 )
 
      queue="low" ;;

esac

bfile=$simpath/$sim/batch.src

echo "Output written to $bfile"
 
# Copy appropriate commands to batch directory:

echo "#@ job_name = $sim" > $bfile
echo "#@ account_no = $repository" >> $bfile
echo "#@ output = $simpath/$sim/batch.out" >> $bfile
echo "#@ error = $simpath/$sim/batch.err" >> $bfile
echo "#@ job_type = parallel" >> $bfile
echo "#@ environment = COPY_ALL" >> $bfile
echo "#@ notification = complete" >> $bfile
echo "#@ network.MPI = csss,not_shared,us" >> $bfile
echo "#@ node_usage = not_shared" >> $bfile
echo "#@ class = $queue" >> $bfile
echo "#@ tasks_per_node = 16" >> $bfile
echo "#@ node = $nodes" >> $bfile

echo "Limit to 1 hour [y,n]?"
read limit
if [ "$limit" = "y" ] ; then
   echo "#@ wall_clock_limit = 1:00:00" >> $bfile
else
   if [ $nodes -lt 32 ]
   then
      echo "#@ wall_clock_limit = 24:00:00" >> $bfile
   else
      echo "#@ wall_clock_limit = 48:00:00" >> $bfile
   fi
fi

echo "#@ queue" >> $bfile

if [ $simpath = $GYRO_DIR/sim ]
then
   gyro_opts="-e $sim -n $nproc"
else
   gyro_opts="-e $sim -n $nproc -p $simpath"
fi

# Submit to queue?

case "$multi" in

    "0" )
 
    echo "gyro $gyro_opts" >> $bfile ;;

    "1" )

    echo "gyro_mrun $gyro_opts" >> $bfile ;;

    "2" )

    echo "gyro_trun $gyro_opts" >> $bfile ;;

     * )

    echo "ERROR"

esac

echo "Submit your job [y,n]?"
   
read submit
   
if [ "$submit" = "y" ] ; then
   llsubmit $bfile
fi

exit 1
