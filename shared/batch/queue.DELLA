#!/bin/sh
#
# SCRIPT:
#  queue_go.petrel
#
# FUNCTION:
#  Batch generator for Linux PBS on della.princeton.edu

#------------------------------------
# Functions:
#------------------------------------

G_proc_check () {

      if [ $nproc -gt $proc_max ] ; then
         echo " Quitting: the \"$queue\" queue has only $proc_max processors"
	 exit 1
      fi  
}

#-------------------------------------
# Script proper
#-------------------------------------

repository="null"

nproc=${1}
queue_num=${2}
sim=${3}
simpath=${4}
code=${5}

case "$queue_num" in
# precede attribute with ":" as in ":gigabit"
   1 ) attribute=""
      queue_sub="ib"
      proc_max=128
time_limit=24
      G_proc_check ;;

   2 ) attribute=""
      queue_sub=""
      proc_max=256
time_limit=24
      G_proc_check ;;

   3 ) attribute=""
      queue_sub=""
      proc_max=128
time_limit=1
      G_proc_check ;;
        
   * ) echo " Unrecognized queue choice"
      exit ;;

esac

#  set above  time_limit=24:00:00
echo " Enter time_limit (hh or hh:mm:ss) (24 hours is default)"
read TIMEL
TIML=${TIMEL:=24}
# If the time has a colon use directly; otherwise make it hours:
echo $TIML | grep -q : || TIML=${TIML}:00:00
if [ ${TIML%%:*} -gt $time_limit ] ; then
   echo " reducing time limit to match queue limit"
     TIML=${time_limit}:00:00
fi
echo  " TIMEL and TIML:", ${TIMEL},${TIML}

bfile=$simpath/$sim/batch.src

echo "Output written to $bfile"
 
# Make up the batch script:

echo "#!/bin/sh" > $bfile
N_nodes=$[$nproc/2]
N_remainder=$[$nproc-2*$N_nodes]
#echo "N_nodes=" $N_nodes
#echo "N_remainder=" $N_remainder
if [ $N_remainder -ge 1 ] ; then
  if [ $N_nodes -ge 1 ] ; then
     echo "#PBS -l nodes=1${attribute}+$N_nodes${attribute}:ppn=2,walltime=$TIML" >> $bfile
  else
     echo "#PBS -l nodes=1${attribute},walltime=$TIML" >> $bfile
  fi
else
     echo "#PBS -l nodes=$N_nodes${attribute}:ppn=2,walltime=$TIML" >> $bfile
fi
echo "#PBS -N $sim" >> $bfile
echo "#PBS -e $simpath/$sim/pbs.err" >> $bfile
echo "#PBS -o $simpath/$sim/pbs.log" >> $bfile
echo "#PBS -m aeb" >> $bfile
echo "#PBS -M $USER@pppl.gov" >> $bfile
echo "#PBS -r n" >> $bfile
echo "#PBS -v PATH,LD_LIBRARY_PATH,GYRO_PLAT,GYRO_DIR,PYTHONPATH" >> $bfile
if [ $queue_sub != "" ] ; then
  echo "#PBS -q $queue_sub" >> $bfile
fi
echo "# Batch execution commands start here" >> $bfile

echo 'echo  "P4_GLOBMEMSIZE is $P4_GLOBMEMSIZE"' >> $bfile
echo "cd $simpath/$sim" >> $bfile
echo "# Save previous batch files that will be overwritten" >> $bfile
echo "/home0/mikk/GYRO/bin/savlogy_batch" >> $bfile

echo 'echo The master node of this job is `hostname`' >> $bfile
echo 'echo The working directory is `echo $PBS_O_WORKDIR`' >> $bfile
echo "echo This job runs on the following nodes:" >> $bfile
echo '/bin/cat $PBS_NODEFILE' >> $bfile
echo 'NPROCS=`wc -l < $PBS_NODEFILE`' >> $bfile
echo 'echo This job has allocated $NPROCS nodes' >> $bfile
echo '# Sort the PBS generated machine file for cleanup later' >> $bfile
echo "PBS_SORT=$simpath/$sim/pbs.nodes" >> $bfile
echo 'sort -u $PBS_NODEFILE > $PBS_SORT' >> $bfile

echo "echo -n 'Started : ' ; date" >> $bfile
echo "$code -e $sim -n $nproc -p $simpath > $simpath/$sim/batch.out" >> $bfile
echo "echo -n 'Finished: ' ; date" >> $bfile

#cat $bfile

# Submit to queue?

echo "Submit your job [y,n]?"
   
read submit
   
if [ "$submit" = "y" ] ; then   
   qsub  $bfile
fi
   
exit 1
