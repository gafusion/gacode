#!/bin/sh
#
# SCRIPT:
#  queue_go.KESTREL
#
# FUNCTION:
#  Batch generator for Linux PBS on kestrel.pppl.gov
#
# AUTHOR:
#  David Mikkelsen <mikk@pppl.gov>
#
# REVISIONS:
#  9 April 2007
#  15 September 2009 : L Peterson
#  30 September 2009 : L Peterson : use ppn=4

#------------------------------------
# Functions:
#------------------------------------

G_proc_check () {

      if [ $nproc -gt $proc_max ] ; then
         echo " Quitting: the \"${queue_sub}\" queue has only $proc_max processors"
	 exit 1
      fi  
}

#-------------------------------------
# Script proper
#-------------------------------------

repository="null"

nproc=${1}
queue_num=${2}
sim=${3}
sim_path=${4}
code=${5}

# Defaults for Kestrel
proc_max=128
qsub_cmd="qsub"
time_limit=24:00:00

case "$queue_num" in
   1 ) queue_sub="sque"
       proc_max=1
       time_limit=01:00:00 ;;

   2 ) queue_sub="kestrel"
       time_limit=02:00:00 ;;

   3 ) queue_sub="kestrel"
       time_limit=10:00:00 ;;

   4 ) queue_sub="kestrel"
       time_limit=24:00:00 ;;

   5 ) queue_sub="kestrel"
       time_limit=48:00:00 ;;

   6 ) queue_sub="kestrel"
       # Custom time limit
       echo " Enter time_limit (hh or hh:mm:ss) (24 hours is default)"
       read TIMEL
       time_limit=${TIMEL:=24}
       # If the time has a colon use directly; otherwise make it hours:
       echo $time_limit | grep -q : || time_limit=${time_limit}:00:00 ;;

   * ) echo " Unrecognized queue choice"
       exit ;;

esac

G_proc_check

bfile=$sim_path/$sim/batch.src

echo "Output written to $bfile"

# Determine number of nodes necessary. If not a multiple of 4, need extra
n_nodes=$[$nproc/4]
if [ $[$nproc%4] -ne 0 ] ; then
	n_nodes=$[$n_nodes+1]
fi


# Make up the batch script:

echo "#!/bin/sh" > $bfile
echo "#PBS -l nodes=${n_nodes}:ppn=4,walltime=$time_limit" >> $bfile
echo "#PBS -l mem=${nproc}gb" >> $bfile
echo "#PBS -N $sim" >> $bfile
echo "#PBS -e $sim_path/$sim/batch.err" >> $bfile
echo "#PBS -o $sim_path/$sim/batch.out" >> $bfile
echo "#PBS -m aeb" >> $bfile
echo "#PBS -M $USER@pppl.gov" >> $bfile
echo "#PBS -r n" >> $bfile
echo "#PBS -q $queue_sub" >> $bfile
echo "# Batch execution commands start here" >> $bfile

echo "cd $sim_path/$sim" >> $bfile

echo 'echo The master node of this job is `hostname`' >> $bfile
echo 'echo The working directory is `echo $PBS_O_WORKDIR`' >> $bfile
echo 'NPROCS=`wc -l < $PBS_NODEFILE`' >> $bfile
echo 'echo This job has allocated $NPROCS nodes' >> $bfile
echo '# Sort the PBS generated machine file for cleanup later' >> $bfile
echo "PBS_SORT=$sim_path/$sim/pbs.nodes" >> $bfile
echo 'sort -u $PBS_NODEFILE > $PBS_SORT' >> $bfile

# added "sleep 5" to cure an NFS problem:
echo 'sleep 5' >> $bfile

echo "echo -n 'Started : ' ; date" >> $bfile

gyro_opts="-e $sim -n $nproc -p $sim_path"
echo "$code $gyro_opts" >> $bfile

echo "echo -n 'Finished: ' ; date" >> $bfile

# Submit to queue?

echo "Submit your job [y,n]?"
   
read submit
   
if [ "$submit" = "y" ] ; then   
   $qsub_cmd $bfile
fi
   
exit 1
