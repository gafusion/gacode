#!/bin/sh
#
# SCRIPT:
#  queue.LOKI
#
# FUNCTION:
#  Batch generator for LOKI (AMD64+PBS)

nmpi=${1}
sim=${2}
simpath=${3}
code=${4}
nomp=${5}
numa=${6}
mpinuma=${7}

# nmpi = MPI tasks
# nomp = OpenMP threads per MPI task
# numa = NUMAs active per node
# mpinuma = MPI tasks per active NUMA 

nodes=$[${nmpi}/8]

#=========================================================================

echo "LOKI cluster at PSFC"
echo 
echo "maximum CPU number and wall time determines queue for submission automatically:"
echo
echo "theory:    must be in theory group"
echo "default:   max. 12 hours, 384 cores, 48 nodes"
echo "long:      max. 24 hours, 256 cores, 32 nodes"
echo "big:       max. 15 hours, 600 cores, 75 nodes" 
echo
read -p "Enter wall time limit in hours: " hours

wtime=$hours:00:00

theory=`groups | grep -c theory`


if [ $theory -eq 1 ]; then
   echo " Job will be submitted to THEORY queue"
   queue="theory"
else 
  if [ ${hours} -le 12 ] && [ $nodes -le 48 ]; then
  echo " Job will be submitted on DEFAULT queue (max 48 nodes, 12 hours)"
  queue="default"
  else 
   if [ ${hours} -gt 12 ] && [ $nodes -le 32 ]; then
    echo " Job will be submitted on LONG queue (max 32 nodes, 24 hours)"
    queue="long"
   else 
     if [ ${hours} -le 15 ] && [ $nodes -le 75 ]; then
       echo " Job will be submitted to BIG queue (max 75 nodes, 15 hours)"
     fi
   fi
  fi
fi

if [ ${hours} -gt 24 ] && [ $theory -eq 0 ]; then
  echo " Shortening wall time to 24 hours"
  wtime=24:00:00
fi

bfile=$simpath/$sim/batch.src

echo "Output written to $bfile"
 
# Copy appropriate commands to batch directory:

echo "#PBS -N $sim" > $bfile
echo "#PBS -o $simpath/$sim/batch.out" >> $bfile
echo "#PBS -e $simpath/$sim/batch.err" >> $bfile
echo "#PBS -q $queue" >> $bfile
echo "#PBS -l nodes=$nodes:ppn=8,walltime=$wtime" >> $bfile
echo "#PBS -m ae" >> $bfile
echo "#PBS -M ${USER}@psfc.mit.edu" >> $bfile
# this is ok, because LDAP authentication requires all users have a C-Mod PSFC acct.
echo "date" >> $bfile

echo "$code -e $sim -n $nmpi -nomp $nomp -p $simpath" >> $bfile 

# Submit to queue?
echo "Submit your job [y,n]?"
read submit
if [ "$submit" = "y" ] ; then
   qsub $bfile
fi

exit 0
