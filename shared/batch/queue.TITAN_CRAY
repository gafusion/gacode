#! /usr/bin/env bash
#
# SCRIPT:
#  queue.TITAN_PGI
#
# FUNCTION:
#  Batch generator for Cray XK7 (titan.ccs.ornl.gov)  
#---------------------------------------------------

nmpi=${1}
sim=${2}
simpath=${3}
code=${4}
nomp=${5}
numa=${6}
mpinuma=${7}

# nmpi = MPI tasks
# nomp = OpenMP threads per MPI task
# numa = NUMAs active per node
# mpinuma = MPI tasks per active NUMA 

. $GACODE_ROOT/shared/bin/gacode_mpi_tool

echo "---------------------------------"
echo "Cray XK76 (titan) [16 cores/node]"
echo "---------------------------------"
echo
echo "Cores requested (mppwidth)   : $cores_requested"
echo "Cores used                   : $cores_used"
echo "Nodes used                   : $nodes"
echo "Total MPI tasks (-n)         : $nmpi"
echo "MPI tasks/node (-N)          : $mpinode"
echo "OpenMP threads/MPI task(-d)  : $nomp"
echo "MPI tasks per numa node (-S) : $mpinuma"
echo
echo "[0] debug (10 min)"
echo "[1] debug (30 min)"
echo "[2] debug  (1 hour)" 
echo "[3] batch  (1 hour)" 
echo "[4] batch ( 2 hours)" 
echo "[5] batch ( 6 hours) >= 2000 cores" 
echo "[6] batch ( 8 hours) >= 5008 cores" 
echo "[7] batch (12 hours) >= 5008 cores" 
echo "[8] batch (24 hours) >= 60000 cores" 

read -p "Select a queue [0-9] " queue_num

case "$queue_num" in
  0) queue="debug" ; limit="0:10:00" ;;
  1) queue="debug" ; limit="0:30:00" ;;
  2) queue="debug" ; limit="1:00:00" ;;
  3) queue="batch" ; limit="1:00:00" ;;
  4) queue="batch" ; limit="2:00:00" ;;
  5) queue="batch" ; limit="6:00:00" ;;
  6) queue="batch" ; limit="8:00:00" ;;
  7) queue="batch" ; limit="12:00:00" ;;
  8) queue="batch" ; limit="24:00:00" ;;
esac

bfile=$simpath/$sim/batch.src
 
# Copy appropriate commands to batch directory:

# Repository selection
getnim -U `whoami`

read -p "Specify a repository [0 for default] " repo

echo "#!/bin/bash -l" > $bfile
echo "#PBS -N $sim" >> $bfile

if [ "$repo" != "0" ]
then
   echo "#PBS -A $repo" >> $bfile
fi

echo "#PBS -o $simpath/$sim/batch.out" >> $bfile
echo "#PBS -e $simpath/$sim/batch.err" >> $bfile
echo "#PBS -q $queue" >> $bfile
echo "#PBS -l walltime=$limit" >> $bfile
echo "#PBS -l nodes=$nodes" >> $bfile
echo " " >> $bfile

echo "module load python" >> $bfile

gyro_opts="-e $sim -n $nmpi -nomp $nomp -numa $numa -mpinuma $mpinuma -p $simpath"

echo "$code $gyro_opts" >> $bfile 
echo "Output written to $bfile"

read -p "Submit your job [y/n] " submit
    
if [ "$submit" = "y" ] ; then
   qsub $bfile
fi

exit 0
