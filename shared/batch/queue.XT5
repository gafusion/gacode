#! /usr/bin/env bash
#
# SCRIPT:
#  queue.XT5
#
# FUNCTION:
#  Batch generator for Cray XT5 (jaguarpf.nersc.gov)  
#
#  FIXED Hardware parameters
CORES_PER_NODE=12
NUMAS_PER_NODE=2
#---------------------------------------------------

nmpi=${1}
sim=${2}
simpath=${3}
code=${4}
nomp=${5}
numa=${6}
mpinuma=${7}

# Default to densely-packed pure-MPI.
if [ $numa -eq 0 ]
then
   numa=$NUMAS_PER_NODE
fi
if [ $mpinuma -eq 0 ]
then
   mpinuma=$(($CORES_PER_NODE/$NUMAS_PER_NODE))
fi

# nmpi = MPI tasks
# nomp = OpenMP threads per MPI task
# numa = NUMAs active per node
# mpinuma = MPI tasks per active NUMA 

#=========================================================================
# Calculator for parallel layout

# See if we are asking for too many NUMAs
if [ $numa -gt $NUMAS_PER_NODE ] 
then
  echo 'Too many NUMAs per node requested'
  exit 1
fi

# See if we are asking for too many OpenMP tasks
i1=$(($nomp*$mpinuma))
i2=$(($CORES_PER_NODE/$NUMAS_PER_NODE)) 
if [ $i1 -gt $i2 ] 
then
   echo 'Too many OpenMP tasks per MPI process'
   exit 1
fi

# MPI tasks per node
mpinode=$(($mpinuma*$NUMAS_PER_NODE))
# Nodes requested 
nodes=$(($nmpi/$mpinode))

# If we need part of a node, then add a node
if [ $nmpi -gt $(($nodes*$mpinode)) ] 
then
   nodes=$(($nodes+1))
   echo "** WARNING **: Using partial node"
fi

# Final core counts
cores_requested=$(($nodes*$CORES_PER_NODE))
cores_used=$(($nomp*$nmpi))
#=========================================================================

echo "-----------------------------------"
echo "Cray XT5 (jaguarpf) [12 cores/node]"
echo "-----------------------------------"
echo
echo "Cores requested (mppwidth)   : $cores_requested"
echo "Cores used                   : $cores_used"
echo "Total MPI tasks (-n)         : $nmpi"
echo "MPI tasks/node (-N)          : $mpinode"
echo "OpenMP threads/MPI task(-d)  : $nomp"
echo "MPI tasks per numa node (-S) : $mpinuma"
echo
echo "[0] debug (10 min  ) < 2,004 cores"
echo "[1] debug (30 min  ) < 2,004 cores"
echo "[2] debug ( 1 hour ) < 2,004 cores"
echo "[3] bin 6 ( 2 hours) < 2,004 cores"
echo "[4] bin 5 ( 6 hours)   2,004+ cores"
echo "[5] bin 4 (12 hours)   5,004+ cores"
echo "[6] bin 3 (24 hours)  40,008+ cores"
echo "[7] bin 2 (24 hours)  80,004+ cores"
echo "[8] bin 1 (24 hours) 120,000+ cores"

read -p "Select a queue [0-7] " queue_num

case "$queue_num" in
  0) queue="debug" ; limit="0:10:00" ;;
  1) queue="debug" ; limit="0:30:00" ;;
  2) queue="debug" ; limit="1:00:00" ;;
  3) queue="batch" ; limit="2:00:00" ;;
  4) queue="batch" ; limit="6:00:00" ;;
  5) queue="batch" ; limit="12:00:00" ;;
  6-8) queue="batch" ; limit="24:00:00" ;;
esac

bfile=$simpath/$sim/batch.src
 
# Copy appropriate commands to batch directory:

read -p "Specify a repository [0 for default] " repo

echo "#PBS -N $sim" > $bfile
if [ "$repo" != "0" ]
then
   echo "#PBS -A $repo" >> $bfile
fi
echo "#PBS -o $simpath/$sim/batch.out" >> $bfile
echo "#PBS -e $simpath/$sim/batch.err" >> $bfile
echo "#PBS -q $queue" >> $bfile
echo "#PBS -l walltime=$limit" >> $bfile
echo "#PBS -l size=$cores_requested" >> $bfile
echo "cd \${PBS_O_WORKDIR}" >> $bfile
echo "date" >> $bfile

gyro_opts="-e $sim -n $nmpi -nomp $nomp -numa $numa -mpinuma $mpinuma -p $simpath"

echo "$code $gyro_opts" >> $bfile 
echo "Output written to $bfile"

read -p "Submit your job [y/n] " submit
    
if [ "$submit" = "y" ] ; then
   qsub $bfile
fi

exit 0
