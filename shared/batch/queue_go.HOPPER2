#! /usr/bin/env bash
#
# SCRIPT:
#  queue_go.HOPPER2
#
# FUNCTION:
#  Batch generator for Cray XE6 (hopper.nersc.gov)  
#---------------------------------------------------

repo=${GYRO_REPO:-gc3}

nmpi=${1}
queue_num=${2}
sim=${3}
simpath=${4}
code=${5}
nomp=${6}

#=========================================================================
# Calculator for parallel layout

#---------------------------------
# FIXED Hardware parameters
CORES_PER_NODE=24
NUMAS_PER_NODE=4
#----------------------------------

#---------------------------------
# ADJUSTABLE layoput parameters
#
# Use this many NUMAs per node
numa=4
# Use this many MPI tasks per numa
mpinuma=1
#----------------------------------

# See if we are asking for too many NUMAs
if [ $numa -gt $NUMAS_PER_NODE ] 
then
  echo 'Too many NUMAs per node requested'
  exit 1
fi

# See if we are asking for too many OpenMP tasks
i1=$(($nomp*$mpinuma))
i2=$(($CORES_PER_NODE/$NUMAS_PER_NODE)) 
if [ $i1 -gt $i2 ] 
then
   echo 'Too many OpenMP tasks per MPI process'
   exit 1
fi

# MPI tasks per node
mpinode=$(($mpinuma*$NUMAS_PER_NODE))
# Nodes requested 
nodes=$(($nmpi/$mpinode))

# If we need part of a node, then add a node
if [ $nmpi -gt $(($nodes*$mpinode)) ] 
then
   $nodes=$(($nodes+1))
   echo "WARNING: Using partial node"
fi

# Final core counts
cores_requested=$(($nodes*$CORES_PER_NODE))
cores_used=$(($nomp*$nmpi))
#=========================================================================

echo "Cores requested (mppwidth) $cores_requested"
echo "Cores used $cores_used"
echo "Total MPI tasks (-n) $nmpi"
echo "MPI tasks/node (-N) $mpinode"
echo "OpenMP threads/MPI task(-d) $nomp"
echo "MPI tasks per numa node (-S) $mpinuma"

case "$queue_num" in

   1 )

      queue="debug" ;
      limit="0:30:00" ;;

   2 )

      queue="regular" ;
      limit="1:00:00" ;;

   3 )

      queue="regular" ;
      limit="2:00:00" ;;

   4 )

      queue="regular" ;
      limit="6:00:00" ;;

   5 )

      queue="regular" ;
      limit="12:00:00" ;;

   6 )

      queue="low" ;
      limit="12:00:00" ;;


esac

bfile=$simpath/$sim/batch.src

echo "Output written to $bfile"
 
# Copy appropriate commands to batch directory:

echo "#PBS -N $sim" > $bfile
echo "#PBS -A $repo" >> $bfile
echo "#PBS -o $simpath/$sim/batch.out" >> $bfile
echo "#PBS -e $simpath/$sim/batch.err" >> $bfile
echo "#PBS -q $queue" >> $bfile
echo "#PBS -l walltime=$limit" >> $bfile
echo "#PBS -l mppwidth=$cores_requested" >> $bfile
echo "#PBS -m abe" >> $bfile
echo "#PBS -M ${USER}@nersc.gov" >> $bfile

gyro_opts="-e $sim -n $nmpi -nomp $nomp -p $simpath"

echo "$code $gyro_opts" >> $bfile 

echo "Submit your job [y,n]?"
   
read submit
   
if [ "$submit" = "y" ] ; then
   qsub $bfile
fi

exit 1
