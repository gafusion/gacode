#!/bin/sh
#
# SCRIPT:
#  queue_go.PPPL
#
# FUNCTION:
#  Batch script generator; PPPL Linux PBS for kestrel, kite, kruskal
#
# AUTHORS:
#  David Mikkelsen <mikk@pppl.gov>
#  Luc Peterson <jpeterso@pppl.gov>
#
# REVISIONS:
#  23 April 2010

#------------------------------------
# Functions:
#------------------------------------

G_proc_check () {

if [ $nproc -gt $proc_max ] ; then
  echo " Try again: the \"${queue_sub}\" queue has a $proc_max processor limit"
exit 1
fi  
}

#-------------------------------------
# Main script follows
#-------------------------------------


nproc=${1}
queue_num=${2}
sim=${3}
sim_path=${4}
code=${5}

case "$queue_num" in
   1 ) queue_sub="default: kestrel/sque/mque"
       proc_max=192 ;; 

   2 ) queue_sub="kite"
       proc_max=48 ;;

   3 ) queue_sub="kruskal"
       proc_max=512 ;;

   * ) echo " Unrecognized queue choice"
       exit ;;
esac

#  check requested Nproc against the selected queue limit:
G_proc_check

# Get the time limit
echo " Enter time_limit (hh or hh:mm:ss) (24 hours is default)"
read TIMEL
time_limit=${TIMEL:=24}
# If the time has a colon use directly; otherwise make it hours:
echo $time_limit | grep -q : || time_limit=${time_limit}:00:00

# Special handling for large kruskal jobs
#PBS -l nodes=64:ppn=8,walltime=1:00:00
#PBS -l mem=1025795mb
if [ ${nproc} -gt 340 ] ; then
  mem_spec=$[1025795*$nproc/512]"mb"
# Determine the number of kruskal nodes needed.
  n_nodes=$[$nproc/8]
  if [ $[$nproc%8] -ne 0 ] ; then
# If not a multiple of 8, need extra
    n_nodes=$[$n_nodes+1]
  fi
  node_spec=${n_nodes}:ppn=8
else
  mem_spec=$[1900*$nproc]"mb"
  node_spec=${nproc}
fi

# Make up the batch script:

bfile=$sim_path/$sim/batch.src
echo "Output written to $bfile"

echo "#!/bin/sh" > $bfile
echo "#PBS -l nodes=${node_spec},walltime=$time_limit" >> $bfile
echo "#PBS -l mem=${mem_spec}" >> $bfile
echo "#PBS -N $sim" >> $bfile
echo "#PBS -e $sim_path/$sim/batch.err" >> $bfile
echo "#PBS -o $sim_path/$sim/batch.out" >> $bfile
echo "#PBS -m aeb" >> $bfile
echo "#PBS -M $USER@pppl.gov" >> $bfile
echo "#PBS -r n" >> $bfile
# Don't specify queue name for default queue
if [ ${queue_num} -ne 1 ] ; then
    echo "#PBS -q $queue_sub" >> $bfile
fi
echo "# Batch execution commands start here" >> $bfile

echo "cd $sim_path/$sim" >> $bfile

echo 'echo The master node of this job is `hostname`' >> $bfile
echo 'echo The working directory is `echo $PBS_O_WORKDIR`' >> $bfile
echo 'NPROCS=`wc -l < $PBS_NODEFILE`' >> $bfile
echo 'echo This job has allocated $NPROCS nodes' >> $bfile
echo '# Sort the PBS generated machine file for cleanup later' >> $bfile
echo "PBS_SORT=$sim_path/$sim/pbs.nodes" >> $bfile
echo 'sort -u $PBS_NODEFILE > $PBS_SORT' >> $bfile

# added "sleep 5" to cure an NFS problem:
echo 'sleep 5' >> $bfile

echo "echo -n 'Started : ' ; date" >> $bfile

gyro_opts="-e $sim -n $nproc -p $sim_path"
echo "$code $gyro_opts" >> $bfile

echo "echo -n 'Finished: ' ; date" >> $bfile

# Submit to queue?

echo "Submit your job [y,n]?"
   
read submit
   
if [ "$submit" = "y" ] ; then   
   qsub $bfile
fi
   
exit 1
