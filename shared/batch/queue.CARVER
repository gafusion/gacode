#! /usr/bin/env bash
#
# SCRIPT:
#  queue.CARVER
#
# FUNCTION:
#  Batch generator for IBM iDataPlex (carver.nersc.gov)
#---------------------------------------------------
#  FIXED Hardware parameters
CORES_PER_NODE=8

nmpi=${1}
sim=${2}
simpath=${3}
code=${4}
nomp=${5}
numa=${6}
mpinuma=${7}

# nmpi = MPI tasks
# nomp = OpenMP threads per MPI task
# numa = NUMAs active per node
# mpinuma = MPI tasks per active NUMA 

#=========================================================================
# Calculator for parallel layout

nodes=$(($nmpi/$CORES_PER_NODE))
# If we need part of a node, then add a node
if [ $nmpi -gt $(($nodes*$CORES_PER_NODE)) ] 
then
   nodes=$(($nodes+1))
   echo "** WARNING **: Using partial node"
fi

#=========================================================================

echo "------------------------------------"
echo "Carver (IBM iDataPlex) queues (PBS)"
echo "------------------------------------"
echo 
echo "- Two quad-core chips per node; use multiples of 8 cores"
echo "- batch.src will submit to Carver"
echo "- if desired, edit the script to use the magellan"
echo "  queue (same limits)"
echo
echo "[1] debug   (30 min)   up to 256 cores"
echo "[2] regular ( 4 hours) up to 512 cores"
echo "[3] regular (12 hours) up to 512 cores"
echo "[4] regular (24 hours) up to 512 cores"
echo "[5] regular (36 hours) up to 256 cores"
echo "[6] low     (12 hours) up to 256 cores"

read -p "Select a queue [1-6] " queue_num

case "$queue_num" in
  1) queue="debug"   ; limit="0:30:00" ;;
  2) queue="regular" ; limit="4:00:00" ;;
  3) queue="regular" ; limit="12:00:00" ;;
  4) queue="regular" ; limit="24:00:00" ;;
  5) queue="regular" ; limit="36:00:00" ;;
  6) queue="low"     ; limit="12:00:00" ;;
  7) queue="premium" ; limit="4:00:00" ;;
esac

bfile=$simpath/$sim/batch.src

echo "Output written to $bfile"
 
# Copy appropriate commands to batch directory:

# Repository selection
getnim -U `whoami`

read -p "Specify a repository [0 for default] " repo

echo "#PBS -N $sim" > $bfile
if [ "$repo" != "0" ]
then
   echo "#PBS -A $repo" >> $bfile
fi
echo "#PBS -o $simpath/$sim/batch.out" >> $bfile
echo "#PBS -e $simpath/$sim/batch.err" >> $bfile
echo "#PBS -q $queue" >> $bfile
echo "#PBS -l nodes=$nodes:ppn=$CORES_PER_NODE" >> $bfile
echo "#PBS -l walltime=$limit" >> $bfile
echo "#PBS -m ae" >> $bfile
echo "#PBS -M ${USER}@nersc.gov" >> $bfile

gyro_opts="-e $sim -n $nmpi -nomp $nomp -p $simpath"

echo "$code $gyro_opts" >> $bfile 

read -p "Submit your job [y/n] " submit
   
if [ "$submit" = "y" ] ; then
   qsub $bfile
fi

exit 0
