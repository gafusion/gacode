#!/bin/sh
#
# SCRIPT:
#  queue_go.OSG
#
# FUNCTION:
#  Batch generator for OSG job (destination unknown).
#
# 2009/03/13 CG

nproc=${1}
jm_queue=${2}
sim=${3}
simpath=${4}
code=${5}

gt_type=gt2

exec_topdir=${TGYRO_DIR}/plat-bin

if [[ $code == "tgyro" ]]; then
  exec="tgyro_main"
else
  printf "ERROR: OSG submissions only valid for tgyro! You submitted \"$code\". Please change your GYRO_PLAT setting.\n" 1>&2
  exit 1
fi

case $jm_queue in
    [1-5])
        jobmanager=franklingrid.nersc.gov/jobmanager-pbs
        exec_dir=${exec_topdir}/FRANKLIN
        extra_jdl="environment = TGYRO_FRANKLIN=1";
        ;;
    [6-8])
        jobmanager=jacquardgrid.nersc.gov/jobmanager-pbs
        exec_dir=${exec_topdir}/JACQUARD
        ;;
    9|10)
        jobmanager=julius.rcac.purdue.edu/jobmanager-pbs
        exec_dir=${exec_topdir}/CAESAR
        extra_rsl='(handle = \"mpich2-intel\")'
        ;;
    *)
        echo "Unable to deduce jobmanager from unrecognized input $jm_queue" 1>&2
        exit 1
esac

case $jm_queue in
    1)
        queue=debug
        ;;
    2)
        queue=premium
        ;;
    3)
        queue=regular
        ;;
    4)
        queue=low
        ;;
    5)
        queue=special
        ;;
    6)
        queue=debug
        ;;
    7)
        queue=batch
        ;;
    8)
        queue=low
        ;;
    9)
        queue=short
        ;;
    9)
        queue=short
        ;;
    10)
        queue=standby
        ;;
    *)
        echo "Unable to deduce queue from unrecognized input $jm_queue" 1>&2
        exit 1
        
esac

bfile=$simpath/$sim/batch.src

read -e -p 'Enter maximum execution time in minutes (0 = no specified max.): ' maxwalltime

printf "\n"

[[ -n "$queue" ]] && queue="(queue = \\\"$queue\\\")"

if [ -n "$maxwalltime" ] && [ ! "$maxwalltime" = "0" ]; then
  maxwalltime="(maxWallTime = $maxwalltime)"
else
  unset maxwalltime
fi

# Copy appropriate commands to batch directory:
cat >$bfile <<EOF
universe = globus
grid_resource = $gt_type $jobmanager
transfer_output = true
transfer_error = true
stream_output = false
stream_error = false
notification = NEVER
log = $simpath/$sim/batch.log
output = $simpath/$sim/batch.out
error = $simpath/$sim/batch.err
globusrsl = (count = $nproc)(jobType = \"mpi\")$maxwalltime$queue$extra_rsl
executable = $exec_dir/$exec
transfer_executable = true
transfer_input_files = 
transfer_output_files = output_files.tar.bz2
when_to_transfer_output = ON_EXIT_OR_EVICT
$extra_jdl
queue
EOF

printf "\nOutput written to $bfile\n\n"
 
gyro_opts="-e $sim -n $nproc -p $simpath"

echo "Submit your job [y,n]?"
   
read submit
   
if [ "$submit" = "y" ] ; then
  exec $code $gyro_opts
fi

exit 1
