#! /usr/bin/env bash
#
# SCRIPT:
#  queue.FRANKLIN
#
# FUNCTION:
#  Batchfor Cray XT4 (franklin.nersc.gov)  
#
#  FIXED Hardware parameters
CORES_PER_NODE=4
NUMAS_PER_NODE=1
#---------------------------------------------------

nmpi=${1}
sim=${2}
simpath=${3}
code=${4}
nomp=${5}
numa=${6}
mpinuma=${7}

# Default to densely-packed pure-MPI.
if [ $numa -eq 0 ]
then
   numa=$NUMAS_PER_NODE
fi
if [ $mpinuma -eq 0 ]
then
   mpinuma=$(($CORES_PER_NODE/$NUMAS_PER_NODE))
fi

# nmpi = MPI tasks
# nomp = OpenMP threads per MPI task
# numa = NUMAs active per node
# mpinuma = MPI tasks per active NUMA 

#=========================================================================
# Calculator for parallel layout

# See if we are asking for too many NUMAs
if [ $numa -gt $NUMAS_PER_NODE ] 
then
  echo 'Too many NUMAs per node requested'
  exit 1
fi

# See if we are asking for too many OpenMP tasks
i1=$(($nomp*$mpinuma))
i2=$(($CORES_PER_NODE/$NUMAS_PER_NODE)) 
if [ $i1 -gt $i2 ] 
then
   echo 'Too many OpenMP tasks per MPI process'
   exit 1
fi

# MPI tasks per node
mpinode=$(($mpinuma*$NUMAS_PER_NODE))
# Nodes requested 
nodes=$(($nmpi/$mpinode))

# If we need part of a node, then add a node
if [ $nmpi -gt $(($nodes*$mpinode)) ] 
then
   nodes=$(($nodes+1))
   echo "** WARNING **: Using partial node"
fi

# Final core counts
cores_requested=$(($nodes*$CORES_PER_NODE))
cores_used=$(($nomp*$nmpi))
#=========================================================================

echo "----------------------------------"
echo "RANGER"
echo "----------------------------------"
echo
echo "Cores requested (mppwidth)   : $cores_requested"
echo "Cores used                   : $cores_used"
echo "Total MPI tasks (-n)         : $nmpi"
echo "MPI tasks/node (-N)          : $mpinode"
echo "OpenMP threads/MPI task(-d)  : $nomp"
echo
echo "[0] development  (10 min)   up to 256 nodes"
echo "[1] development  (30 min)   up to 256 nodes"
echo "[2] development  (1 hour)  up to 4096 nodes" 
echo "[3] development (2 hours)  up to 4096 nodes" 
echo "[4] normal      (4 hours)  up to 4096 nodes" 
echo "[5] normal      (8 hours)  up to 4096 nodes" 
echo "[6] normal      (24 hours) up to 4096 nodes" 
echo "[7] long        (48 hours) up to 1024 nodes" 
echo "[8] large      (24 hours) up to 16384 nodes" 

read -p "Select a queue [0-9] " queue_num

case "$queue_num" in
  0) queue="development"   ; limit="0:10:00" ;;
  1) queue="development"   ; limit="0:30:00" ;;
  2) queue="development" ; limit="1:00:00" ;;
  3) queue="development" ; limit="2:00:00" ;;
  4) queue="normal" ; limit="4:00:00" ;;
  5) queue="normal" ; limit="8:00:00" ;;
  6) queue="normal" ; limit="24:00:00" ;;
  7) queue="long" ; limit="48:00:00" ;;
  8) queue="large"     ; limit="24:00:00" ;;
esac

bfile=$simpath/$sim/batch.src
 
# Copy appropriate commands to batch directory:

# Repository selection
getnim -U `whoami`

echo "#!/bin/bash" >> $bfile
echo "#$ -V" >> $bfile
echo "#$ -cwd" >> $bfile
echo "#$ -N gyro" >> $bfile
echo "#$ -o $simpath/$sim/batch.out" >> $bfile
echo "#$ -e $simpath/$sim/batch.err" >> $bfile
echo "#$ -pe 1way 16" >> $bfile
echo "#$ -q $queue" >> $bfile
echo "#$ -l h_rt=$limit" >> $bfile
#echo "#PBS -l mppwidth=$cores_requested" >> $bfile
echo "#$ -m abe" >> $bfile
echo "#$ -M $USER@physics.utexas.edu" >> $bfile
echo "set -x" >> $bfile

gyro_opts="-e $sim -n $nmpi -nomp $nomp -numa $numa -mpinuma $mpinuma -p $simpath"

echo "$code $gyro_opts" >> $bfile 
echo "Output written to $bfile"

read -p "Submit your job [y/n] " submit
    
if [ "$submit" = "y" ] ; then
   qsub $bfile
fi

exit 0
