#! /usr/bin/env bash
#
# SCRIPT:
#  queue.RANGER
#
# FUNCTION:
#  Batch generator for UTexas Ranger.
#---------------------------------------------------

nmpi=${1}
sim=${2}
simpath=${3}
code=${4}
nomp=${5}
numa=${6}
mpinuma=${7}

# nmpi = MPI tasks
# nomp = OpenMP threads per MPI task
# numa = NUMAs active per node
# mpinuma = MPI tasks per active NUMA 

. $GACODE_ROOT/shared/bin/gacode_mpi_tool

echo "----------------------------------"
echo "RANGER"
echo "----------------------------------"
echo
echo "Cores requested (mppwidth)   : $cores_requested"
echo "Cores used                   : $cores_used"
echo "Total MPI tasks (-n)         : $nmpi"
echo "MPI tasks/node (-N)          : $mpinode"
echo "OpenMP threads/MPI task(-d)  : $nomp"
echo
echo "[0] development  (10 min)   up to 256 nodes"
echo "[1] development  (30 min)   up to 256 nodes"
echo "[2] development  (1 hour)  up to 4096 nodes" 
echo "[3] development (2 hours)  up to 4096 nodes" 
echo "[4] normal      (4 hours)  up to 4096 nodes" 
echo "[5] normal      (8 hours)  up to 4096 nodes" 
echo "[6] normal      (24 hours) up to 4096 nodes" 
echo "[7] long        (48 hours) up to 1024 nodes" 
echo "[8] large      (24 hours) up to 16384 nodes" 

read -p "Select a queue [0-9] " queue_num

case "$queue_num" in
  0) queue="development"   ; limit="0:10:00" ;;
  1) queue="development"   ; limit="0:30:00" ;;
  2) queue="development" ; limit="1:00:00" ;;
  3) queue="development" ; limit="2:00:00" ;;
  4) queue="normal" ; limit="4:00:00" ;;
  5) queue="normal" ; limit="8:00:00" ;;
  6) queue="normal" ; limit="24:00:00" ;;
  7) queue="long" ; limit="48:00:00" ;;
  8) queue="large"     ; limit="24:00:00" ;;
esac

bfile=$simpath/$sim/batch.src
 
# Copy appropriate commands to batch directory:

echo "#!/bin/bash" > $bfile
echo "#$ -V" >> $bfile
echo "#$ -cwd" >> $bfile
echo "#$ -N $sim" >> $bfile
echo "#$ -o $simpath/$sim/batch.out" >> $bfile
echo "#$ -e $simpath/$sim/batch.err" >> $bfile
echo "#$ -pe $mpinode""way $cores_requested" >> $bfile
echo "#$ -q $queue" >> $bfile
echo "#$ -l h_rt=$limit" >> $bfile
echo "#$ -m abe" >> $bfile
echo "#$ -M $USER@physics.utexas.edu" >> $bfile

gyro_opts="-e $sim -n $nmpi -nomp $nomp -numa $numa -mpinuma $mpinuma -p $simpath"

echo "$code $gyro_opts" >> $bfile 
echo "Output written to $bfile"

read -p "Submit your job [y/n] " submit
    
if [ "$submit" = "y" ] ; then
   qsub $bfile
fi

exit 0
