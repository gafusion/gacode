#! /usr/bin/env bash
#
# SCRIPT:
#  gyro.HOPPER2
#
# FUNCTION:
#  Parallel execution script
#
# HOPPER SYSTEM INFO:
# - Cray XE6
# - 153,216 processor cores
# - 6,384 compute nodes
# - (2x) AMD Opteron 6172 (Magny-Cours) 12-core CPUs per compute node running at 2.1GHz
# - (4x) ccNUMA nodes per compute node (each CPU consists two 6-core NUMA nodes)
# - each compute node has 32GiB RAM (1.3GiB per core)
# - (1x) Gemini ASIC per 2 compute nodes arranged in 3D torus network topology

simdir=${1}
nmpi=${2}
exec=${3}
nomp=${4}

cd $simdir

# Invoke parallel calculator (same as in queue_go)

#=========================================================================
# Calculator for parallel layout

#---------------------------------
# FIXED Hardware parameters
CORES_PER_NODE=24
CORES_PER_NUMA=6
#----------------------------------

#---------------------------------
# ADJUSTABLE layoput parameters
#
# Use this many NUMAs per node
numa=4
# Use this many MPI tasks per numa
mpinuma=1
#----------------------------------

# See if we are asking for too many NUMAs
if [ $numa -gt $NUMAS_PER_NODE ] 
then
  echo 'Too many NUMAs per node requested'
  exit 1
fi

# See if we are asking for too many OpenMP tasks
i1 = $(($nomp*$mpinuma))
i2 = $(($CORES_PER_NODE/$CORES_PER_NUMA)) 
if [ $i1 -gt $i2 ] 
then
   echo 'Too many OpenMP tasks per MPI process'
   exit 1
fi

# MPI tasks per node
mpinode = $(($mpinuma*$NUMAS_PER_NODE))
# Nodes requested 
nodes = $(($nmpi/$mpinode))

# If we need part of a node, then add a node
if [ $nmpi -gt $(($nodes*$mpinode)) ] 
then
   $nodes = $(($nodes+1))
   echo "WARNING: Using partial node"
fi

# Final core counts
$cores_requested=$(($nodes*$CORES_PER_NODE))
$cores_used=$(($nomp*$nmpi))
#=========================================================================

export MPICH_MAX_THREAD_SAFETY=funneled
export OMP_NUM_THREADS=$nomp
aprun -n $nmpi -N $mpinode -d $nomp -S $mpinuma -ss $exec
