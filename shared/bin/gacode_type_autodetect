#!/bin/bash
#--------------------------------------------
# Filetype autodetection script
#
# Types:
#
#  GACODE      (input.profiles)
#  ITERDB      (text iterdb)
#  ITERDBNC    (netCDF iterdb)
#  SWIM        (plasmastate)
#  PFILE       (peqdsk)
#  CORSICA  
#  GFILE       (geqdsk equilibrium data)
#  DSKGATO_OLD (old-type dskgato flux-surface data)
#  DSKGATO_NEW (new-type dskgato flux-surface data)
#--------------------------------------------

if [ "$1" == "UFILE" ] ; then
   echo "UFILE"
   exit 0
fi
if [ "$1" == "null" ] ; then
   echo "null"
   exit 0
fi
if [ ! -f $1 ] ; then
   echo "NOT_FOUND"
   exit 1
fi

x=`file -b $1`

if [[ "$x" == "NetCDF Data Format data" ]] ; then
   # Plasmastate or iterdb netcdf

   # Test for exsitence of NetCDF
   y=`which ncdump >& /dev/null`
   result="$?"
   if [[ "$result" == "1" ]] ; then
       echo "ERROR: (gacode_type_autodetect) ncdump must be in your path to handle NetCDF files." > /dev/stderr
       echo "UNKNOWN"
       exit 1
   fi

   # See if this is an unsupported TRANSP file
   y=`ncdump -c $1 | grep -m 1 -c RMJSYM`
   if [[ $y -gt 0 ]] ; then
      echo "ERROR: (gacode_type_autodetect) This is an unsupported TRANSP NetCDF file." > /dev/stderr
      echo "UNKNOWN"
      exit 1
   fi

   # See if this is an iterdb NetCDF file
   y=`ncdump -c $1 | grep -c hcap`
   if [[ $y -gt 0 ]] ; then
      echo "ITERDBNC"
      exit 0
   fi

   # See if this is a Swim plasmastate file
   y=`ncdump -c $1 | grep -c dim_nrho_eq`
   if [[ $y -gt 0 ]] ; then
      echo "SWIM"
   fi      
   exit 0 

else
   # pfile, gfile, iterdb text

   y=`grep -c psinorm $1`
   if [[ $y -gt 0 ]] ; then
      echo "PFILE"
      exit 0
   fi

   y=`grep -c BT_EXP $1`
   if [[ $y -gt 0 ]] ; then
      echo "GACODE" 
      exit 0
   fi 

   y=`grep -c cxareao $1`
   if [[ $y -gt 0 ]] ; then
      echo "ITERDB" 
      exit 0
   fi 

   y=`grep -c CORSICA $1`
   if [[ $y -gt 0 ]] ; then
      echo "CORSICA" 
      exit 0
   fi 

   # If we get to this point, we are dealing with equilibrium data
   y=`sed -n '2p' < $1 | grep -o E | wc -l`
   if [[ $y -eq 5 ]] ; then
      echo "GFILE" 
      exit 0
   fi 
   if [[ $y -eq 4 ]] ; then
      echo "DSKGATO_OLD" 
      exit 0
   fi 

   y=`sed -n '4p' < $1 | grep -o E | wc -l`
   if [[ $y -eq 4 ]] ; then
      echo "DSKGATO_NEW" 
      exit 0
   fi 

   echo "UNKNOWN" 
   exit 1;
fi

