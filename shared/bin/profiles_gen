#!/bin/bash
#=============================================================
# profiles_gen
#
# PURPOSE:
#  Top-level script for conversion of raw data into GYRO 
#  format (input.profiles).
#
# RECOGNIZED FORMATS:
#  - ITERDB (legacy text)
#  - ITERDB (NetCDF)
#  - Plasma State (NetCDF)
#  - ASTRA (also requires mapping file).
#  - PEQDSK (ELITE pfile)
#============================================================= 

#=============================================================
# EXECUTABLE AND CONFIG FILE LOCATIONS:
#
GYRO_DIR=${GACODE_ROOT}/gyro
# - profiles_gen converter executable
EXEC=${GACODE_ROOT}/shared/profiles_gen/src/prgen
# - GATO executable
GATO=${GACODE_ROOT}/gato/gato
# - GATO namelist
GATO_IN=${GACODE_ROOT}/gato/data/ingta
# - ASTRA converter
ASTRA=${GACODE_ROOT}/shared/profiles_gen/astra/astra2gyro.py
# - ASTRA default map file
ASTRAMAP=${GACODE_ROOT}/shared/profiles_gen/astra/astra_map_gyro
# - TRANSP converter
TRANSP=${GACODE_ROOT}/shared/profiles_gen/transp/transp2gyro.py
# - input.profiles manipulator
MODINPUT=${GACODE_ROOT}/shared/profiles_gen/modinput/inputmanipulate.py
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
   echo "Usage:       profiles_gen [options]"
   echo " "
   echo "Options (in any order) include: "
   echo " "
   echo "             -i <raw_data_file>"
   echo "             Import data from <raw_data_file> with filename conventions:"
   echo " "
   echo "              *        : ITERDB text file (default)"
   echo "              *.nc     : ITERDB NetCDF file"
   echo "              *.cdf    : Plasma State NetCDF file"
   echo "              *.astra  : ASTRA text file"
   echo "              *.peq    : PEQDSK/ELITE text file"
   echo " "
   echo "              input.profiles : velocity generation mode"
   echo " "
   echo "             -V"
   echo "             Verbose (for debugging; use this if you get an error)."
   echo " "
   echo "ITERDB Options"
   echo " "
   echo "             -g <gfile>"
   echo "             Merge EFIT gfile for high-precision geometry data."
   echo " "
   echo "             -nogq"
   echo "             Do not use q from GATO (by default, if gfile is specified q is from GATO)."
   echo " "
   echo "             -cer <vpol>"
   echo "             Merge data Er and velocity data from Solomon's cer datafile."
   echo " "
   echo "             -ver <version>"
   echo "             Version number (0=basic, 1=extra powers)."
   echo " "
   echo "Plasma State Options"
   echo
   echo "             -g <gfile>"
   echo "             Merge EFIT gfile for high-precision geometry data."
   echo " "
   echo "             -nogq"
   echo "             Do not use q from GATO (by default, if gfile is specified q is from GATO)."
   echo " "
   echo "             -r <reorder sequence>"
   echo "             Reorder ions."
   echo
   echo "ASTRA Options"
   echo
   echo "             -m <map file>"
   echo "             Use <map file> to map Astra data to GYRO input.profiles headers"
   echo "             NOTE: uses 'astra_map_gyro' in current directory by default."
   echo
   echo "             -n <note text>"
   echo "              Include <note text> in the input.profiles header."
   echo
   echo " "
   echo "VELOCITY GENERATION MODE"
   echo
   echo "             -vgen_in <ion string> " 
   echo "             Choices: DC, HDC"
   echo "             If this is blank, INPUT.v must exist."
   echo
   echo "             -vgen_e <flag>" 
   echo "             Method to compute Er."
   echo "             1=Force balance, 2=NEO (weak rot), 3=NEO (strong rot), 4=Return given"
   echo
   echo "             -vgen_v <flag>" 
   echo "             Method to compute velocities."
   echo "             1=NEO (weak rot), 2=NEO (strong rot), 3=Return given"
   echo
   echo "             -vgen_x <ion index>" 
   echo "             Index of ion species to match NEO and given velocities."
   echo
   echo " "
   echo "TRANSP Options"
   echo
   echo "             -transp"
   echo "             Generate data from TRANSP servers via prompt."
   echo
   echo "             -tok <TRANSP tokamak name>"
   echo "             TRANSP machine identification, eg ITER."
   echo
   echo "             -year <shot year>"
   echo "             Two-digit year of the experimental shot, eg 07."
   echo
   echo "             -shot <TRANSP shot id>"
   echo "             Examine this TRANSP run listing, eg 123456A01."
   echo
   echo "             -time <time of interest>"
   echo "             Specify time of interest in ms."
   echo
   echo "             -avg <smoothing time>"
   echo "             Smooth data over interval in ms."
   echo
   echo "             -trout <TRANSP output directory>"
   echo "             Specify a non-default directory name for transp2gyro output."
   echo
   echo "             -trhelp"
   echo "             Detailed help message on transp2gyro."
   echo " "
   echo " input.profiles MANIPULATION MODE"
   echo " "
   echo "              -d [manipulate_options]"
   echo " "
   echo "              -d -comp [plasma_composition_options]"
   echo " "
   echo "              -modhelp"
   echo "              Detailed help message on the input.profiles manipulation mode"
   echo " "
   echo "      manipulate_options:"
   echo " "
   echo "              -inf1 <input file 1>"
   echo "              Default: input.profiles"
   echo " "
   echo "              -inf2 <input file 2>"
   echo "              Default: input.profiles"
   echo " "
   echo "              -outf <output file>"
   echo "              Default: input.profiles_mod"
   echo " "
   echo "              -scal <scaling factor>"
   echo "              Default: 1.0 "
   echo " "
   echo "              -pin <input profile>"
   echo "              Name of profile, as it appears in an input.profiles file"
   echo "              Default: ni_1"
   echo " "
   echo "              -pout <output profile>"
   echo "              Name of profile, as it appears in an input.profiles file"
   echo "              Default: ni_1"
   echo " "
   echo "       plasma_composition_options:"
   echo " "
   echo "              -inf1 <input file 2>"
   echo "              Default: input.profiles"
   echo " "
   echo "              -outf <output file>"
   echo "              Default: input.profiles_mod"
   echo " "
   echo "              -Z1 <ion1 charge>"
   echo "              Default: 1 (Hydrogen isotope)"
   echo "              -Z2 <ion2 charge>"
   echo "              Default: 6 (Carbon)"
   echo "              -Z3 <ion3 charge>"
   echo "              Default: 2 (Helium)"
   echo " "
   echo "              -Zeff <effective ion charge>"
   echo "              Default: 2.0"
   echo " "
   echo "              -n3n1 <ni_3/ni_1>"
   echo "              Default: 0.0 (No third ion species)"
   echo
   echo " "
   echo "Plotting Options"
   echo
   echo "              -plot <directory> <dim1> <dim2> <par1> <par2> ... <parN>"
   echo "              Specify directory containing file input.profiles.  Then specify"
   echo "              number of plots in x and y direction respectively in each window."
   echo "              Then specify parameters to be plotted.  Type -options after"
   echo "              <directory> to see available parameters."
   echo
   echo "              -fluxplot <directory> <type> <r1> <r2> <N>"
   echo "              Specify directory containing file input.profiles.geo and"
   echo "              input.profiles.  Then specify type of flux plot: -m for Miller-"
   echo "              -type equilibrium, -f for Fourier series equilibrium, and -c to"
   echo "              compare the two fits.  Then specify desired radius from 0 to 1."
   echo "              Optionally, specify another radius from 0 to 1 and an integer"
   echo "              to see fits of N radii between the two given radii."
   echo
   echo " "
   echo "EXAMPLES:"
   echo " "
   echo "    profiles_gen -i myfile" 
   echo "    profiles_gen -i myfile.nc"
   echo "    profiles_gen -i myfile.cdf -r 1,3,2,5,4"
   echo "    profiles_gen -i myfile -e3 myerfile"
   echo "    profiles_gen -m mapfile -n 'this is a test' myfile.astra"
   echo "    profiles_gen -transp"
   echo "    profiles_gen -tok NSTX -year 07 -shot 124948A01 -time 250 -avg 2"
   echo "    profiles_gen -i input.profiles -vgen_e 2 -vgen_v 1 -vgen_in DC -vgen_x 2"
   echo "    profiles_gen -i input.profiles -vgen_e 2 -vgen_v 1 -vgen_in HDC -vgen_x 3"
   echo "    profiles_gen -plot ~/treg01 ne ni_1 ni_2"
   echo "    profiles_gen -fluxplot . -c 0 1 .02"
   echo 
   echo " (1) Typical usage for DIII-D plasmas with iterdbfile only (2 steps)"
   echo "     NEO will generate Er and all velocities:"
   echo "  "
   echo "    profiles_gen -i iterdb -g gfile"
   echo "    profiles_gen -i input.profiles -vgen_e 2 -vgen_v 1 -vgen_in DC -vgen_x 2"
   echo
   echo " (2) Typical usage for DIII-D plasmas with CER file available (2 steps)"
   echo "     NEO will take Er from CER file and generate all velocities:"
   echo "  "
   echo "    profiles_gen -i iterdb -g gfile -cer cerfile"
   echo "    profiles_gen -i input.profiles -vgen_e 4 -vgen_v 2 -vgen_in DC -vgen_x 2"
   echo " "
   echo " Examples on input.profiles manipulation:"
   echo " "
   echo "    profiles_gen -d -inf1 somedir/input.profiles -inf2 anotherdir/input.profiles -scal 0.85 -pin Te -pout Ti_2"
   echo " "
   echo "     input.profiles_mod is generated, containing the same data as" 
   echo "     'somedir/input.profiles' except that the Ti_2 profile is" 
   echo "     equal to 0.85*Te, where Te is from 'anotherdir/input.profiles'."
   echo " "
   echo " profiles_gen -d -comp -Z2 8 -Zeff 2.2 -n3n1 0.1 -outf INPUT_ox"
   echo " "
   echo "     Based on the electron density profile ni_1, ni_2 and ni_3 are "
   echo "     generated for a plasma with Zeff=2.2, Z1=1, Z2=8, Z3=4 and"
   echo "     ni_3 / ni_1 = 0.1. The new data is written in INPUT_ox"
   echo " "
   echo " "

   exit 1
fi
#--------------------------------------------------------

#=============================================================
# Define variables for flag capture
#
CONFIG=.config

FILE_FLAG=0
CER_FLAG=0
G_FLAG=0
NOGQ_FLAG=0
VERBOSE_FLAG=0
ORDER_FLAG=0
TRANSP_FLAG=0
VGEN_IN=null
VGEN_E=1
VGEN_V=2
VGEN_X=2
VGEN_FLAG=0
MODINP_FLAG=0
PLOT_FLAG=0
FLUX_FLAG=0
#=============================================================

#=============================================================
# Default ion order vector
#
ord_vec[0]=1
ord_vec[1]=2
ord_vec[2]=3
ord_vec[3]=4
ord_vec[4]=5
#=============================================================
 
#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in 

  -h) echo "1" > $CONFIG ; submit ; exit 0 ;;

  -i) shift ; FILE_FLAG=1 ; FILE="$1" ;;

  -m) shift ; ASTRA_ARG="$ASTRA_ARG -m $1" ;;

  -n) shift ; ASTRA_ARG="$ASTRA_ARG -n $1" ;;

  -cer) shift ; CER_FLAG=1 ; CER_FILE="$1" ; ITERDB_ARGS="${ITERDB_ARGS};-cer;$1" ;;
   
  -g) shift ; G_FLAG=1 ; GFILE="$1" ;;

  -V) shift ; VERBOSE_FLAG=1 ; ITERDB_ARGS="${ITERDB_ARGS};-V";;

  -nogq) shift ; NOGQ_FLAG=1 ; ITERDB_ARGS="${ITERDB_ARGS};-nogq";;

  -r) shift ; ORDER="$1" ; ORDER_FLAG=1 ; ITERDB_ARGS="${ITERDB_ARGS};-r;$1";;

  -ver) shift ; VERSION="$1" ; ITERDB_ARGS="${ITERDB_ARGS};-ver;$1";;

  -vgen_in) shift ; VGEN_IN=$1 ; ITERDB_ARGS="${ITERDB_ARGS};-vgen_in;$1";;

  -vgen_e) shift ; VGEN_E=$1  ; ITERDB_ARGS="${ITERDB_ARGS};-vgen_e;$1";;

  -vgen_v) shift ; VGEN_V=$1  ; ITERDB_ARGS="${ITERDB_ARGS};-vgen_v;$1";;

  -vgen_x) shift ; VGEN_X=$1  ; ITERDB_ARGS="${ITERDB_ARGS};-vgen_x;$1";;

  -transp) TRANSP_FLAG=1 ;;

  -tok) shift ; TRANSP_FLAG=1 ; TRANSP_ARGS="$TRANSP_ARGS -k $1" ;;

  -year) shift ; TRANSP_FLAG=1 ; TRANSP_ARGS="$TRANSP_ARGS -y $1" ;;

  -shot) shift ; TRANSP_FLAG=1 ; TRANSP_ARGS="$TRANSP_ARGS --shot $1" ;;

  -time) shift ; TRANSP_FLAG=1 ; TRANSP_ARGS="$TRANSP_ARGS --time $1" ;;

  -avg) shift ; TRANSP_FLAG=1 ; TRANSP_ARGS="$TRANSP_ARGS -a $1" ;;

  -trout) shift ; TRANSP_FLAG=1 ; TRANSP_ARGS="$TRANSP_ARGS -o $1" ;;

  -trhelp) TRANSP_FLAG=1 ; TRANSP_ARGS="$TRANSP_ARGS -h" ;;
  
  -d) MODINP_FLAG=1 ; FILE_FLAG=1 ;;
  
  -inf1) shift ; MODINP_ARGS="$MODINP_ARGS --inf1 $1" ;;
  
  -inf2) shift ; MODINP_ARGS="$MODINP_ARGS --inf2 $1" ;;
  
  -outf) shift ; MODINP_ARGS="$MODINP_ARGS --outf $1" ;;
  
  -scal) shift ; MODINP_ARGS="$MODINP_ARGS --scal $1" ;;
  
  -pin) shift ; MODINP_ARGS="$MODINP_ARGS --pin $1" ;;
  
  -pout) shift ; MODINP_ARGS="$MODINP_ARGS --pout $1" ;;
  
  -comp) MODINP_ARGS="$MODINP_ARGS --comp";; 
  
  -Z1) shift ; MODINP_ARGS="$MODINP_ARGS --Z1 $1" ;;  
  
  -Z2) shift ; MODINP_ARGS="$MODINP_ARGS --Z2 $1" ;;  
  
  -Z3) shift ; MODINP_ARGS="$MODINP_ARGS --Z3 $1" ;;  
  
  -Zeff) shift ; MODINP_ARGS="$MODINP_ARGS --Zeff $1" ;;  
  
  -n3n1) shift ; MODINP_ARGS="$MODINP_ARGS --n3n1 $1" ;;  

  -modhelp) shift ; MODINP_ARGS="$MODINP_ARGS --modhelp";;

  -plot) shift ; PLOT_FLAG=1 ; PLOT_DIR=$1 ; shift ; PLOT_STRING="$1" ; shift ; break ;;

  -fluxplot) shift ; FLUX_FLAG=1 ; FLUX_DIR=$1 ; shift ; FTYPE="$1" ; shift ; FMIN=$1 ; shift ; break ;;

  esac
  shift
done

#=============================================================

#==============================================================================
# Create requested plots:
#
if [ $PLOT_FLAG -eq 1 ]
then
  while [ $# -gt 0 ]
  do
    PLOT_STRING="$PLOT_STRING $1"
    shift
  done
  python ~/gacode/shared/python/profiles_gen_plot.py $PLOT_DIR $PLOT_STRING &
  exit 0
fi

if [ $FLUX_FLAG -eq 1 ]
then
  if [ $# -gt 0 ]
  then
    FMAX=$1
    FNUM=$2
    python ~/gacode/shared/python/profiles_gen_fluxplot.py $FLUX_DIR $FTYPE $FMIN $FMAX $FNUM &
    exit 0
  else
    python ~/gacode/shared/python/profiles_gen_fluxplot.py $FLUX_DIR $FTYPE $FMIN &
    exit 0
  fi
fi

#==============================================================================

#=============================================================
# Call transp2gyro if specified and pass it the iterdb args
# for later
if [ $TRANSP_FLAG -eq 1 ] 
then
   # Run transp2gyro
   if [ ${ITERDB_ARGS} ]
   then
       TRANSP_ARGS="${TRANSP_ARGS} --iterdb $ITERDB_ARGS"
   fi
   $PYTHON_COMMAND $TRANSP $TRANSP_ARGS
   exit
fi
#=============================================================

#=============================================================
# Call inputmanipulate.py
if [ $MODINP_FLAG -eq 1 ]
then
   $PYTHON_COMMAND $MODINPUT $MODINP_ARGS
   exit
fi
#=============================================================


#=============================================================
# Trap error from no input data file (-i)
#
if [ $FILE_FLAG -eq 0 ]
then
  echo "ERROR: Please specify an input file with -i <file>"
  exit 0 
fi

if [ -f $FILE ] &&  [ "${#FILE}" -gt 0 ]
then
   echo "INFO: Found $FILE."
else
   echo "ERROR: $FILE not found."
   exit 0
fi
#=============================================================

#=============================================================
# Manage execution of vgen
#
NEO_DIR=$GACODE_ROOT/neo

if [ $FILE == "input.profiles" ]
then

   # Create vgen work directory

   rm -rf vgen
   mkdir vgen
   cd vgen

   # Check for INPUT.v file

   if [ -f $NEO_DIR/tools/input/vgen/INPUT.v.$VGEN_IN ]
   then
     cp $NEO_DIR/tools/input/vgen/INPUT.v.$VGEN_IN input.neo
   else 
      if [ -f ../INPUT.v ]
      then
         cp ../INPUT.v input.neo
      else
         echo "ERROR: Specify ion string with -vgen_in, or create INPUT.v"
         exit 1
      fi
   fi
 
   cp ../input.profiles .
   if [ -f "../input.profiles.geo" ]
       then
       cp ../input.profiles.geo .
   fi

   python $NEO_DIR/bin/neo_parse.py
   python $GACODE_ROOT/shared/bin/profile_parse.py input.profiles 
   echo "$VGEN_E"   > vgen.dat
   echo "$VGEN_V"  >> vgen.dat
   echo "$VGEN_X" >>  vgen.dat
   $NEO_DIR/tools/vgen/vgen

   if [ -f "input.profiles.new" ]
       then
       cp input.profiles.new ..
   fi

   exit 0
      
else

   # Clean old input.profiles* data.

   echo "INFO: Removing old input.profiles* files."
   rm -rf input.profiles input.profiles.*

fi 
#=============================================================

#=============================================================
# Jump to ASTRA parsing if *.astra is specified
# 
if [ "${FILE: -6}" == ".astra" ] 
then
   # Only last occurrence of "-m" option is used
   $ASTRA -o input.profiles -m $ASTRAMAP $ASTRA_ARG $FILE
   exit
fi
#=============================================================

#=============================================================
# Check for executable
#
if [ ! -f $EXEC ]
then
   echo "You must first build the executable:"
   echo " "
   echo "> cd $GYRO_DIR/tools ; make" 
   exit 1
fi
#=============================================================

#=============================================================
# Construct prgen input file ($CONFIG)
#
date > $CONFIG

# Required data file (ITERDB, PLASMASTATE, etc)
echo $FILE >> $CONFIG

# Optional CER file
if [ $CER_FLAG -eq 0 ]
then
   echo "null" >> $CONFIG
else
   echo $CER_FILE >> $CONFIG
   echo "INFO: Will merge data from $CER_FILE"
fi

# EFIT G-file
echo $G_FLAG >> $CONFIG

# Don't use gato q (-nogq) flag
echo $NOGQ_FLAG >> $CONFIG

# Verbosity
echo $VERBOSE_FLAG >> $CONFIG
#=============================================================

#==============================================================
# Run GATO here
#
if [ $G_FLAG -eq 1 ]
then
   if [ ! -f $GATO ]
   then
      echo "ERROR: You need to build the GATO executable: $ cd gato ; make"
      exit 1
   fi
   echo "INFO: Running GATO mapper to generate flux surfaces from $GFILE."
   echo "INFO: Running fluxfit to compute shape parameters from GATO mapping."
   cp $GFILE eqgta
   cp $GATO_IN ingta
   $GATO >& gato.stdout
fi
#==============================================================

#==============================================================
# Ion reordering: reset ion order if "-r" option present
#
if [ $ORDER_FLAG -eq 1 ]
then
   if [ ${#ORDER} -lt 8 ]
   then
      echo "Incomplete order vector."
      exit 1;
   fi
   ord_vec[0]=${ORDER:0:1}
   ord_vec[1]=${ORDER:2:1}
   ord_vec[2]=${ORDER:4:1}
   ord_vec[3]=${ORDER:6:1}
   ord_vec[4]=${ORDER:8:1}
fi
echo ${ord_vec[0]} ${ord_vec[1]} ${ord_vec[2]} ${ord_vec[3]} ${ord_vec[4]} >> $CONFIG
#==============================================================

#==============================================================
# MAIN: Run prgen here
#
$EXEC

if [ -f "success" ]
then
   if [ $G_FLAG -eq 1 ]
   then
      echo "DONE: Successfully wrote: input.profiles, input.profiles.geo."
   else
      echo "DONE: Successfully wrote: input.profiles." 
   fi
else
   echo "ERROR: Something went wrong in creation of input.profiles :("
   echo "** Try running with -V option."
fi

#==============================================================
# Final cleanup:
#  Remove configuration files, output files, etc.
#
rm -f egta ingta nova.*

if [ $VERBOSE_FLAG -eq 0 ]
then
   rm -f $CONFIG fluxfit.* grid.dat eqgta o1gta gato.stdout success
else
   mv o1gta gato.o1gta
   mv eqgta gato.eqgta
   mv grid.dat gato.grid.dat
fi
#==============================================================