#!/bin/bash
#------------------------------------------------------
# gacode_qsub
#
# PURPOSE:
#  High-level management of batch submission
#--------------------------------------------------------

#=============================================================
# Syntax validity check and help message 
#
n=$#

if [ $n -eq 0 ]
then
   echo
  echo "Usage:   gacode_qsub [options]"
  echo
  echo "         -s"
  echo "         Submit generated batch script.  Otherwise just print diagnostics."
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         [The default path is the current directory]"
  echo
  echo "         -e <simdir>" 
  echo "         Run <code> using input.<code> in <simdir>."
  echo
  echo "         -code <code>"
  echo "         <code>=tgyro,gyro,neo"
  echo
  echo "         -n <MPI tasks>" 
  echo "         Number of MPI tasks."
  echo
  echo "         -nomp <threads>" 
  echo "         Number of OpenMP threads per MPI task."
  echo
  echo "         -numa <n>" 
  echo "         NUMAs active per node."
  echo
  echo "         -mpinuma <n>" 
  echo "         MPI tasks per active NUMA."
  echo
  echo "         -queue"
  echo "         Queue name"
  echo
  echo "         -w"
  echo "         Wallclock limit (default 1:00:00)"
  echo
  echo "         -repo"
  echo "         Repository name"
  echo

  exit 1
fi
#=============================================================

#=============================================================
# Define variables for flag capture
#
CODE=null_code
SUB_FLAG=0
QUEUE=null_queue
WALLTIME=1:00:00
REPO=null_repo

# Default simulation root and gyro directory
LOCDIR=.
SIMROOT=$PWD

# Default number of cores
nmpi=1
nomp=1
numa=0
mpinuma=0
START=new

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -s) SUB_FLAG=1 ;;

  -p) shift ; SIMROOT=$1 ;;

  -code) shift ; CODE=$1 ;;

  -e) shift ; LOCDIR=$1 ; EXEC_FLAG=1 ;;

  -n) shift ; nmpi=$1 ;;

  -nomp) shift ; nomp=$1 ;;

  -numa) shift ; numa=$1 ;;

  -mpinuma) shift ; mpinuma=$1 ;;

  -start) shift ; START=$1 ;;

  -queue) shift ; QUEUE=$1 ;;

  -w) shift ; WALLTIME=$1 ;;

  -repo) shift ; REPO=$1 ;;

   *) echo "ERROR (gacode_qsub): Incorrect syntax." ; exit 1 ;;
 
  esac
  shift
done
#==============================================================

#==============================================================
# Manage paths
#
if [ "$LOCDIR" == "." ]
then
   LOCDIR=`basename $PWD`
   cd .. ; SIMROOT=$PWD
fi
SIMDIR=$SIMROOT/$LOCDIR
#=============================================================

# Extract CORES_PER_NODE and NUMAS_PER_NODE
export `grep _NODE $GACODE_ROOT/shared/install/make.inc.$GACODE_PLATFORM`
export "`grep IDENT $GACODE_ROOT/shared/install/make.inc.$GACODE_PLATFORM`"
echo "INFO: (gacode_qsub) Job layout diagnostics"
echo
echo "       identity: $IDENTITY"
echo " cores per node: $CORES_PER_NODE"
echo " numas per node: $NUMAS_PER_NODE"
echo
. $GACODE_ROOT/shared/bin/gacode_mpi_tool
echo " cores requested         : $cores_requested"
echo " cores used              : $cores_used"
echo " total MPI tasks         : $nmpi"
echo " MPI tasks/node          : $mpinode"
echo " OpenMP threads/MPI task : $nomp"
echo " MPI tasks per numa node : $mpinuma"
echo
. $GACODE_ROOT/shared/qsub/qsub.$GACODE_PLATFORM

if [ $SUB_FLAG -eq 0 ] ; then
   # Query NERSC repositories
    if hash getnim 2> /dev/null; then
       echo
       echo "Your repositories"
       getnim -U `whoami`
    fi
    
    # Print proposed batch file 
    echo
    echo " batch file:"
    echo "-----------------------------------------------"
    cat $bfile
    echo "-----------------------------------------------"
    
else
    # Submit batch file
    qsub $bfile
fi
    

    

