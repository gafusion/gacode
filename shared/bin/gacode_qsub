#!/bin/bash
#------------------------------------------------------
# gacode_qsub
#
# PURPOSE:
#  High-level management of batch submission
#--------------------------------------------------------

#=============================================================
# Syntax validity check and help message 
#
n=$#

if [[ $n -eq 0 ]]
then
   echo
  echo "Usage:   gacode_qsub [options]"
  echo
  echo "         -s"
  echo "         Submit generated batch script.  Otherwise just print diagnostics."
  echo
  echo "         -nologin"
  echo "         Remove -l bash option from generated batch script (depends on GACODE_PLATFORM)."
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         [The default path is the current directory]"
  echo
  echo "         -e <simdir>" 
  echo "         Run <code> using input.<code> in <simdir>."
  echo
  echo "         -code <code>"
  echo "         <code>=tgyro,gyro,neo"
  echo
  echo "         -n <MPI tasks>" 
  echo "         Number of MPI tasks."
  echo
  echo "         -nomp <threads>" 
  echo "         Number of OpenMP threads per MPI task."
  echo
  echo "         -numa <n>" 
  echo "         NUMAs active per node."
  echo
  echo "         -mpinuma <n>" 
  echo "         MPI tasks per active NUMA."
  echo
  echo "         -mem <n>[unit]" 
  echo "         -mem-per-cpu <n>[unit]" 
  echo "         Memory required per node or per cpu, resp."
  echo "         Default unit MB. Slurm recognizes [K|M|G|T]"
  echo "         No space beween number and unit."
  echo "         Precedence is User then -mem"
  echo "         (default set in platform/qsub/qsub.<PLATFORM>)."
  echo
  echo "         -queue"
  echo "         Queue name"
  echo
  echo "         -w"
  echo "         Wallclock limit (default 0:59:00)"
  echo
  echo "         -repo"
  echo "         Repository name"
  echo

  exit 1
fi
#=============================================================

#=============================================================
# Define variables for flag capture with defaults
#
user=`whoami`
CODE=cgyro
SUB_FLAG=0
NO_LOGIN=0
QUEUE=null_queue
WALLTIME=0:59:00
if hash getnim 2> /dev/null; then
   # NERSC
   x=`getnim -U $user -D`
   y=($x)
   REPO=${y[0]}
elif hash showusage 2> /dev/null; then
   # ORNL
   x=`showusage`
   for item in $x
   do
      if [[ $item == *"fus"* ]] ; then
         REPO=$item
      fi
   done
else
   REPO=null_repo
fi

# Default simulation root and gyro directory
LOCDIR=.
SIMROOT=$PWD

# Default number of cores
nmpi=1
nomp=1
numa=0
mpinuma=0

#Default Memory Per Node
MEMPERNODE=
MEMPERCPU=

#=============================================================
# Parse command line options
#
while [[ $# -gt 0 ]] ; do
  case "$1" in

  -s) SUB_FLAG=1 ;;

  -nologin) NO_LOGIN=1 ;;

  -p) shift ; SIMROOT=$1 ;;

  -code) shift ; CODE=$1 ;;

  -e) shift ; LOCDIR=$1 ; EXEC_FLAG=1 ;;

  -n) shift ; nmpi=$1 ;;

  -nomp) shift ; nomp=$1 ;;

  -numa) shift ; numa=$1 ;;

  -mem) shift ; MEMPERNODE=$1 ;;

  -mem-per-cpu) shift ; MEMPERCPU=$1 ;;

  -mpinuma) shift ; mpinuma=$1 ;;

  -queue) shift ; QUEUE=$1 ;;

  -w) shift ; WALLTIME=$1 ;;

  -repo) shift ; REPO=$1 ;;

   *) echo "ERROR (gacode_qsub): Incorrect syntax." ; exit 1 ;;
 
  esac
  shift
done

#==============================================================
# Resolve double specification of memory
#
if [[ -n $MEMPERNODE && -n $MEMPERCPU ]]; then
  echo "WARNING: Both -mem and -mem-per-cpu specified."
  echo "Applying Precedence -mem=$MEMPERNODE."
  MEMPERCPU=
fi

#==============================================================
# Manage paths
#
if [ "$LOCDIR" == "." ]
then
   LOCDIR=`basename $PWD`
   cd .. ; SIMROOT=$PWD
fi
SIMDIR=$SIMROOT/$LOCDIR
#=============================================================

# Manage execution on ORNL SUMMIT
if [[ $GACODE_PLATFORM == SUMMI* ]]; then
    . $GACODE_ROOT/platform/qsub/qsub.$GACODE_PLATFORM
    cat $SIMDIR/batch.src
    $GACODE_ROOT/platform/exec/exec.$GACODE_PLATFORM $SIMDIR $nmpi $CODE 0 1 $mpinuma 
    exit 0
fi

echo $SIMDIR
# Extract CORES_PER_NODE and NUMAS_PER_NODE
export `grep _NODE $GACODE_ROOT/platform/build/make.inc.$GACODE_PLATFORM`
export "`grep IDENT $GACODE_ROOT/platform/build/make.inc.$GACODE_PLATFORM`"
echo "INFO: (gacode_qsub) Job layout diagnostics"
echo
echo "       identity: $IDENTITY"
echo " cores per node: $CORES_PER_NODE"
echo " numas per node: $NUMAS_PER_NODE"
echo
. $GACODE_ROOT/shared/bin/gacode_mpi_tool
echo " cores requested         : $cores_requested"
echo " cores used              : $cores_used"
echo " total MPI tasks         : $nmpi"
echo " MPI tasks/node          : $mpinode"
echo " OpenMP threads/MPI task : $nomp"
echo " MPI tasks per numa node : $mpinuma"
echo
. $GACODE_ROOT/platform/qsub/qsub.$GACODE_PLATFORM

# Some GACODE_PLATFORM files use the --login bash option (-l)
# This will not preserve user-defined run envs on these machines.
# Option to remove -l by in-place editing on the batch file using sed
if [[ $NO_LOGIN -eq 1 ]] ; then
    if [ $(head -n 1 $bfile | grep -c '\-l') -gt 0 ] ; then
       sed -i '1 s/:*-l\s*//' $bfile
    fi
fi

if [[ $SUB_FLAG -eq 0 ]] ; then
    # Query NERSC/ORNL repositories
    if hash getnim 2> /dev/null; then
       echo
       echo "Your repositories"
       getnim -U $user
    elif hash showusage 2> /dev/null; then
       echo
       echo "Your repositories"
       x=`showusage`
       for item in $x
       do
          if [[ $item == *"fus"* ]] ; then
             echo $item
          fi
       done
    fi
    
    # Print proposed batch file 
    echo
    echo " batch file:"
    echo "-----------------------------------------------"
    cat $bfile
    echo "-----------------------------------------------"
    
else
    # Submit batch file
    if hash sbatch 2> /dev/null ; then
       sbatch $bfile 
    elif hash qsub 2> /dev/null ; then
       qsub $bfile
    elif hash bsub 2> /dev/null ; then
       bsub $bfile
    else
       echo "ERROR: (gacode_qsub) No batch command recognized."
    fi 
fi
