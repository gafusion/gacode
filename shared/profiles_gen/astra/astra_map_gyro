#! /usr/bin/env python

"""Translation table from ASTRA output name INPUT_profiles name for GYRO.

   All variable names in this file correspond to data headers for the GYRO INPUT_profiles
    file. Each of these is a dictionary with any of the following keys:
    - empty:     (no keys) in this case the variable takes on the default value (given in
                  the 'INPUT_profiles_defaults' dictionary in 'astra2gyro.py').
    - 'astra':   data supplied in the astra data file; the value of this key corresponds to
                  the name of the header in the astra data file to use.
    - 'override': the value of this key is the data to use. Scalar items (such as 'BT_EXP')
                   must have a scalar value; vector data (such as 'q') can supply either a
                   scalar (in which case that scalar value will be used at each radial
                   location) or a list of scalar values, equal in length to the number of
                   radial gridpoints in the astra data file.

   If the dictionary contains both an 'astra' and an 'override' key, the value of the
    'override' key is used. For vector data, an optional key for use with the 'astra' key
    is 'index'. Its value must be an integer, corresponding to the radial grid point to
    use for the value at all radial locations. This is helpful for flattening the profile.

   Notes:
   - Geometry: ASTRA uses a slightly different 2-moment description of the
               flux-surface geometry: (here a = AMETR)
               R(a,theta) = R0 + SHIF(a) + a*(cos(theta)-TRIA(a)*sin(theta)^2)
               Z(a,theta) = SHIV(a) + a*ELON(a)*sin(theta)
               This is equivalent to the GYRO geometry is TRIA << 1.

   - variable names: The variable names in this file all correspond to variables in the
                     GYRO INPUT_profiles file. If for some reason you want to add other
                     variable or function definitions to this file, their names must be added
                     as strings to the 'nonmap' list.

"""
"""@package astra_map_gyro
   @author Erik Granstedt
   @date 2009-06-30
"""

nonmap=[]                       # all variable names defined in this file that don't correspond
                                # to GYRO INPUT_profiles data names must be added to this list


# scalar data
BT_EXP={'astra':'B'}                     # [Tesla], reference B field
N_EXP={}                                 # number of experimental radial gridpoints
ARHO_EXP={'astra':'rhoa','index':0}      # [m] rho(a) (ie. rho at separatrix); defines rho_hat; Astra 'ROC'

# vector data block 1
rho={'astra':'rhoh'}                     # rho_hat = rho(r)/rho(a), should span [0,1] using N_EXP points
                                         # Astra 'RHO(a)/ROC'
rmin={'astra':'a'}                       # [m], generalized minor radius, r; Astra 'AMETR'
rmaj={'astra':'rmaj'}                    # [m], generalized major radius R0(r); Astra 'RTOR+SHIF(a)'
q={'astra':'q'}                          # safety factor; Astra '1/MU'
kappa={'astra':'kapp'}                   # plasma elongation; Astra 'ELON'

# astra data block 2
delta={'astra':'delt'}                  # triangularity; Astra approx 'sin(TRIA)' for TRIA << 1
te={'astra':'T_e'}                       # [keV], electron temperature; Astra 'TE'
ne={'astra':'n_e'}                       # [10^{19} m^{-3}], electron density; Astra 'NE'
z_eff={'astra':'Zeff'}                   # effective ion charge; Astra 'ZEF'
er={'astra':'Er'}                        # [kV/m], radial electric field; Astra 'ER'

# vector data block 3
flow_mom={}                     # [Nt-m], The convected and conducted angular momentum flow.
 # The rate of change of angular momentum within a flux surface has the units of a torque.
 # The transp variable is VOLINT(MVISC+MCOND). 

pow_e={'astra':'TG_e'}                        # [MW], The convected and conducted electron energy flow.
 # This is the electron heating power, corrected for the ion-electron energy transfer, the radiated power, and the rate of change of the energy stored by the electrons.
 # The transp variable is VOLINT(PCONV+PCOND)*E-6
 # Astra 'QE+1.6e-3*GN2E*TE*QN (manual p.83)

pow_i={'astra':'TG_i'}                        # [MW], The convected and conducted electron energy flow.
 # This is the ion heating power, corrected for the ion-electron energy transfer, the net charge-exchange loss power, and the rate of change of the energy stored by the ions.
 # The transp variable is VOLINT(PCNVE+PCNDE)*E-6
 # Astra 'QI+1.6e-3*NI/NE*GN2I*TI*QN (manual p.83)

pow_ei={'astra':'peic'}                       # [MW], volume-integral of electron-ion energy transfer rate
                                # The transp variable is VOLINT(QIE)*E-6; Astra 'QEICL' ? 
zeta={}                         # plasma squareness


# vector data block 4
flow_beam={}                    # 
flow_wall={}                    #  
zmag={'astra':'shiv'}           # [m], Flux-surface elevation, Z_0; Astra 'SHIV'

# vector data block 5
ni_1={'astra':'n_i'}               # [10^{19} m^{-3}], ion species 1 density
ni_2={}                            # [10^{19} m^{-3}], ion species 2 density
ni_3={}                            # [10^{19} m^{-3}], ion species 3 density
ni_4={}                            # [10^{19} m^{-3}], ion species 4 density
ni_5={}                            # [10^{19} m^{-3}], ion species 5 density

# vector data block 6
ti_1={'astra':'T_i'}              # [keV], ion species 1 temperature
ti_2={}                           # [keV], ion species 2 temperature
ti_3={}                           # [keV], ion species 3 temperature
ti_4={}                           # [keV], ion species 4 temperature
ti_5={}                           # [keV], ion species 5 temperature

# vector data block 7
vtor_1={'astra':'vtor'}         # [m/s], ion species 1 toroidal velocity; Astra 'VTOR'
vtor_2={}                       # [m/s], ion species 2 toroidal velocity, v_{phi,i2}
vtor_3={}                       # [m/s], ion species 3 toroidal velocity, v_{phi,i3}
vtor_4={}                       # [m/s], ion species 4 toroidal velocity, v_{phi,i4}
vtor_5={}                       # [m/s], ion species 5 toroidal velocity, v_{phi,i5}

# vector data block 7
vpol_1={'astra':'vpol'}         # [m/s], ion species 1 poloidal velocity; Astra 'VPOL'
vpol_2={}                       # [m/s], ion species 2 poloidal velocity, v_{phi,i2}
vpol_3={}                       # [m/s], ion species 3 poloidal velocity, v_{phi,i3}
vpol_4={}                       # [m/s], ion species 4 poloidal velocity, v_{phi,i4}
vpol_5={}                       # [m/s], ion species 5 poloidal velocity, v_{phi,i5}




