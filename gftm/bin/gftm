#!/bin/bash
#=============================================================
# gftm
#
# PURPOSE:
#  Top-level script controlling execution of GFTM.
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
  echo
  echo "Usage:   gftm [options]"
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         [The default path is the current directory]" 
  echo
  echo "EXECUTE MODE (single core)"
  echo
  echo "         -e <simdir>" 
  echo "         Run GFTM using input.gftm data in <simdir>."
  echo
  echo "         -n <MPI tasks>" 
  echo "         Number of MPI tasks."
  echo
  echo "INITIALIZE ONLY"
  echo
  echo "         -i <simdir>" 
  echo "         Process input.gftm only."
  echo
  echo "REGRESSION TESTING"
  echo
  echo "         -rc <simdir>"
  echo "         Check <simdir> for regression pass/fail."
  echo
  echo "         -r"
  echo "         Run full regression suite."
  echo 
  echo "         -reset"
  echo "         Reset regression data."
  echo 
  echo "TEMPLATE GENERATION"
  echo
  echo "         -g"
  echo "         List available simulation templates."
  echo
  echo "         -g <template>"
  echo "         Copy <template> into simulation path."
  echo
  echo "UTILITIES"
  echo
  echo "         -h" 
  echo "         Version and platform information."
  echo
  echo "         -c" 
  echo "         Clean out current directory."

  exit 1
fi
#=============================================================
 
#=============================================================
# Define variables for flag capture
#
RUNBASE='out.gftm.run'
VERBASE='out.gftm.version'
#
SIMROOT=$PWD
GLFTM_DIR=$GACODE_ROOT/gftm
# Parallelization parameters
NPROC=1
NOMP=1
NUMA=0
MPINUMA=0
# Execute/test mode flags
EXEC_FLAG=0
INIT_FLAG=0
GENERATE_FLAG=0
REGRESS=0
REGRESS_RESET=0
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -e) shift ; LOCDIR=$1 ; EXEC_FLAG=1 ;;

  -n) shift ; NPROC=$1 ;;

  -g) shift ; LOCDIR=$1 ; GENERATE_FLAG=1 ;;

  -i) shift ; LOCDIR=$1 ; INIT_FLAG=1 ;;

  -r) REGRESS=1 ;;

  -rc) shift ; LOCDIR=$1 ; REGRESS=2 ;;

  -reset) REGRESS_RESET=1 ;;

  -c) rm -f out.* ; exit 0 ;;

  -h) gftm_version_message ; exit 0 ;;

  *) echo "ERROR: incorrect gftm syntax." ; exit 1 ;;
 
  esac
  shift
done
#=============================================================

if [ "$LOCDIR" == "." ]
then
   SIMDIR=$PWD
   cd .. ; LOCDIR=$PWD
else
   SIMDIR=$SIMROOT/$LOCDIR
fi

#============================================================
# Check for inconsistent flags:
if [ $REGRESS -eq 0 ] ; then
   REGRESS_FLAG=0
else
   REGRESS_FLAG=1
fi
FLAG_SUM=$[$EXEC_FLAG+$GENERATE_FLAG+$REGRESS_FLAG+$INIT_FLAG]
if [ $FLAG_SUM -gt 1 ]
then
   echo "ERROR: Can only specify one of -e, -t, -g, -r, -i"
   exit 1
fi
#============================================================

#============================================================
# Generate simdir if -g set, then exit.
#
if [ $GENERATE_FLAG -eq 1 ]
then
   if [ ! -f "${GFTM_DIR}/tools/input/$LOCDIR/input.gftm" ]
   then
      cat ${GFTM_DIR}/tools/input/simdir_list
   else
      cp -ai ${GFTM_DIR}/tools/input/$LOCDIR $SIMDIR
   fi
   exit 0
fi
#============================================================

#============================================================
# Do the regression test if -r set, then exit.
#
if [ $REGRESS -eq 1 ] 
then 
   gacode_reg_do 1 1 $REGRESS_RESET gftm 1e-5
   exit 0
fi
if [ $REGRESS -eq 2 ] 
then 
   gacode_reg $LOCDIR $GACODE_ROOT/gftm/tools/input out.gftm.prec 1e-6
   exit 0
fi
#============================================================

#============================================================
# Everything else must be done in $SIMDIR; so ensure existence 
# of $SIMDIR (needed at this point) and go there: 
#
if ! gftm_sim_warn $SIMDIR
then
   exit 1 
fi 

cd $SIMDIR
#============================================================

#==========================================================
# echo number of tasks, then parse INPUT
#
echo "[Parsing data in input.gftm]" > $RUNBASE

python $GFTM_DIR/bin/gftm_parse.py >> $RUNBASE
if [ $? -eq 1 ] 
then
   cat $RUNBASE
   exit 1
fi
#==========================================================

#===========================================================
# RUN GFTM
#

# Execute:
if [ $EXEC_FLAG -eq 1 ]
then

   # Version stamp:
   echo `gacode_getversion` > $VERBASE
   echo $GACODE_PLATFORM >> $VERBASE
   date >> $VERBASE

   if [ $NPROC -eq 1 ]
   then
     echo 'no mpi'  >> $RUNBASE
     cd $SIMDIR
     export OMP_NUM_THREADS=$NOMP
     $GFTM_DIR/src/gftm >> $RUNBASE
   else
     $GACODE_ROOT/platform/exec/exec.$GACODE_PLATFORM \
     $SIMDIR $NPROC $GFTM_DIR/src/gftm_mpi $NOMP $NUMA $MPINUMA >> $RUNBASE
   fi
   gacode_printversion GFTM

   cat $RUNBASE

fi
#===========================================================
