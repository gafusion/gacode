#!/bin/bash
#=============================================================
# cgyro
#
# PURPOSE:
#  Top-level script controlling execution of VGEN.
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
  echo
  echo "Usage:   vgen [options]"
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         The default path is \$VGEN_DIR/sim."
  echo
  echo "EXECUTE MODE"
  echo
  echo "         -e <simdir>" 
  echo "         Run VGEN using INPUT data in <simdir>."
  echo
  echo "         -n <MPI tasks>" 
  echo "         Number of MPI tasks."
  echo
  echo "         -nomp <MPI tasks>" 
  echo "         Number of MPI tasks."
  echo
  echo "             -in <string of ion species> " 
  echo "             Choices: DC, DC_lowres, DC.revip, DCD, DHCD, HDC"
  echo "             If this is blank, input.vgen must exist."
  echo "             See"
  echo "             $VGEN_DIR/input.vgen.*"
  echo "             for examples."
  echo
  echo "             -er <val>" 
  echo "             Method to compute Er."
  echo "             1=Force balance, 2=NEO (weak rot), 3=NEO (strong rot), 4=Return given"
   echo
   echo "             -vel <val>" 
   echo "             Method to compute velocities."
   echo "             1=NEO (weak rot), 2=NEO (strong rot), 3=Return given"
   echo
   echo "             -epar <val>" 
   echo "             Flag to compute conductivity."
   echo "             0=yes, 1=no"
   echo
   echo "             -ix <index>" 
   echo "             Index of ion species to match NEO and given velocities."
   echo
   echo "             -nth <min,max>" 
   echo "             Minimum and maximum theta resolutions.  Default -nth 17,39"
  echo "         -nn"
  echo "         Use the NEO neural network instead of NEO DKE solve."
  echo
  echo "UTILITIES"
  echo
  echo "         -h" 
  echo "         Version and platform information."
  echo
  echo "         -clean" 
  echo "         Clean simulation directory."

  exit 1
fi
#=============================================================
 
#=============================================================
# Define variables for flag capture
#
SIMROOT=$PWD
VGEN_DIR=${GACODE_ROOT}/vgen
VGEN_IN=null
VGEN_ER=1
VGEN_VEL=2
VGEN_EPAR=0
VGEN_IX=2
VGEN_NTH=17,39
VGEN_NN_FLAG=0
# Default number of cores
NPROC=1
NOMP=1
NUMA=0
MPINUMA=0
# Execute/test mode flags
CLEAN_FLAG=0
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -e) shift ; LOCDIR=$1 ;;

  -n) shift ; NPROC=$1 ;;

  -nomp) shift ; NOMP=$1 ;;

  -numa) shift ; NUMA=$1 ;;

  -mpinuma) shift ; MPINUMA=$1 ;;

  -in) shift ; VGEN_IN=$1 ;;

  -er) shift ; VGEN_ER=$1 ;;

  -vel) shift ; VGEN_VEL=$1 ;;

  -ix) shift ; VGEN_IX=$1 ;;

  -epar) shift ; VGEN_EPAR=$1 ;;

  -nth) shift ; VGEN_NTH=$1 ;;

  -nn) VGEN_NN_FLAG=1 ;;

  -clean) CLEAN_FLAG=1 ;;

  *) echo "ERROR (vgen script): incorrect vgen syntax." ; exit 1 ;;
 
  esac
  shift
done
#=============================================================

if [ "$LOCDIR" == "." ]
then
   SIMDIR=$PWD
   LOCDIR=$(basename $PWD)
   cd .. ; SIMROOT=$PWD
else
   SIMDIR=$SIMROOT/$LOCDIR
   cd $SIMROOT
fi

RUN_FILE=$SIMDIR/out.vgen.run

#============================================================
# Clean up VGEN directory
#
if [ $CLEAN_FLAG -eq 1 ]
then
    echo "PUT CLEAN COMMANDS HERE"
    exit 1
fi
#============================================================

#============================================================
# Everything else must be done in $SIMDIR; so ensure existence 
# of $SIMDIR (needed at this point) and go there: 
#
if ! vgen_sim_warn $SIMDIR
then
   exit 1 
fi 

cd $SIMDIR
#============================================================


#=============================================================
# Manage execution of vgen
#
NEO_DIR=${GACODE_ROOT}/neo
VGEN_DIR=${GACODE_ROOT}/vgen
TEMPLATE_DIR=${GACODE_ROOT}/vgen/templates

echo "NN_FLAG=$VGEN_NN_FLAG" >> input.vgen
python ${VGEN_DIR}/bin/vgen_parse.py

# Determine species combination from TYPE variable
IN=`grep TYPE input.vgen.gen`
VGEN_IN=(${IN// / })

# Create/recreate vgen work directory

rm -rf vgen ; mkdir vgen ; cd vgen

# Check for template input.neo.TYPE

if [ "$VGEN_IN" == "NULL" ]
then 
    if [ -f "../input.neo" ]
    then
	cp ../input.neo input.neo
    else
	echo "ERROR: (vgen) input.neo needed with TYPE=NULL"
	exit 1
    fi

elif [ -f $TEMPLATE_DIR/input.neo.$VGEN_IN ]
then
   cp $TEMPLATE_DIR/input.neo.$VGEN_IN input.neo
else 
   echo "ERROR: (vgen) TYPE=$VGEN_IN not found"
   exit 1
fi

# Tell NEO that its being run in subroutine mode by vgen.
echo "SUBROUTINE_FLAG=1" >> input.neo 

# Copy input.profiles to simulation directory
cp ../input.profiles .
if [ -f "../input.profiles.geo" ]
then
    cp ../input.profiles.geo .
else
    echo "INFO: (profiles_gen) input.profiles.geo not found -- using EQUILIBRIUM_MODEL=2"
    echo "EQUILIBRIUM_MODEL=2" >> input.neo
fi

python $NEO_DIR/bin/neo_parse.py
python $GACODE_ROOT/profiles_gen/bin/profile_parse.py input.profiles 

# Construct vgen.dat
cp ../input.vgen.gen vgen.dat

# Launch parallel vgen executable
$GACODE_ROOT/platform/exec/exec.$GACODE_PLATFORM \
    $SIMDIR/vgen $NPROC $VGEN_DIR/src/vgen $NOMP $NUMA $MPINUMA

if [ -f "input.profiles.new" ]
then
       > input.profiles
       DATESTAMP=`date`
       # Manage generated input.profiles and print diagnistics
       
       echo "# VGEN: The file modified by VGEN on $DATESTAMP" >> input.profiles
       if [ "$VGEN_ER" == "1" ] ; then 
          echo "# VGEN: omega0 computed by force balance (-er 1)" >> input.profiles 
       fi
       if [ "$VGEN_ER" == "2" ] ; then 
          echo "# VGEN: omega0 computed by NEO with weak rotation (-er 2)" >> input.profiles
          echo "# VGEN: matched toroidal velocity of species $VGEN_IX" >> input.profiles
       fi
       if [ "$VGEN_ER" == "4" ] ; then 
          echo "# VGEN: omega0 unchanged (-er 4)" >> input.profiles
       fi
       if [ "$VGEN_VEL" == "1" ] ; then 
          echo "# VGEN: velocities computed by NEO with weak rotation (-vel 1)" >> input.profiles
       fi
       if [ "$VGEN_VEL" == "2" ] ; then 
          echo "# VGEN: velocities computed by NEO with strong rotation (-vel 2)" >> input.profiles
       fi

       cat input.profiles.new >> input.profiles
       echo "INFO: (profiles_gen) VGEN created vgen/input.profiles [new data]"
       echo "INFO: (profiles_gen) VGEN created vgen/input.profiles.extra    [diagnostics]"
       echo "INFO: (profiles_gen) VGEN created vgen/input.profiles.jbs      [boostrap current]"
   fi

   exit 0
fi
#=============================================================
