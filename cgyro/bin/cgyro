#!/bin/bash
#=============================================================
# cgyro
#
# PURPOSE:
#  Top-level script controlling execution of CGYRO.
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
  echo
  echo "Usage:   cgyro [options]"
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         The default path is \$CGYRO_DIR/sim."
  echo
  echo "TEST MODE"
  echo
  echo "         -t <simdir>"
  echo "         Sanity test for INPUT data in <simdir>."
  echo
  echo "EXECUTE MODE"
  echo
  echo "         -e <simdir>"
  echo "         Use input data in <simdir>."
  echo
  echo "         -n <MPI tasks>"
  echo "         Number of MPI tasks."
  echo
  echo "         -nomp <threads>"
  echo "         Number of OpenMP threads per MPI task."
  echo
  echo "         -numa <n>"
  echo "         NUMAs active per node."
  echo
  echo "         -mpinuma <n>"
  echo "         MPI tasks per active NUMA."
  echo
  echo "REGRESSION TESTING"
  echo
  echo "         -r"
  echo "         Run full regression suite."
  echo
  echo "         -rs <case>"
  echo "         Run specified regression case."
  echo
  echo "         -reset"
  echo "         Reset regression data."
  echo
  echo "TEMPLATE GENERATION"
  echo
  echo "         -g"
  echo "         List available simulation templates."
  echo
  echo "         -g <template>"
  echo "         Copy <template> into simulation path."
  echo
  echo "UTILITIES"
  echo
  echo "         -h"
  echo "         Version and platform information."
  echo
  echo "         -clean"
  echo "         Clean simulation directory."
  echo
  echo "         -compress"
  echo "         Replicate directory, but without restart or nonstandard files."
  echo
  echo "         -bin"
  echo "         Map old-style ASCII data to binary files."
  echo
  echo "         -cbin"
  echo "         Remove old-style ASCII files."
  echo
  echo "         -globalmap"
  echo "         Create global data mapping file."
  echo "         NOTE: requries setting -rhos <rho/a>"

  exit 1
fi
#=============================================================

#=============================================================
# Define variables for flag capture
#
SIMROOT=$PWD
CGYRO_DIR=$GACODE_ROOT/cgyro
# Default number of cores
NPROC=1
NOMP=1
NUMA=0
MPINUMA=0
# Execute/test mode flags
TEST_FLAG=0
GENERATE_FLAG=0
REGRESS_FLAG=0
CLEAN_FLAG=0
COMPRESS_FLAG=0
BIN_FLAG=0
CBIN_FLAG=0
RESET=0
INIT_FLAG=0
GLOBALMAP_FLAG=0
HELP_TAG=null
RHOS=0.002
SCASE=
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -e) shift ; LOCDIR=$1 ;;

  -t) shift ; LOCDIR=$1 ; TEST_FLAG=1 ;;

  -i) shift ; LOCDIR=$1 ; INIT_FLAG=1 ;;

  -n) shift ; NPROC=$1 ;;

  -nomp) shift ; NOMP=$1 ;;

  -numa) shift ; NUMA=$1 ;;

  -mpinuma) shift ; MPINUMA=$1 ;;

  -g) shift ; LOCDIR=$1 ; GENERATE_FLAG=1 ;;

  -r) REGRESS_FLAG=1 ;;

  -rs) REGRESS_FLAG=1 ; shift ; SCASE=$1 ;;

  -reset) RESET=1 ;;

  -h) gacode_printversion CGYRO ; exit 0 ;;

  -help) shift ; HELP_TAG=$1 ;;

  -clean) CLEAN_FLAG=1 ;;

  -compress) COMPRESS_FLAG=1 ;;

  -bin) BIN_FLAG=1 ;;

  -cbin) CBIN_FLAG=1 ;;

  -globalmap) GLOBALMAP_FLAG=1 ;;

  -rhos) shift ; RHOS=$1 ;;

  *) echo "ERROR (cgyro script): unknown option $1." ; exit 1 ;;

  esac
  shift
done
#=============================================================

if [ "$LOCDIR" == "." ]
then
   SIMDIR=$PWD
   cd .. ; LOCDIR=$PWD
else
   SIMDIR=$SIMROOT/$LOCDIR
fi

#============================================================
# Check for inconsistent flags:
FLAG_SUM=$[ $EXEC_FLAG + $TEST_FLAG + $GENERATE_FLAG
                       + $REGRESS_FLAG + $INIT_FLAG ]
if [ $FLAG_SUM -gt 1 ]
then
   echo "ERROR: Can only specify one of -e, -t, -i, -g, -r"
   exit 1
fi
#============================================================

#============================================================
# compress option
if [ $COMPRESS_FLAG -eq 1 ]
then
    cgyro_compress $SIMDIR $LOCDIR
    exit 1
fi
#============================================================

#============================================================
# Binary option
if [ $BIN_FLAG -eq 1 ]
then
    EXEC="python $GACODE_ROOT/cgyro/bin/cgyro_t2b.py"
    $EXEC out.cgyro.kxky_phi    bin.cgyro.kxky_phi
    $EXEC out.cgyro.kxky_n      bin.cgyro.kxky_n
    $EXEC out.cgyro.kxky_e      bin.cgyro.kxky_e
    $EXEC out.cgyro.kxky_flux_e bin.cgyro.kxky_flux_e
    $EXEC out.cgyro.kxky_flux_n bin.cgyro.kxky_flux_n
    $EXEC out.cgyro.ky_flux     bin.cgyro.ky_flux
    $EXEC out.cgyro.lky_flux_n  bin.cgyro.lky_flux_n
    $EXEC out.cgyro.lky_flux_e  bin.cgyro.lky_flux_e
    $EXEC out.cgyro.lky_flux_v  bin.cgyro.lky_flux_v
    $EXEC out.cgyro.phib        bin.cgyro.phib
    $EXEC out.cgyro.aparb       bin.cgyro.aparb
    $EXEC out.cgyro.bparb       bin.cgyro.bparb
    $EXEC out.cgyro.freq        bin.cgyro.freq
    $EXEC out.cgyro.geo         bin.cgyro.geo
    exit 0
fi
if [ $CBIN_FLAG -eq 1 ]
then
    EXEC="$GACODE_ROOT/cgyro/bin/cgyro_trm"
    $EXEC cgyro.kxky_phi
    $EXEC cgyro.kxky_n
    $EXEC cgyro.kxky_e
    $EXEC cgyro.kxky_flux_e
    $EXEC cgyro.kxky_flux_n
    $EXEC cgyro.ky_flux
    $EXEC cgyro.lky_flux_n
    $EXEC cgyro.lky_flux_e
    $EXEC cgyro.lky_flux_v
    $EXEC cgyro.phib
    $EXEC cgyro.aparb
    $EXEC cgyro.bparb
    $EXEC cgyro.freq
    $EXEC cgyro.geo
    exit 0
fi
#============================================================

#============================================================
# Generate simdir if -g set, then exit.
#
if [ $GENERATE_FLAG -eq 1 ]
then
   if [ ! -f "${CGYRO_DIR}/tools/input/$LOCDIR/input.cgyro" ]
   then
      cat ${CGYRO_DIR}/tools/input/simdir_list
   else
      cp -ai ${CGYRO_DIR}/tools/input/$LOCDIR $SIMDIR
   fi
   exit 0
fi
#============================================================

#============================================================
# Do the regression test if -r set, then exit.
#
if [ $REGRESS_FLAG -eq 1 ]
then
   N2=$[ NPROC / 2 ]
   if [ $[ NPROC - 2 * N2 ] -eq 1 ]
   then
      echo "ERROR: (CGYRO) For regression test, number of processors must be multiple of 2." 
      exit 1
   fi
   # NOMP=1 RESET=0
   gacode_reg_do $NPROC $NOMP $RESET cgyro 1e-6 $SCASE
   exit 0
fi
#============================================================

#============================================================
# Everything else must be done in $SIMDIR; so ensure existence
# of $SIMDIR (needed at this point) and go there:
#
if ! gacode_sim_warn $SIMDIR
then
   exit 1
fi

cd $SIMDIR
#============================================================

#============================================================
# Global map option
if [ $GLOBALMAP_FLAG -eq 1 ]
then
    echo "$RHOS" > input.globalmap
    $GACODE_ROOT/cgyro/tools/globalmap/src/globalmap
    echo "INFO: (cgyro) Global mapping done."
    exit 1
fi
#============================================================

#============================================================
# Clean/new options

CFILES="out.* bin.* batch.out batch.err *~ *gen *header"

if [ $CLEAN_FLAG -eq 1 ] ; then
    rm -f $CFILES
    echo "INFO: (cgyro) Cleaned directory."
    exit 1
fi
#============================================================

#==========================================================
# echo number of tasks, then parse input.cgyro
#
python $CGYRO_DIR/bin/cgyro_parse.py
if [ $? -eq 1 ]
then
    exit 1
fi
#==========================================================

#==========================================================
# Energy mesh points
IN=`grep E_MAX input.cgyro.gen`
emax=(${IN// / })
IN=`grep N_ENERGY input.cgyro.gen`
ne=(${IN// / })
IN=`grep E_METHOD input.cgyro.gen`
emethod=(${IN// / })

if [ $emethod -eq 2 ]
then
   PREC=0
   python $GACODE_ROOT/shared/math/gauss_exp_quad.py $emax $ne $PREC
   echo "INFO: (cgyro) Generated energy mesh data"
else
   data=$GACODE_ROOT/cgyro/tools/egrid/egrid.$ne.${emax%.*}
   if [ -f $data ]
   then
      cp $data out.cgyro.egrid
   else
      echo "ERROR: (cgyro) No energy mesh data exists for this resolution."
      echo $data
      exit 1
   fi
fi
#==========================================================

#============================================================
# Init mode
if [ $INIT_FLAG -eq 1 ]
then
   python $GACODE_ROOT/cgyro/bin/cgyro_mpi_grid.py
   exit 0
fi
#============================================================

#===========================================================
# RUN CGYRO
#
# Version stamp
# NOTE: log all starts and restarts, but NOT test mode
if [ $TEST_FLAG -eq 0 ]
then
   # If there are no restart files, its safe to overwrite the log file
   PATTERN=(bin.cgyro.restar*)
   if [ ! -r ${PATTERN[0]} ]; then
      > out.cgyro.version
   fi

   # Date with custom formatting
   date_tag=`date +"%y-%b-%d %T"`
   version_tag=`gacode_getversion`
   if [ -f out.cgyro.tag ]
   then
      simtime=`tail -1 out.cgyro.tag`
      simtime=`echo $simtime`
   else
      simtime=0.0
   fi
   echo "$date_tag [$version_tag][$GACODE_PLATFORM][$simtime]" >> out.cgyro.version
else
   NUMA=1
   MPINUMA=1
fi

gacode_printversion CGYRO

if [ -f $CGYRO_DIR/src/cgyro ] ; then
   $GACODE_ROOT/platform/exec/exec.$GACODE_PLATFORM \
      $SIMDIR $NPROC "$CGYRO_DIR/src/cgyro $TEST_FLAG" $NOMP $NUMA $MPINUMA
else
   echo "ERROR: CGYRO executable not found."
   exit 1
fi
#===========================================================

#============================================================
# Print runfile if test case
if [ $TEST_FLAG -eq 1 ]
then
    python $GACODE_ROOT/shared/bin/osxlist.py out.cgyro.info
fi
#============================================================
