#!/bin/bash
#=============================================================
# cgyro
#
# PURPOSE:
#  Top-level script controlling execution of CGYRO.
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
  echo
  echo "Usage:   cgyro [options]"
  echo
  echo "         -p <path>"
  echo "         Set optional path to simulation directory."
  echo "         The default path is \$CGYRO_DIR/sim."
  echo
  echo "TEST MODE"
  echo
  echo "         -t <simdir>"  
  echo "         Sanity test for INPUT data in <simdir>."
  echo
  echo "EXECUTE MODE"
  echo
  echo "         -e <simdir>" 
  echo "         Run CGYRO using INPUT data in <simdir>."
  echo
  echo "         -n <MPI tasks>" 
  echo "         Number of MPI tasks."
  echo
  echo "REGRESSION TESTING"
  echo
  echo "         -r"
  echo "         Run full regression suite."
  echo 
  echo "TEMPLATE GENERATION"
  echo
  echo "         -g"
  echo "         List available simulation templates."
  echo
  echo "         -g <template>"
  echo "         Copy <template> into simulation path."
  echo
  echo "UTILITIES"
  echo
  echo "         -h" 
  echo "         Version and platform information."
  echo
  echo "         -clean" 
  echo "         Clean simulation directory."

  exit 1
fi
#=============================================================
 
#=============================================================
# Define variables for flag capture
#
SIMROOT=$PWD
CGYRO_DIR=$GACODE_ROOT/cgyro
# Default number of cores
NPROC=1
NOMP=1
NUMA=0
MPINUMA=0
# Execute/test mode flags
TEST_FLAG=0
GENERATE_FLAG=0
REGRESS_FLAG=0
CLEAN_FLAG=0
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -start) shift ; START=$1 ;;

  -e) shift ; LOCDIR=$1 ;;

  -t) shift ; LOCDIR=$1 ; TEST_FLAG=1 ;;

  -n) shift ; NPROC=$1 ;;

  -nomp) shift ; NOMP=$1 ;;

  -numa) shift ; NUMA=$1 ;;

  -mpinuma) shift ; MPINUMA=$1 ;;

  -g) shift ; LOCDIR=$1 ; GENERATE_FLAG=1 ;;

  -r) REGRESS_FLAG=1 ;;

  -clean) CLEAN_FLAG=1 ;;

  *) echo "ERROR (cgyro script): incorrect cgyro syntax." ; exit 1 ;;
 
  esac
  shift
done
#=============================================================

if [ "$LOCDIR" == "." ]
then
   SIMDIR=$PWD
   cd .. ; LOCDIR=$PWD
else
   SIMDIR=$SIMROOT/$LOCDIR
fi

RUN_FILE=$SIMDIR/out.cgyro.run

#============================================================
# Check for inconsistent flags:
FLAG_SUM=$[ $EXEC_FLAG + $TEST_FLAG + $GENERATE_FLAG 
                       + $REGRESS_FLAG]
if [ $FLAG_SUM -gt 1 ]
then
   echo "ERROR: Can only specify one of -e, -t, -g, -r"
   exit 1
fi
#============================================================

if [ $CLEAN_FLAG -eq 1 ]
then
    rm -f out.* batch.out batch.err *~ *gen
    exit 1
fi

#============================================================
# Generate simdir if -g set, then exit.
#
if [ $GENERATE_FLAG -eq 1 ]
then
   if [ ! -f "${CGYRO_DIR}/tools/input/$LOCDIR/input.cgyro" ]
   then
      cat ${CGYRO_DIR}/tools/input/simdir_list
   else
      cp -ai ${CGYRO_DIR}/tools/input/$LOCDIR $SIMDIR
   fi
   exit 0
fi
#============================================================

#============================================================
# Do the regression test if -r set, then exit.
#
if [ $REGRESS_FLAG -eq 1 ] 
then 
   N2=$[ NPROC / 2 ]
   if [ $[ NPROC - 2 * N2 ] -eq 1 ]
   then
      echo "ERROR: (CGYRO) For regression test, number of processors must be multiple of 2." 
      exit 1
   fi
   # NOMP=1 RESET=0
   gacode_reg_do $NPROC 1 0 cgyro 1e-6
   exit 0
fi
#============================================================

#============================================================
# Everything else must be done in $SIMDIR; so ensure existence 
# of $SIMDIR (needed at this point) and go there: 
#
if ! cgyro_sim_warn $SIMDIR
then
   exit 1 
fi 

cd $SIMDIR
#============================================================

#============================================================
# Test mode
if [ $TEST_FLAG -eq 1 ]
then
   NPROC=1
   NUMA=1
   MPINUMA=1 
   echo "TEST_FLAG=1" >> input.cgyro
fi
#============================================================

#==========================================================
# echo number of tasks, then parse input.cgyro
#
python $CGYRO_DIR/bin/cgyro_parse.py
if [ $? -eq 1 ]
then
    exit 1 
fi
#==========================================================

#============================================================
# Now remove test flag if it was added
if [ $TEST_FLAG -eq 1 ]
then
   sed -i '$d' input.cgyro 
fi
#============================================================

#==========================================================
# See if we are using experimental profiles

if [ -f input.profiles ]
then 
   python $GACODE_ROOT/shared/bin/profile_parse.py input.profiles
fi
#==========================================================

#===========================================================
# RUN CGYRO
#
# Version stamp:
echo `gacode_getversion` > out.cgyro.version 
echo $GACODE_PLATFORM >> out.cgyro.version
date >> out.cgyro.version

gacode_printversion CGYRO
  
$GACODE_ROOT/shared/exec/gyro.$GACODE_PLATFORM \
  $SIMDIR $NPROC $CGYRO_DIR/src/cgyro $NOMP $NUMA $MPINUMA
#===========================================================

#============================================================
# Print runfile if test case
if [ $TEST_FLAG -eq 1 ]
then
   cat out.cgyro.info
fi
#============================================================
