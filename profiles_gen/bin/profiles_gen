#!/bin/bash
#=============================================================
# profiles_gen
#
# PURPOSE:
#  Top-level script for conversion of raw data into GYRO 
#  format (input.gacode).
#
#  Autodetected profile formats:
#   GACODE      (input.gacode)
#   ITERDB      (ASCII iterdb)
#   ITERDBNC    (netCDF iterdb)
#   SWIM        (plasmastate)
#   CORSICA     (Corsica) 
#   PFILE       (peqdsk)
#   UFILE       (ITPA profile database format)
#
#  Autodetected geometry formats:
#   GFILE       (geqdsk equilibrium data)
#============================================================= 

#=============================================================
# EXECUTABLE AND CONFIG FILE LOCATIONS:
#
# VGEN inputs directory
VGEN_DIR=${GACODE_ROOT}/vgen/templates
# VGEN exec directory
VGEN_EXE=${GACODE_ROOT}/vgen/src
# - profiles_gen converter executable
EXEC=${GACODE_ROOT}/profiles_gen/src/prgen
# - GATO executable
GATO=${GACODE_ROOT}/gato/gato
# - OMFIT fitter script
OMFIT=${GACODE_ROOT}/python/profiles_gen/prgen_shapeprofile.py
# - locpargen executable
LOCPARGEN=${GACODE_ROOT}/profiles_gen/locpargen/locpargen
# - profiles_gen bin directory
PRGEN_BIN=${GACODE_ROOT}/profiles_gen/bin
#=============================================================

#=============================================================
# Syntax validity check and help message
#
n=$#

if [ $n -eq 0 ]
then
   echo "Usage:       profiles_gen [options]"
   echo 
   echo "             Autodetected profile formats:"
   echo "               GACODE      (input.gacode)"
   echo "               LEGACY      (legacy input.profiles)"
   echo "               ITERDB      (text iterdb)"
   echo "               ITERDBNC    (netCDF iterdb)"
   echo "               SWIM        (plasmastate)"
   echo "               PFILE       (peqdsk)"
   echo "               CORSICA     (Corsica) "
   echo "               UFILE       (ITPA profile database format)"
   echo 
   echo "             Autodetected geometry formats:"
   echo "               GFILE       (geqdsk equilibrium data)"
   echo 
   echo "             -p <path>"
   echo "             Set optional path to simulation directory."
   echo "             [The default path is the current directory]"
   echo
   echo "             -e <workdir>"
   echo "             Working directory (default is present directory)"
   echo 
   echo "             -ipccw <val>"
   echo "             Specify direction of current (as seen from above)"
   echo "             (1=counter-clockwise,-1=clockwise)"
   echo 
   echo "             -btccw <val>"
   echo "             Specify direction of toroidal field (as seen from above)"
   echo "             (1=counter-clockwise,-1=clockwise)"
   echo 
   echo "             -describe"
   echo "             Print structure of current input.gacode to screen."
   echo 
   echo "             -V"
   echo "             Verbose (for debugging; use this if you get an error)."
   echo 
   echo "Flags for gfile control (see -g option below)"
   echo 
   echo "             -noq"
   echo "             Do not use the flux and q from the EFIT gfile (default is to use them)"
   echo 
   echo "             -nop"
   echo "             Do not use the P_tot from the EFIT gfile."
   echo 
   echo "             -nfourier <int>"
   echo "             Number of Fourier modes to retain in input.gacode.geo/input.geo. (default 24)"
   echo
   echo "ITERDB Options"
   echo 
   echo "             -i <data>"
   echo "             Specify text or NetCDF data file."
   echo 
   echo "             -g <gfile>"
   echo "             Merge EFIT gfile for high-precision geometry data."
   echo 
   echo "             -cer <vpol>"
   echo "             Merge data Er and velocity data from Solomon's cer datafile."
   echo 
   echo "PLASMA STATE Options"
   echo
   echo "             -i <data>"
   echo "             Specify NetCDF data file."
   echo
   echo "             -g <gfile>"
   echo "             EFIT gfile for high-precision geometry data (includes q and P_tot)."
   echo 
   echo "             -r <i1,i2,i3,i4,i5>"
   echo "             Reorder ions."
   echo 
   echo "             -l <i1,i2,...>"
   echo "             Lump ions before reordering."
   echo
   echo "             -lf"
   echo "             Lump fast ions into a single species."
   echo
   echo "             -sub_aux"
   echo "             Toggles subtractive auxiliary power (rather than true sum of RF and NBI)"
   echo
   echo "CORSICA Options"
   echo
   echo "             -i <data.corsica>"
   echo "             Specify Corsica data file."
   echo
   echo "             -g <gfile>"
   echo "             EFIT gfile for high-precision geometry data (includes q and P_tot)."
   echo 
   echo "             -r <reorder sequence>"
   echo "             Reorder ions."
   echo
   echo "UFILE Options"
   echo
   echo "             -i UFILE"
   echo "             Toggle UFILE mode."
   echo
   echo "             -t <time>"
   echo "             Time for averaging."
   echo
   echo "             -r <reorder sequence>"
   echo "             Reorder ions."
   echo
   echo "             Example: To invoke UFILE mode, ensure the *d.dat files exist in the"
   echo "                      current directory, then type:"
   echo
   echo "                       $ profiles_gen -i UFILE -t <time>"
   echo                   
   echo "                      Leaving out the -t option will print time window"
   echo
   echo "PEQDSK/PFILE Options"
   echo
   echo "             -i <PFILE>"
   echo "             Specify PFILE (peqdsk) data file."
   echo
   echo "             -g <gfile>"
   echo "             EFIT gfile for high precision geometry data [REQUIRED] (includes q and P_tot)"
   echo
   echo "null Options"
   echo
   echo "             -i null"
   echo "             Toggle null profile data mode."
   echo
   echo "             -g <GFILE>"
   echo "             GFILE (geqdsk) containing flux-surface data [required]."
   echo
   echo "             -n_null <int>"
   echo "             Number of radial gridpoints (default: 40)"
   echo
   echo "OMFIT mapper control options"
   echo 
   echo "             -npsi <int>"
   echo "              Number of flux-surfaces to contout"
   echo
   echo "             -nrz <int>"
   echo "              R-Z resolution for psi contours."
   echo
   echo "input.gacode (simple passthrough if no gfile specified)"
   echo
   echo "             -i <data>"
   echo "             Data in input.gacode format."
   echo
   echo "             -g <GFILE>"
   echo "             GFILE (geqdsk) containing flux-surface data."
   echo
   echo "VELOCITY GENERATION (VGEN) MODE"
   echo
   echo "             -vgen"
   echo "             Toggle vgen mode."
   echo
   echo "             -in <number of ion species or input.neo> " 
   echo "             If number specified (>=1), uses default neo template"
   echo "             Otherwise, input.neo must exist."
   echo "             See"
   echo "             $VGEN_DIR/input.neo.*"
   echo "             for examples."
   echo
   echo "             -er <val>" 
   echo "             Method to compute Er."
   echo "             1=Force balance, 2=NEO (weak rot), 3=NEO (strong rot), 4=Return given"
   echo
   echo "             -vel <val>" 
   echo "             Method to compute velocities."
   echo "             1=NEO (weak rot), 2=NEO (strong rot), 3=Return given"
   echo
   echo "             -epar <val>" 
   echo "             Flag to compute conductivity."
   echo "             0=yes, 1=no"
   echo
   echo "             -ix <index>" 
   echo "             Index of ion species to match NEO and given velocities."
   echo
   echo "             -nth <min,max>" 
   echo "             Minimum and maximum theta resolutions.  Default -nth 17,39"
   echo
   echo "             -n <mpi tasks>"
   echo
   echo "             -nn"
   echo "             Use the NEO neural network instead of NEO DKE solve."
   echo
   echo "LOCAL INPUT GENERATION MODE"
   echo 
   echo "             -loc_rad <r/a>"
   echo "             Reference radius, r/a."
   echo 
   echo "             -loc_rho <rho>"
   echo "             Reference rho=sqrt[chi/chi(a)]"
   echo 
   echo "             -loc_psi <psi_N>"
   echo "             Reference psi_N=psi/psi(a)"
   echo 
   echo "             -qn"
   echo "             Toggle quasineutrality."
   echo 
   echo "             -banana"
   echo "             Include banana-width diagnostic"
   echo 
   echo "             -append"
   echo "             Append to existing input.*.locpargen files"
   echo
   echo "EXAMPLES:"
   echo " "
   echo
   echo "(1) Typical usage for DIII-D plasmas with iterdbfile only (2 steps)"
   echo "    NEO will generate Er and all velocities:"
   echo "    (2 ions + electrons)"
   echo 
   echo "    profiles_gen -i iterdb -g gfile"
   echo "    profiles_gen -vgen -i input.gacode -er 2 -vel 1 -in 2 -ix 2"
   echo
   echo "    if using your own input.neo, use '-in input.neo'"
   echo 
   echo "(2) Typical usage for DIII-D plasmas with CER file available (2 steps)"
   echo "    NEO will take Er from CER file and generate all velocities:"
   echo "    (2 ions + electrons)"
   echo 
   echo "    profiles_gen -i iterdb -g gfile -cer cerfile"
   echo "    profiles_gen -vgen -i input.gacode -er 4 -vel 2 -in 2 -ix 2"
   echo 

   exit 1
fi
#=============================================================

#=============================================================
# Define DEFAULT variables for flag capture
#
# working root
SIMROOT=$PWD

CONFIG=.prgenconfig
DESCRIBE_FLAG=0

FILE_FLAG=0
VERBOSE_FLAG=0
ORDER_FLAG=0
LUMP_FLAG=0
LUMP_FAST_FLAG=0
TRUE_AUX_FLAG=1

# Number of points for -i null option
N_NULL=40

IPCCW=0
BTCCW=0
NFOURIER=24

# OMFIT mapper variables
EFIT=0
NRZ=2000
NPSI=128
PLOT=0
NOP_FLAG=0
NOQ_FLAG=0

# Extra datafiles
GFILE=null
CER_FILE=null

# VGEN mode variables
VGEN_IN=null
VGEN_ER=1
VGEN_VEL=2
VGEN_EPAR=0
VGEN_IX=2
VGEN_NTH=17,39
VGEN_FLAG=0
VGEN_NN_FLAG=0
NPROC=1
NOMP=1
NUMA=0
MPINUMA=0

# UFILE 
UFILETIME=null

# LOCAL PARAMETER MODE variables
LOC_RAD=0
LOC_RHO=0
LOC_PSI=0
HASGEO=0
QNFLAG=0
BANANA=0
APPENDFLAG=0
#=============================================================

#=============================================================
# Parse command line options
#
while [ $# -gt 0 ] ; do
  case "$1" in

  -p) shift ; SIMROOT=$1 ;;

  -e) shift ; LOCDIR=$1 ;;

  -i) shift ; FILE_FLAG=1 ; FILE="$1" ;;

  -describe) shift ; DESCRIBE_FLAG=1 ;;

  -cer) shift ; CER_FILE="$1" ;
        echo "INFO: (profiles_gen) Will merge data from $CER_FILE" ;;

  -ipccw) shift ; IPCCW="$1" ;;
  -btccw) shift ; BTCCW="$1" ;;

  -g) shift ; GFILE="$1" ; EFIT=1 ;;

  -nfourier) shift ; NFOURIER=$1 ;;

  -n_null) shift ; N_NULL=$1 ;;

  -gato) EFIT=-1 ;;
  -nrz) shift ; NRZ=$1 ;;
  -npsi) shift ; NPSI=$1 ;;
  -plot) PLOT=1 ;;

  -sub_aux) TRUE_AUX_FLAG=0 ;;
  
  -V) VERBOSE_FLAG=1 ;;

  -nop) NOP_FLAG=1 ;;
  -noq) NOQ_FLAG=1 ;;

  -r) shift ; ORDER="$1" ; ORDER_FLAG=1 ;;

  -l) shift ; LUMP=$1 ; LUMP_FLAG=1 ;;
  -lf) LUMP_FAST_FLAG=1 ;;

  -vgen) VGEN_FLAG=1 ;;

  -n) shift ; NPROC=$1 ;;

  -nn) VGEN_NN_FLAG=1 ;;

  -in) shift ; VGEN_IN=$1 ;;

  -er) shift ; VGEN_ER=$1 ;;

  -vel) shift ; VGEN_VEL=$1 ;;

  -ix) shift ; VGEN_IX=$1 ;;

  -epar) shift ; VGEN_EPAR=$1 ;;

  -nth) shift ; VGEN_NTH=$1 ;;

  -t) shift ; UFILETIME="$1" ;;

  -loc_rad) shift ; LOC_RAD=$1 ;;
  -loc_rho) shift ; LOC_RHO=$1 ;;
  -loc_psi) shift ; LOC_PSI=$1 ;;
  -append) APPENDFLAG=1 ;;
  -qn) QNFLAG=1 ;;
  -banana) BANANA=1 ;;

  esac
  shift
done
#=============================================================

#=============================================================
# Construct simulation directory: $SIMDIR
#
if [ "$LOCDIR" == "." ]
then
   LOCDIR=`basename $PWD`
   cd .. ; SIMROOT=$PWD
fi
SIMDIR=$SIMROOT/$LOCDIR

cd $SIMDIR
#=============================================================

if [ $DESCRIBE_FLAG -eq 1 ]
then
    python $GACODE_ROOT/python/profiles_gen/profileplot_describe.py
    exit 0
fi

#=============================================================
# Filetype detection and management
#
if [ "$FILE" == "" ] ; then
   echo "ERROR: (profiles_gen) Specify an input file via -i."
   exit 1
fi

itype=`gacode_type_autodetect $FILE`

if [ "$itype" == "NOT_FOUND" ] ; then
   echo "ERROR: (profiles_gen) $FILE not found."
   exit 1
fi
if [ "$itype" == "UNKNOWN" ] ; then
   echo "ERROR: (profiles_gen) $FILE is an unknown type."
   exit 1 
fi

if [ $EFIT -eq 0 ] ; then

   gtype="none"
   if [ "$itype" == "PFILE" ] ; then
      echo "ERROR: (profiles_gen) A GFILE (-g) must be used with a PFILE."  
      exit 1
   fi
   if [ "$itype" == "CORSICA" ] ; then
      echo "ERROR: (profiles_gen) A GFILE (-g) must be used with a CORSICA file."  
      exit 1
   fi

else

   gtype=`gacode_type_autodetect $GFILE`
   echo "INFO: (profiles_gen) $GFILE is autodetected as $gtype."
   header=`head -1 $GFILE` ; harr=($header)

fi
#=============================================================

#=============================================================
# Managing input file (also catches UFILE mode)

if [ "$itype" == "UFILE" ] ; then

   #-----------------------------------------------
   # UFILE mode
   #-----------------------------------------------

   echo "INFO: (profiles_gen) Extracting UFILE 0d data."
   python $PRGEN_BIN/gacode_ufile_tool.py *0d.dat $UFILETIME >> out.ufile.log
   echo "INFO: (profiles_gen) Extracting and averaging UFILE 1d data."
   python $PRGEN_BIN/gacode_ufile_tool.py *1d.dat $UFILETIME >> out.ufile.log
   echo "INFO: (profiles_gen) Extracting and averaging UFILE 2d data."
   python $PRGEN_BIN/gacode_ufile_tool.py *2d.dat $UFILETIME >> out.ufile.log
   if [ "$UFILETIME" == "null" ]
   then
      cat out.ufile.log
      exit 1
   fi

elif [ "$itype" == "null" ] ; then

   # gfile-only mode
   echo "INFO: (profiles_gen) Parsing GFILE only."

else

   echo "INFO: (profiles_gen) $FILE is autodetected as $itype."

fi

#=============================================================
# Trap a p-file and split into components 
#
if [ "$itype" == "PFILE" ] ; then
   # Now, strip pfile into parts.  Rename $FILE so pfile detected in prgen.
   rm -f pfile.*
   python $PRGEN_BIN/gacode_pfile_tool.py $FILE
fi
#=============================================================

#=============================================================
# Manage execution of locpargen

if [ "$LOC_RAD" != "0" ] || [ "$LOC_RHO" != "0" ] || [ "$LOC_PSI" != "0" ]
then
  if [ ! -f $LOCPARGEN ]
  then
     echo "ERROR: (profiles_gen) You need to build the locpargen executable."
     exit 1
  fi
  if [ -f input.gacode.geo ]
  then
      HASGEO=1
  fi
  echo $LOC_RAD > input.locpargen
  echo $LOC_RHO >> input.locpargen
  echo $LOC_PSI >> input.locpargen
  echo $HASGEO >> input.locpargen
  echo $QNFLAG >> input.locpargen
  echo $APPENDFLAG >> input.locpargen
  $LOCPARGEN
  if [ $BANANA -eq 1 ] ; then
     python ${PRGEN_BIN}/banana_width.py
  fi
  #rm input.locpargen
  exit 0
fi

#=============================================================

#=============================================================
# Manage execution of vgen
#
if [ $VGEN_FLAG -eq 1 ]
then
    if [ $VGEN_NN_FLAG -eq 1 ]
    then
	if [ $VGEN_ER -ne 4 ]
	then
	    echo "ERROR: (profiles_gen) With -nn, must specify -er 4"
	    exit
	fi
    fi

   NEO_DIR=$GACODE_ROOT/neo

   # Create/recreate vgen work directory

   rm -rf vgen ; mkdir vgen ; cd vgen

   # Check for input.neo file
   if [ $VGEN_IN == 'input.neo' ]
   then
      if [ -f ../input.neo ]
      then
          cp ../input.neo input.neo
      else
          echo "ERROR: (profiles_gen) Specify ion number >= 1 with -in for default input.neo template, or create input.neo"
          exit 1
      fi
   else if [[ $VGEN_IN =~ [1-9] ]]
	then
	    cp $VGEN_DIR/input.neo.default input.neo
	    echo "N_SPECIES="$((VGEN_IN + 1)) >> input.neo
	else
	  echo "ERROR: (profiles_gen) Specify ion number >= 1 with -in for default input.neo template, or create input.neo"
          exit 1
	fi
   fi

   # Tell NEO that its being run in subroutine mode by vgen.
   echo "SUBROUTINE_FLAG=1" >> input.neo 

   cp ../$FILE input.gacode
   if [ -f "../$FILE.geo" ]
   then
       cp ../$FILE.geo input.gacode.geo
   else
       echo "INFO: (profiles_gen) $FILE.geo not found -- using EQUILIBRIUM_MODEL=2 (miller geo)"
       echo "EQUILIBRIUM_MODEL=2" >> input.neo
   fi

   python $NEO_DIR/bin/neo_parse.py

   # Construct vgen.dat
   echo "$VGEN_ER"  > vgen.dat
   echo "$VGEN_VEL" >> vgen.dat
   echo "$VGEN_IX"  >>  vgen.dat
   echo "$VGEN_EPAR"  >>  vgen.dat
   # Strip to obtain nmin,nmax
   p=0
   for i in $(echo $VGEN_NTH | tr "," "\n")
   do
      p=$(($p+1))
      echo $i >> vgen.dat
   done
   if [ $p -eq 1 ] 
   then
      echo $i >> vgen.dat
   fi
   echo "$VGEN_NN_FLAG" >> vgen.dat

   # Launch parallel vgen executable
   $GACODE_ROOT/platform/exec/exec.$GACODE_PLATFORM \
    $SIMDIR/vgen $NPROC $VGEN_EXE/vgen $NOMP $NUMA $MPINUMA

   exit 0
fi
#=============================================================

#=============================================================
# If we make it here, its time for cleanup
#
echo "INFO: (profiles_gen) Removing old input.gacode* files"
rm -f input.gacode.geo
#=============================================================

#=============================================================
# Check for executable
#
if [ ! -f $EXEC ] ; then
   echo "ERROR: (profiles_gen) Did not find executable $EXEC."
   exit 1
fi
#=============================================================

#=============================================================
# Construct prgen input file ($CONFIG)
date > $CONFIG

# Required data file (ITERDB, PLASMASTATE, etc)
echo $FILE >> $CONFIG
echo $itype >> $CONFIG

# Optional data files
echo $GFILE ${harr[1]} ${harr[5]} ${harr[6]} >> $CONFIG 
echo $CER_FILE >> $CONFIG

# EFIT data control
echo $EFIT >> $CONFIG
echo $NOQ_FLAG >> $CONFIG
echo $NOP_FLAG >> $CONFIG

# Verbosity
echo $VERBOSE_FLAG >> $CONFIG

# GFILE MERGE
echo $GMERGE_FLAG >> $CONFIG

# FIELD ORIENTATION
echo $IPCCW >> $CONFIG
echo $BTCCW >> $CONFIG

# Fourier modes
echo $NFOURIER >> $CONFIG
echo $N_NULL >> $CONFIG
echo $LUMP_FAST_FLAG >> $CONFIG
echo $TRUE_AUX_FLAG >> $CONFIG

# NOTE: reorder flags will be appended later.
#=============================================================

#==============================================================
# Manage equilibrium (run GATO, OMFIT, etc) here
#

# Use GATO:
if [ $EFIT -eq -1 ]
then
   if [ ! -f $GATO ]
   then
      echo "ERROR: (profiles_gen) You need to build the GATO executable: $ cd gato ; make"
      exit 1
   fi
   echo "INFO: (profiles_gen) Spawning GATO mapper to generate flux surfaces from $GFILE."

   # GATO requires gfile as "eqgta"
   cp $GFILE eqgta

   # Clear any stale error files
   rm -f gato_error

   # Create entire GATO "ingta" namelist
   echo "GATO template" > ingta
   echo "129x129 200x400  ncase=0" >> ingta
   echo "n  = 1  ncorr=+1  Wall on the Plasma" >> ingta
   echo " &inputd" >> ingta
   echo " ntor     = 1" >> ingta
   echo " ncase    = 0" >> ingta
   echo " norm     = 0" >> ingta
   echo " nmap     = 0" >> ingta
   echo " neqtyp   = 0" >> ingta
   echo " jpsi     = 100" >> ingta
   echo " itht     = 200" >> ingta
   echo " isym     = 0" >> ingta
   echo " igrid    = 0" >> ingta
   echo " ncorr    = +1" >> ingta
   echo " corrfac  = 1.0000" >> ingta
   echo " nmesh    = 2" >> ingta
   echo " nedge    = +4" >> ingta
   echo " sedg0    = 0.0" >> ingta
   echo " sedg1    = 0.0" >> ingta
   echo " maptrace = 0" >> ingta
   echo " npak     = 0" >> ingta
   echo " nrat     = 0" >> ingta
   echo " nppack   = 0" >> ingta
   echo " nqpack   = 0" >> ingta
   echo " pkfrac   = 0.3333333333333333" >> ingta
   echo " qpfrac   = 0.3333333333333333" >> ingta
   echo " cspak    = 0.5" >> ingta
   echo " npfit    = 150" >> ingta
   echo " dpsisl   = 0.0" >> ingta
   echo " dpsisd   = +0.10e-04" >> ingta
   echo " psipak   = 1.0" >> ingta
   echo " delac    = 0.10e-02" >> ingta
   echo " tolspln  = 0.10e-02" >> ingta
   echo " ntrymx   = 10" >> ingta
   echo " nccellr  = +1" >> ingta
   echo " nqaxis   =  0" >> ingta
   echo " qxin     = 0.0" >> ingta
   echo " idnsty   = 0" >> ingta
   echo " ifastp   = 0" >> ingta
   echo " ndnxp0   = 0" >> ingta
   echo " ndnxp1   = 2" >> ingta
   echo " ndnxp2   = 2" >> ingta
   echo " iwal     = 0" >> ingta
   echo " nwall    = 60" >> ingta
   echo " irext    = 0" >> ingta
   echo " rext     = 1.000" >> ingta
   echo " nrestrt  = 0" >> ingta
   echo " ndsktim  = +1" >> ingta
   echo " nev      = 1" >> ingta
   echo " nreslv   = 0" >> ingta
   echo " nbrmax   = 10" >> ingta
   echo " nismax   = 10" >> ingta
   echo " ncymax   = 1" >> ingta
   echo " nitmax   = 20" >> ingta
   echo " ncyfin   = 1" >> ingta
   echo " al0      = -0.100000e-04" >> ingta
   echo " dal0     = 10.0" >> ingta
   echo " al0bas   = +0.00" >> ingta
   echo " al0min   = -0.10e+00" >> ingta
   echo " al0max   = -0.10e-11" >> ingta
   echo " epschy   = 0.00001" >> ingta
   echo " epscon   = 0.00001" >> ingta
   echo " njplot   = +200" >> ingta
   echo " niplot   = 1" >> ingta
   echo " nskpi    = +2" >> ingta
   echo " nskpj    = +2" >> ingta
   echo " ncont    = 10" >> ingta
   echo " ncplot   = 10" >> ingta
   echo " nxisgn   = +1" >> ingta
   echo " nxuplt   = +3" >> ingta
   echo " nxiplt   = +1" >> ingta
   echo " nxrplt   =  0" >> ingta
   echo " nxpplt   =  0" >> ingta
   echo " nbuplt   = +1" >> ingta
   echo " nbiplt   = +1" >> ingta
   echo " nbrplt   =  0" >> ingta
   echo " nbpplt   =  0" >> ingta
   echo " nauplt   = +1" >> ingta
   echo " naiplt   = +1" >> ingta
   echo " narplt   =  0" >> ingta
   echo " napplt   =  0" >> ingta
   echo " ntphase  = -4" >> ingta
   echo " mshpsi   = 12" >> ingta
   echo " mshchi   = 3" >> ingta
   echo " nvfft    = 0" >> ingta
   echo " iplotm   = +10" >> ingta
   echo " ioutm    = 1" >> ingta
   echo " ioutw    = 1" >> ingta
   echo " ioute    = 0" >> ingta
   echo " ioutp    = +19" >> ingta
   echo " iomshp   = -2" >> ingta
   echo " ioeqlp   = -2" >> ingta
   echo " ioeigp   = +2" >> ingta
   echo " iodlbp   = +2" >> ingta
   echo " iodlap   = +2" >> ingta
   echo " iopsip   = -2" >> ingta
   echo " iolinp   = +2" >> ingta
   echo " iolnbp   = +2" >> ingta
   echo " iolnap   = +2" >> ingta
   echo " iofftp   = +2" >> ingta
   echo " ioffbp   = -2" >> ingta
   echo " ioffap   = -2" >> ingta
   echo " ioconp   = -2" >> ingta
   echo " iodlbp   = -2" >> ingta
   echo " iodlap   = -2" >> ingta
   echo " iodlwp   = +2" >> ingta
   echo " &end" >> ingta

   $GATO >& out.gato.info
   if [ -f 'gato_error' ]
   then
      echo 'ERROR: (gato) Fatal error.'
      exit 1
   else
      mv grid.dat out.gato.fluxsurf
      echo 'INFO: (gato) Done.  Check out.gato.info for diagnostics.'
   fi
fi

if [ $EFIT -eq 1 ] ; then
   if [ $PLOT -eq 1 ] ; then
      python $OMFIT $GFILE $NPSI $NRZ -1 2
   else 
      python $OMFIT $GFILE $NPSI $NRZ 0 2
   fi
fi

#==============================================================

#==============================================================
# Ion reordering: reset ion order if "-r" option present
#
# Default ion order vector
if [ $ORDER_FLAG -eq 1 ]
then
   if [ ${#ORDER} -lt 19 ]
   then
      echo "ERROR: (profiles_gen) Incomplete order vector.  Should be like 1,3,2,4,5,6,7,8,9,10"
      exit 1;
   fi

   for i in $(echo $ORDER | tr "," "\n")
   do
      ord_vec="$ord_vec $i"
   done
   echo $ord_vec >> $CONFIG
else
   echo "1 2 3 4 5 6 7 8 9 10" >> $CONFIG
fi
#==============================================================

#==============================================================
# Ion lumping parameters: 
#
if [ $LUMP_FLAG -eq 1 ]
then
   p=0
   for i in $(echo $LUMP | tr "," "\n")
   do
      p=$(($p+1))
      lump_vec="$lump_vec $i"
   done
   echo $p >> $CONFIG
   echo $lump_vec >> $CONFIG
else
   echo "1" >> $CONFIG
   echo "0" >> $CONFIG
fi 
#==============================================================

#==============================================================
# MAIN: Run prgen here
#
$EXEC

if [ -f "success" ] ; then
   echo "INFO: (profiles_gen) Done."
else
   echo "ERROR: (profiles_gen) *Failed*. Try running with -V option"
fi
#==============================================================

#==============================================================
# Final cleanup:
#
#  Remove configuration files, output files, etc.
rm -f egta eqgta nova.* 
#  Remove stale files
rm -f input.gato.* dummy.peq 

if [ $VERBOSE_FLAG -eq 0 ]
then
   rm -f $CONFIG fluxfit.* ingta o1gta grid.dat success
   rm -f *.ave out.com out.dim out.data out.ufile.log
   rm -f gfile out.expro.run pfile.* out.gato.*
else
   if [ -f "ingta" ] ; then
      mv ingta input.gato.ingta
   fi
fi
#==============================================================

cd $SIMROOT
